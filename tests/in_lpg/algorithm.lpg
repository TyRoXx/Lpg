let algorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let handler_a = (element: integer): std.unit
    assert(integer-equals(0, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true-predicate = (element: boolean): boolean
    boolean.true
let false-predicate = (element: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true-predicate)](new-array(boolean), true-predicate)))
assert(not(algorithm.any_of[boolean, type_of(false-predicate)](new-array(boolean), false-predicate)))

let non-empty = new-array(boolean)
assert(non-empty.append(boolean.true))
assert(algorithm.any_of[boolean, type_of(true-predicate)](non-empty, true-predicate))
assert(not(algorithm.any_of[boolean, type_of(false-predicate)](non-empty, false-predicate)))

let empty = new-array(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[integer].some(let e):
        fail()
    case std.option[integer].none:
        std.unit_value
match algorithm.find[boolean](empty, boolean.false)
    case std.option[integer].some(let e):
        fail()
    case std.option[integer].none:
        std.unit_value
