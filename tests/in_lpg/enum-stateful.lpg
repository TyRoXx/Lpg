let single = enum
    a(string-ref)
let test-single = (arg: single)
    match arg
        case single.a(let state):
            side-effect()
            string-equals("abc", state)
let make-runtime-string = (value: string-ref)
    side-effect()
    concat("", value)
assert(test-single(single.a(make-runtime-string("abc"))))
assert(not(test-single(single.a("def"))))

assert(string-equals("abc", match single.a(make-runtime-string("abc"))
    case single.a(let state): state
))

let return-stateful-enum = ()
    side-effect()
    single.a(make-runtime-string("abc"))
assert(string-equals("abc", match return-stateful-enum()
    case single.a(let state): state
))

let structure = struct
    x: string-ref
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(unit)
    d(boolean)
    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
        side-effect()
        string-equals("abc", state.x)
    case multi.c: boolean.false
    case multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multi.f: boolean.false
)

//the type checker once had a bug that generated garbage code out of this:
let nested-enum = enum
    a(enum
        b)
    b
let n = nested-enum.b
