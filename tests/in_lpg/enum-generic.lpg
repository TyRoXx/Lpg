let single-parameter = enum[T]
    a(T)

let a = single-parameter[boolean].a(boolean.true)
assert(match a
    case single-parameter[boolean].a(let s):
        s
)

let runtime-string = (arg: string-ref)
    side-effect()
    concat("", arg)

let b = single-parameter[string-ref].a(runtime-string("abc"))
assert(match b
    case single-parameter[string-ref].a(let s):
        string-equals("abc", s)
)

let two-parameters = enum[First, Second]
    first(First)
    second(Second)

let c = two-parameters[boolean, string-ref].second(runtime-string("abc"))
assert(match c
    case two-parameters[boolean, string-ref].first(let s):
        boolean.false
    case two-parameters[boolean, string-ref].second(let s):
        string-equals("abc", s)
)

let using-global = enum[T]
    a(T)
    b(boolean)
assert(match using-global[boolean].b(boolean.true)
    case using-global[boolean].a(let s):
        boolean.false
    case using-global[boolean].b(let s):
        s
)

let local = struct
    m: boolean
let using-local = enum[T]
    a(T)
    b(local)
    c(()
        let cover-integer-literal = 3
        let cover-string-literal = "abc"
        let cover-tuple = {local}
        let cover-struct = struct
            m: boolean
        let cover-struct-var = cover-struct{boolean.true}
        let access-struct = cover-struct-var.m
        //comment
        loop
            break
        let cover-enum = enum
            x
        let cover-enum-var = cover-enum.x
        match cover-enum-var
            case cover-enum.x: unit
        let cover-not = !boolean.true
        let cover-interface = interface
            m(): boolean
        impl cover-interface for boolean
            m(): boolean
                self
        let cover-instantiation = single-parameter[boolean].a(boolean.true)
        match cover-instantiation
            case single-parameter[boolean].a(let s): s
        local
())
assert(match using-local[boolean].b(local{boolean.true})
    case using-local[boolean].a(let s):
        boolean.false
    case using-local[boolean].b(let s):
        s.m
    case using-local[boolean].c(let s):
        boolean.false
)
