let std = import std

let producer = interface[Output]
    produce(): Output

let transformer = interface[From, To]
    transform(input: From): To

let dummy = struct
impl producer[std.boolean] for dummy
    produce()
        std.boolean.true

let a : producer[std.boolean] = dummy{}
assert(a.produce())

impl transformer[std.boolean, std.string-ref] for dummy
    transform(input: std.boolean): std.string-ref
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string-ref] = dummy{}
assert(string-equals("true", b.transform(std.boolean.true)))
assert(string-equals("false", b.transform(std.boolean.false)))

let captures-values = interface[T]
    method(arg0: std.string-ref, arg1: T): producer[std.boolean]

impl captures-values[std.unit] for dummy
    method(arg0: std.string-ref, arg1: std.unit): producer[std.boolean]
        dummy{}

let access-parameter = interface[Struct]
    method(arg: Struct.element): std.unit
let access-parameter-struct = struct
    element: std.type
impl access-parameter[access-parameter-struct{std.boolean}] for dummy
    method(arg: std.boolean): std.unit
        std.unit_value
