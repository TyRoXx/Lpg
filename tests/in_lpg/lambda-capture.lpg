let std = import std

let require-compile-time = enum[CompileTimeValue]

/*use a captured variable in a compile-time context*/
let m = boolean
let f5 = ()
    let a : m = boolean.true
    a
require-compile-time[f5]
assert(f5())

/*use a runtime variable in a runtime context*/
let f = ()
    side_effect()
    23
require-compile-time[f]
let c = f()
let g = ()
    assert(integer_equals(c, 23))
g()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    assert(integer_equals(b, 23))
require-compile-time[h]
h()

/*capture an argument at compile time*/
let f6 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.and(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boolean)
    side_effect()
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.and(indirection(), b)
assert(f7(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture multiple variables*/
let x = 2
let y = "2"
let t = ()
    string-equals(y, integer-to-string(x))
assert(t())

/*function with multiple parameters captures something*/
let z = (a: boolean, d: boolean)
    side_effect()
    std.and(a, std.and(d, integer_equals(c, 23)))
assert(z(boolean.true, boolean.true))

/*capture the same variable twice*/
let capture-twice = ()
    integer_equals(c, c)
assert(capture-twice())
