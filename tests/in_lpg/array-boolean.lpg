let std = import std

let array-type = std.array[std.boolean]
let a : array-type = new_array(std.boolean)
assert(integer_equals(0, a.size()))
assert(not(a.store(0, std.boolean.true)))
assert(not(a.store(1, std.boolean.true)))
assert(not(a.store(2, std.boolean.true)))

assert(match a.load(0)
    case std.option[std.boolean].some(let element): std.boolean.false
    case std.option[std.boolean].none: std.boolean.true
)

assert(a.append(std.boolean.true))
assert(integer_equals(1, a.size()))

assert(match a.load(0)
    case std.option[std.boolean].some(let element): element
    case std.option[std.boolean].none: std.boolean.false
)

assert(match a.load(1)
    case std.option[std.boolean].some(let element): std.boolean.false
    case std.option[std.boolean].none: std.boolean.true
)

assert(a.append(std.boolean.false))
assert(integer_equals(2, a.size()))

assert(match a.load(0)
    case std.option[std.boolean].some(let element): element
    case std.option[std.boolean].none: std.boolean.false
)

assert(match a.load(1)
    case std.option[std.boolean].some(let element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)

assert(match a.load(2)
    case std.option[std.boolean].some(let element): std.boolean.false
    case std.option[std.boolean].none: std.boolean.true
)

assert(a.store(0, std.boolean.false))
assert(match a.load(0)
    case std.option[std.boolean].some(let element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)

assert(a.store(1, std.boolean.true))
assert(match a.load(0)
    case std.option[std.boolean].some(let element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)
assert(match a.load(1)
    case std.option[std.boolean].some(let element): element
    case std.option[std.boolean].none: std.boolean.false
)

assert(not(a.store(2, std.boolean.true)))
assert(match a.load(0)
    case std.option[std.boolean].some(let element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)
assert(match a.load(1)
    case std.option[std.boolean].some(let element): element
    case std.option[std.boolean].none: std.boolean.false
)

let big = new_array(std.boolean)
let append-1 = ()
    assert(big.append(std.boolean.true))
let append-4 = ()
    append-1()
    append-1()
    append-1()
    append-1()
let append-16 = ()
    append-4()
    append-4()
    append-4()
    append-4()
let append-64 = ()
    append-16()
    append-16()
    append-16()
    append-16()
let append-256 = ()
    append-64()
    append-64()
    append-64()
    append-64()
let append-1024 = ()
    append-256()
    append-256()
    append-256()
    append-256()
let append-4096 = ()
    append-1024()
    append-1024()
    append-1024()
    append-1024()
append-4096()
assert(integer_equals(4096, big.size()))

big.clear()
assert(integer_equals(0, big.size()))
