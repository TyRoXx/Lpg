let std = import std
let es = import ecmascript
let option = std.option

let test-string = (host: es.host)
    let exported : host-value = host.export-string("hello")
    assert(match host.import-string(exported)
        case option[std.string-ref].some(let content):
            string-equals("hello", content)
        case option[std.string-ref].none:
            boolean.false
)
    assert(match host.import-string(host.undefined())
        case option[std.string-ref].some(let content):
            boolean.false
        case option[std.string-ref].none:
            boolean.true
)

let test-read-property = (host: es.host)
    let object : host-value = host.export-string("hello")
    assert(match host.read-property(object, "length")
        case option[host-value].some(let length):
            host.equals(host.export-integer(5), length)
        case option[host-value].none:
            boolean.false
)

let test-export-integer = (host: es.host)
    let min = host.export-integer(0)
    let max = host.export-integer(9007199254740991)
    assert(host.equals(min, min))
    assert(host.equals(max, max))
    assert(not(host.equals(min, max)))
    assert(not(host.equals(max, min)))
    assert(not(host.equals(min, host.undefined())))
    assert(not(host.equals(max, host.undefined())))

let test-undefined = (host: es.host)
    let u0 = host.undefined()
    let u1 = host.undefined()
    assert(host.equals(u0, u1))

let test-call-method = (host: es.host)
    let object : host-value = host.export-string("hello")
    let arguments = new-array(host-value)
    assert(arguments.append(host.export-integer(0)))
    match host.call-method(object, "charCodeAt", arguments)
        case option[host-value].some(let result):
            assert(host.equals(result, host.export-integer(104)))
        case option[host-value].none:
            assert(boolean.false)
    // the following code leads to assert getting called with undefined as an argument
    /*assert(match host.call-method(object, "charCodeAt", arguments)
        case option[host-value].some(let result):
            host.equals(result, host.export-integer(104))
        case option[host-value].none:
            boolean.false
)*/

//
(host: es.host)
    test-string(host)
    test-read-property(host)
    test-export-integer(host)
    test-undefined(host)
    test-call-method(host)
