let std = import std
let es = import ecmascript
let option = std.option

let test-string = (host: es.host)
    let exported : host-value = host.export-string("hello")
    assert(match host.import-string(exported)
        case option[std.string].some(let content):
            string-equals("hello", content)
        case option[std.string].none:
            boolean.false
)
    assert(match host.import-string(host.undefined())
        case option[std.string].some(let content):
            boolean.false
        case option[std.string].none:
            boolean.true
)

let test-read-property = (host: es.host)
    let object : host-value = host.export-string("hello")
    assert(match host.read-property(object, "length")
        case option[host-value].some(let length):
            host.equals(host.export-integer(5), length)
        case option[host-value].none:
            boolean.false
)

let test-export-integer = (host: es.host)
    let min = host.export-integer(0)
    let max = host.export-integer(9007199254740991)
    assert(host.equals(min, min))
    assert(host.equals(max, max))
    assert(not(host.equals(min, max)))
    assert(not(host.equals(max, min)))
    assert(not(host.equals(min, host.undefined())))
    assert(not(host.equals(max, host.undefined())))

let test-undefined = (host: es.host)
    let u0 = host.undefined()
    let u1 = host.undefined()
    assert(host.equals(u0, u1))

let test-call-method = (host: es.host)
    let object : host-value = host.export-string("hello")
    let arguments = new-array(host-value)
    assert(arguments.append(host.export-integer(0)))
    let charCode = host.call-method(object, "charCodeAt", arguments)
    assert(host.equals(charCode, host.export-integer(104)))

let test-import-integer = (host: es.host)
    let zero = host.export-integer(0)
    assert(match host.import-integer(zero)
        case option[es.integer].some(let value):
            integer_equals(value, 0)
        case option[es.integer].none:
            boolean.false
)
    let one = host.export-integer(1)
    assert(match host.import-integer(one)
        case option[es.integer].some(let value):
            integer_equals(value, 1)
        case option[es.integer].none:
            boolean.false
)
    let max = host.export-integer(9007199254740991)
    assert(match host.import-integer(max)
        case option[es.integer].some(let value):
            integer_equals(value, 9007199254740991)
        case option[es.integer].none:
            boolean.false
)

let test-equals = (host: es.host)
    assert(host.equals(host.undefined(), host.undefined()))
    assert(host.equals(host.export-integer(0), host.export-integer(0)))
    assert(host.equals(host.export-string("test"), host.export-string("test")))
    assert(not(host.equals(host.export-integer(0), host.undefined())))
    assert(not(host.equals(host.export-string("undefined"), host.undefined())))
    assert(not(host.equals(host.export-integer(0), host.export-integer(1))))
    assert(not(host.equals(host.export-integer(0), host.export-string("0"))))

//
(global: host-value, host: es.host)
    test-string(host)
    test-read-property(host)
    test-export-integer(host)
    test-undefined(host)
    test-call-method(host)
    test-import-integer(host)
    test-equals(host)
