let std = import std
let es = import ecmascript
let option = std.option

let test_string = (host: es.host)
    let exported : host_value = host.export_string("hello")
    assert(match host.import_string(exported)
        case option[std.string].some(let content):
            string_equals("hello", content)
        case option[std.string].none:
            boolean.false
)
    assert(match host.import_string(host.undefined())
        case option[std.string].some(let content):
            boolean.false
        case option[std.string].none:
            boolean.true
)

let test_read_property = (host: es.host)
    let object : host_value = host.export_string("hello")
    assert(match host.read_property(object, "length")
        case option[host_value].some(let length):
            host.equals(host.export_integer(5), length)
        case option[host_value].none:
            boolean.false
)

let test_export_integer = (host: es.host)
    let min = host.export_integer(0)
    let max = host.export_integer(9007199254740991)
    assert(host.equals(min, min))
    assert(host.equals(max, max))
    assert(not(host.equals(min, max)))
    assert(not(host.equals(max, min)))
    assert(not(host.equals(min, host.undefined())))
    assert(not(host.equals(max, host.undefined())))

let test_undefined = (host: es.host)
    let u0 = host.undefined()
    let u1 = host.undefined()
    assert(host.equals(u0, u1))

let test_call_method = (host: es.host)
    let object : host_value = host.export_string("hello")
    let arguments = new_array(host_value)
    assert(arguments.append(host.export_integer(0)))
    let charCode = host.call_method(object, "charCodeAt", arguments)
    assert(host.equals(charCode, host.export_integer(104)))

let test_import_integer = (host: es.host)
    let zero = host.export_integer(0)
    assert(match host.import_integer(zero)
        case option[es.integer].some(let value):
            integer_equals(value, 0)
        case option[es.integer].none:
            boolean.false
)
    let one = host.export_integer(1)
    assert(match host.import_integer(one)
        case option[es.integer].some(let value):
            integer_equals(value, 1)
        case option[es.integer].none:
            boolean.false
)
    let max = host.export_integer(9007199254740991)
    assert(match host.import_integer(max)
        case option[es.integer].some(let value):
            integer_equals(value, 9007199254740991)
        case option[es.integer].none:
            boolean.false
)

let test_equals = (host: es.host)
    assert(host.equals(host.undefined(), host.undefined()))
    assert(host.equals(host.export_integer(0), host.export_integer(0)))
    assert(host.equals(host.export_string("test"), host.export_string("test")))
    assert(not(host.equals(host.export_integer(0), host.undefined())))
    assert(not(host.equals(host.export_string("undefined"), host.undefined())))
    assert(not(host.equals(host.export_integer(0), host.export_integer(1))))
    assert(not(host.equals(host.export_integer(0), host.export_string("0"))))

let test_call_function_0_arguments = (global: host_value, host: es.host)
    let isNaN = match host.read_property(global, "isNaN")
        case option[host_value].some(let content):
            content
        case option[host_value].none:
            fail()
    let arguments = new_array(host_value)
    let result = host.call_function(isNaN, arguments)
    match host.import_boolean(result)
        case option[boolean].some(let content):
            //undefined is treated as NaN
            assert(content)
        case option[boolean].none:
            fail()

let test_call_function_1_argument = (global: host_value, host: es.host)
    let isNaN = match host.read_property(global, "isNaN")
        case option[host_value].some(let content):
            content
        case option[host_value].none:
            fail()
    let arguments = new_array(host_value)
    assert(arguments.append(host.export_integer(0)))
    let result = host.call_function(isNaN, arguments)
    match host.import_boolean(result)
        case option[boolean].some(let content):
            assert(not(content))
        case option[boolean].none:
            fail()

let test_call_function_2_arguments = (global: host_value, host: es.host)
    let parseInt = match host.read_property(global, "parseInt")
        case option[host_value].some(let content):
            content
        case option[host_value].none:
            fail()
    let arguments = new_array(host_value)
    assert(arguments.append(host.export_string("123")))
    assert(arguments.append(host.export_integer(10)))
    let result = host.call_function(parseInt, arguments)
    match host.import_integer(result)
        case option[es.integer].some(let content):
            assert(integer_equals(123, content))
        case option[es.integer].none:
            fail()

let test_export_boolean = (host: es.host)
    match host.import_boolean(host.export_boolean(boolean.true))
        case option[boolean].some(let content):
            assert(content)
        case option[boolean].none:
            fail()
    match host.import_boolean(host.export_boolean(boolean.false))
        case option[boolean].some(let content):
            assert(not(content))
        case option[boolean].none:
            fail()

//
(global: host_value, host: es.host)
    test_string(host)
    test_read_property(host)
    test_export_integer(host)
    test_undefined(host)
    test_call_method(host)
    test_import_integer(host)
    test_equals(host)
    test_call_function_0_arguments(global, host)
    test_call_function_1_argument(global, host)
    test_call_function_2_arguments(global, host)
    test_export_boolean(host)
