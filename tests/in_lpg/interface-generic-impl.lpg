let std = import std

let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mutable-content = struct[T]
    content: std.array[T]

/*impl[T] mutable[T] for mutable-content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some(let value):
                value
            case std.option[T].none:
                fail()
    store(value: T): std.unit
        assert(self.content.store(0, value))

let make-mutable = [T](T: value): mutable[T]
    let content = new-array(T)
    assert(content.append(value))
    mutable-content[T]{content}
*/