let std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string-equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string-equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string-equals("z", z.method()))

let u : gi["u"] = std.unit_value
assert(string-equals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method(): std.boolean
        std.boolean.true

/*let z : i = gs[int(0, 0)]{0}
assert(z.method())

let u : i = gs[int(0, 1)]{1}
assert(u.method())*/

// impl for generic interface and generic self
let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mutable-content = struct[T]
    content: std.array[T]

/*impl[T] mutable[T] for mutable-content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some(let value):
                value
            case std.option[T].none:
                fail()
    store(value: T): std.unit
        assert(self.content.store(0, value))

let make-mutable = [T](T: value): mutable[T]
    let content = new-array(T)
    assert(content.append(value))
    mutable-content[T]{content}
*/