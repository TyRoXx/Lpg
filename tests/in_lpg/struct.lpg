let std = import std

let s = struct
let s-instance = s{}

let t = struct
    a: boolean
let t-instance = t{boolean.true}
assert(t-instance.a)

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u-instance = u{t{boolean.true}, "abc", 0}
assert(u-instance.a.a)
assert(string_equals("abc", u-instance.b))
assert(integer_equals(0, u-instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion-test-interface = interface
    method(): std.boolean
impl conversion-test-interface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion-test = struct
    i: conversion-test-interface

let conversion = conversion-test{std.unit_value}
assert(conversion.i.method())
