let std = import std

()
    /*use a captured variable in a compile_time context*/
    let m = boolean
    let f5 = ()
        let f6 = ()
            let a : m = boolean.true
            a
        f6()
    assert(f5())
    
    /*use a runtime variable in a runtime context*/
    let f = ()
        side_effect()
        23
    let c = f()
    let g = ()
        ()
            assert(integer_equals(c, 23))
    g()()
    
    /*use a constant in a runtime context*/
    let b = 23
    let h = ()
        side_effect()
        ()
            assert(integer_equals(b, 23))
    h()()
    
    /*capture an argument*/
    let f6 = (a: boolean)
        ()
            () a
    assert(f6(boolean.true)()())
    
    /*capture multiple variables*/
    let helper = struct
        a: std.string
        b: std.string
    let x = 2
    let y = "2"
    let t = ()
        let u = ()
            helper{integer_to_string(x), y}
        string_equals(u().a, u().b)
    assert(t())
    