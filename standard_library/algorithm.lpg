let arrays = import array
let array = arrays.array
let integers = import integer
let integer = integers.integer
let std = import std
let equality = import equality
let ranges = import ranges

let enumerate = [H](first: integer, last: integer, on_element: H): std.unit
    let i = std.make_mutable[integer](first)
    loop
        on_element(i.load())
        match integer_equals(i.load(), last)
            case boolean.true:
                break
            case boolean.false:
                std.unit_value
        match add(i.load(), 1)
            case add_result.ok(let next):
                i.store(next)
            case add_result.overflow:
                fail()

let any_of = [E, P](elements: ranges.random_access[E], test_element: P): boolean
    match subtract(elements.size(), 1)
        case subtract_result.ok(let last):
            let found = std.make_mutable[boolean](boolean.false)
            let on_element = (index: integer): std.unit
                match elements.load(index)
                    case std.option[E].some(let element):
                        match test_element(element)
                            case boolean.true:
                                found.store(boolean.true)
                            case boolean.false:
                                std.unit_value
                    case std.option[E].none:
                        fail()
            enumerate[type_of(on_element)](0, last, on_element)
            found.load()
        case subtract_result.underflow:
            boolean.false

let find = [E](haystack: ranges.random_access[E], needle: E): std.option[integer]
    let i = std.make_mutable[integer](0)
    loop
        match haystack.load(i.load())
            case std.option[E].some(let element):
                match equality.equals[E](element, needle)
                    case boolean.true:
                        return std.option[integer].some(i.load())
                    case boolean.false:
                        match add(i.load(), 1)
                            case add_result.ok(let next):
                                i.store(next)
                            case add_result.overflow:
                                return std.option[integer].none
            case std.option[E].none:
                break
    std.option[integer].none

let export = struct
    enumerate: type_of(enumerate)
    any_of: type_of(any_of)
    find: type_of(find)
export{enumerate, any_of, find}
