let arrays = import array
let array = arrays.array
let integers = import integer
let integer = integers.integer
let std = import std

let enumerate = [H](first: integer, last: integer, on_element: H): std.unit
    let i = std.make-mutable[integer](first)
    loop
        on_element(i.load())
        match integer-equals(i.load(), last)
            case boolean.true:
                break
            case boolean.false:
                std.unit_value
        match add(i.load(), 1)
            case std.option[integer].some(let next):
                i.store(next)
            case std.option[integer].none:
                fail()

let any_of = [E, P](elements: array[E], test_element: P): boolean
    match subtract(elements.size(), 1)
        case std.option[integer].some(let last):
            let found = std.make-mutable[boolean](boolean.false)
            let on_element = (index: integer): std.unit
                match elements.load(index)
                    case std.option[E].some(let element):
                        match test_element(element)
                            case boolean.true:
                                found.store(boolean.true)
                            case boolean.false:
                                std.unit_value
                    case std.option[E].none:
                        fail()
            enumerate[type-of(on_element)](0, last, on_element)
            found.load()
        case std.option[integer].none:
            boolean.false

let export = struct
    enumerate: type-of(enumerate)
    any_of: type-of(any_of)
export{enumerate, any_of}
