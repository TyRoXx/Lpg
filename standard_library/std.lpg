let boolean = enum
    false
    true
let and = (left: boolean, right: boolean)
    match left
        case boolean.true:
            match right
                case boolean.true: boolean.true
                case boolean.false: boolean.false
        case boolean.false: boolean.false

let or = (left: boolean, right: boolean)
    match left
        case boolean.true: boolean.true
        case boolean.false: right

let not = (input: boolean)
    match input
        case boolean.true: boolean.false
        case boolean.false: boolean.true

let option = enum[T]
    none
    some(T)

let type = type-of(type-of(0))
let string-ref = type-of("")
let unit_value = ()
()
let unit = type-of(unit_value)
let export = struct
    and: type-of(and)
    or: type-of(or)
    type: type
    string-ref: type
    boolean: type
    unit: type
    unit_value: unit
    option: type-of(option)
export{and, or, type, string-ref, boolean, unit, unit_value, option}