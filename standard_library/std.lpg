let arrays = import array
let array = arrays.array
let options = import option
let option = options.option

let and = (left: boolean, right: boolean)
    match left
        case boolean.true:
            match right
                case boolean.true: boolean.true
                case boolean.false: boolean.false
        case boolean.false: boolean.false

let or = (left: boolean, right: boolean)
    match left
        case boolean.true: boolean.true
        case boolean.false: right

let not = (input: boolean)
    match input
        case boolean.true: boolean.false
        case boolean.false: boolean.true

let type = type_of(type_of(0))
let string = type_of("")
let make_unit_value = ()
let unit_value = make_unit_value()
let unit = type_of(unit_value)

let any-integer = int(0, 340282366920938463463374607431768211455)

let mutable = interface[T]
    load(): T
    store(value: T): unit

let mutable_content = struct[T]
    content: array[T]

impl[T] mutable[T] for mutable_content[T]
    load(): T
        match self.content.load(0)
            case option[T].some(let value):
                value
            case option[T].none:
                fail()
    store(value: T): unit
        assert(self.content.store(0, value))

let make_mutable = [T](value: T): mutable[T]
    let content = new-array(T)
    assert(content.append(value))
    assert(integer_equals(1, content.size()))
    mutable_content[T]{content}

let runtime-value = [T](value: T): T
    side-effect()
    value

let compile_time = [T]()
    T

let export = struct
    and: type_of(and)
    or: type_of(or)
    not: type_of(not)
    type: type
    string: type
    boolean: type
    unit: type
    unit_value: unit
    option: type_of(option)
    array: type_of(array)
    mutable: type_of(mutable)
    make_mutable: type_of(make_mutable)
    runtime-value: type_of(runtime-value)
    compile_time: type_of(compile_time)
export{and, or, not, type, string, boolean, unit, unit_value, option, array, mutable, make_mutable, runtime-value, compile_time}
