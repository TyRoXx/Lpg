let std = import std
let algorithm = import algorithm
let equality = import equality
let integers = import integer
let integer = integers.integer

let set = interface[T]
    contains(key: T): std.boolean
    remove(key: T): std.boolean
    add(key: T): std.boolean
    clear(): std.unit

let linear_set = struct[T]
    elements: std.array[T]

let array_back = [T](elements: std.array[T]): std.option[T]
    match subtract(elements.size(), 1)
        case subtract_result.ok(let index):
            match elements.load(index)
                case std.option[T].some(let back):
                    std.option[T].some(back)
                case std.option[T].none:
                    std.option[T].none
        case subtract_result.underflow:
            std.option[T].none

impl[T] set[T] for linear_set[T]
    contains(key: T): std.boolean
        let test_element = (element: T): std.boolean
            equality.equals[T](element, key)
        algorithm.any_of[T, type_of(test_element)](self.elements, test_element)
    remove(key: T): std.boolean
        match algorithm.find[T](self.elements, key)
            case std.option[integer].some(let found_at):
                match array_back[T](self.elements)
                    case std.option[T].some(let back):
                        assert(self.elements.store(found_at, back))
                    case std.option[T].none:
                        fail()
                assert(self.elements.pop(1))
                std.boolean.true
            case std.option[integer].none:
                std.boolean.false
    add(key: T): std.boolean
        let reader : set[T] = self
        match reader.contains(key)
            case std.boolean.true:
                std.boolean.false
            case std.boolean.false:
                assert(self.elements.append(key))
                std.boolean.true
    clear(): std.unit
        self.elements.clear()

let make_linear_set = [T](): set[T]
    //TODO: remove side_effect(). It's here because there is a bug in the C backend.
    side_effect()

    let content = linear_set[T]{new_array(T)}
    content

let export = struct
    set: type_of(set)
    make_linear_set: type_of(make_linear_set)
export{set, make_linear_set}
