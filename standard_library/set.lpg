let std = import std

let set = interface[T]
    contains(key: T): std.boolean
    remove(key: T): std.boolean
    add(key: T): std.boolean
    clear(): std.unit

let linear-set = struct[T]
    elements: std.array[T]

impl[T] set[T] for linear-set[T]
    contains(key: T): std.boolean
        //TODO
    remove(key: T): std.boolean
        //TODO
    add(key: T): std.boolean
        let reader : set[T] = self
        match reader.contains(key)
            case std.boolean.true:
                std.boolean.false
            case std.boolean.false:
                assert(self.elements.push(key))
                std.boolean.true
    clear(): std.unit
        self.elements.clear()

let make-linear-set = [T](): set[T]
    let content = linear-set[T]{new-array(T)}
    content

let export = struct
    set: type-of(set)
    make-linear-set: type-of(make-linear-set)
export{set, make-linear-set}
