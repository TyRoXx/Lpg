language: c
os:
 - linux
 - osx
sudo: false
notifications:
 email:
  on_success: change # [always|never|change] # default: change
  on_failure: always # [always|never|change] # default: always

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.8
    packages:
    - gcc-5
    - gcc-6
    - gcc-7
    - clang-3.8
    - valgrind

env:
 - MYCC=gcc-5     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=gcc-6     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=gcc-7     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=gcc-5     BUILD_TYPE=Debug          COVERAGE=YES UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=ON  MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=ON  ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=clang     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
 - MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=ON  THREAD_SANITIZER=OFF
 - MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=ON

matrix:
  exclude:
    - os: osx
      env: MYCC=gcc-5     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=gcc-6     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=gcc-7     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=gcc-5     BUILD_TYPE=Debug          COVERAGE=YES UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=ON  MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=ON  ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=ON  THREAD_SANITIZER=OFF
    - os: osx
      env: MYCC=clang-3.8 BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=ON
    - os: linux
      env: MYCC=clang     BUILD_TYPE=RelWithDebInfo COVERAGE=NO  UB_SANITIZER=OFF MEMORY_SANITIZER=OFF ADDRESS_SANITIZER=OFF THREAD_SANITIZER=OFF

script:
 - $MYCC --version
 - cmake --version
 - mkdir build
 - cd build
 - CC=$MYCC cmake .. -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DLPG_WITH_CLANG_FORMAT=OFF -DLPG_WITH_GCOV=$COVERAGE -DLPG_WITH_UB_SANITIZER=$UB_SANITIZER -DLPG_WITH_MEMORY_SANITIZER=$MEMORY_SANITIZER -DLPG_WITH_ADDRESS_SANITIZER=$ADDRESS_SANITIZER -DLPG_WITH_THREAD_SANITIZER=$THREAD_SANITIZER || exit 1
 - echo "Building the project travis_fold:start:cmake"
 - cmake -LA . || exit 1
 - cmake --build . -- -j2 || exit 1
 - echo "travis_fold:end:cmake"
 - export UBSAN_OPTIONS=print_stacktrace=1
 - export MSAN_OPTIONS=poison_in_dtor=1
 - export ASAN_OPTIONS=check_initialization_order=1
 - export LD_LIBRARY_PATH=.:/usr/lib/clang/3.8.0/lib/linux/
 - if [ "$TRAVIS_OS_NAME" == "osx" ] || [ "$UB_SANITIZER" == "ON" ] || [ "$MEMORY_SANITIZER" == "ON" ] || [ "$ADDRESS_SANITIZER" == "ON" ] || [ "$THREAD_SANITIZER" == "ON" ]; then
     tests/tests || exit 1;
     cli/lpg ../tests/in_lpg/interface.lpg || exit 1;
   else
     valgrind --error-exitcode=42 --leak-check=full ./tests/tests || exit 1;
     valgrind --error-exitcode=42 --leak-check=full ./cli/lpg ../tests/in_lpg/interface.lpg || exit 1;
   fi
 - LD_LIBRARY_PATH=.:/usr/lib/clang/3.8.0/lib/linux/ CTEST_OUTPUT_ON_FAILURE=1 ctest || exit 1
 - cd ..
 - if [ $COVERAGE == "YES" ]; then
     echo "Code coverage travis_fold:start:codecov";
     curl -s https://codecov.io/bash > codecov.sh || exit 1;
     chmod +x codecov.sh || exit 1;
     ls -l;
     ./codecov.sh -x gcov-5 || exit 1;
     echo "travis_fold:end:codecov";
   fi
 - echo "travis_fold:start:documentation"
 - python documentation/compile_documentation.py
 - cat -n documentation.lpg
 - build/cli/lpg documentation.lpg --compile-only|| exit 1;
 - echo "travis_fold:end:documentation"
