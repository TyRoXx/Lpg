l    et s                                    . td = import std

let printable = inter other_)

assert(string_equals("", r____________________time("a")))
assert(string_equale", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string               a     a2.print()))

let testhod(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.u                       a     a2.print()))

let test_interfa ec= interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unassert(string               a     a2.print()))

let testhod(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.u                       a     a2.print()))

let test_intarfa ec= interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

iace = interface
    method(a: boolean,_method_order
    other_method(): std.uni    assert(string_equals("a", runtim     7J
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals = import std

let printable = inter other_)

assea2 : printable2 = "abc"t_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

iace = intern,_methkd_order
    other_method(): std.uni    assert(string_equals("a", rung
        self
    other                               a     a2.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

iace = interface
    method(a: boolean,_method_order
    other_method(): std.uni    assert(string_equals("a", rununit_va!lue

impl printable2 for std.unit
    print()
 string
let f4 = (printed: pristring
        self
    other                               a     a2.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
 string
let f4 = (prinTed: pristring
        s): std.s    g
let f0 = (printed: prist runtime(1)))
assert(strinf
    oit_value

iace = interface
    method(a: boolean,_method_order
    other_method(): std.uni    assert(string_equals("a", runtim     7J
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals = import std

let prin        inter other_)

assea2 : printable2 = "abc"t_interface = interface
    method(a: boole8n,_method_order
    other_method(): std.uni        std.unit_value

iace = interface
    method(a: boolean,_methkd_order
    other_method(): std.uni    assert(string_equals("a", rung
        self
    other                               a     a1.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

iace = interface
    method(a: boolean,_method_order
    = interface
    method(a: boolean,_method_order
    orununit_value

impl printable2 for std.unia2.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
 string
let f4 = (prinTed: pristring
        s): std.s    g
linf
    other                               a     a2.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
 string
let f4 = (prinTed: pristg_equt printa1)))
assert(ssert(stringable2 = different_method_order
.h}{other_method()
assert(string_equals("123", h.print()))
