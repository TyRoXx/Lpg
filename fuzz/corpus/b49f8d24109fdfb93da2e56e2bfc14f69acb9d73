[	   boolean, type_of(fan), faport std

let single_p         = enum[T]
    a std.string)
    side_effect()
    concat("", arg)

let b = single_parameter[std.str  enumt std = import std
let option = std.option[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c:oolean           h return_statefuriable in a runt   _co(ntext*/
let f = ()
    side_effec ()
    23
let c = f()
let g = ()
    ()
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
load(1)
    case std.option[slet b = 23
let h = ()
    side_effect()
    ()
  ean
              ture = struct
    x: std.string
    y: boolean
let multi = enum
    a(sin    helper{T, U, V}
let tuple = f[std.boolean]()[246]()["test"]()
asserassert(integer_equals(123, tuple.u))
assert(string_equals("test", tupgle)
 rt(not(type_equah (make_enum[0]()[std.unilean)
    e
    f
assert(match multi.b(stle.v))

//Generic typesnoo!!!
