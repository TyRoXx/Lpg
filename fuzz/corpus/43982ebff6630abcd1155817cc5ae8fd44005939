l yt mpe = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
as   case bistate.b: boolean.false
)
assert(matclse
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.false
istate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeese bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeristate = enum
    a
      case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.c)
.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: booleanue
)

let tristate = enum
    a
      case tristate.c: boolean.false
istate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeee.fals{e
)
assert(match pass_tristate(tristate.c)
    case tristate.a: boolean.false
    case tristate.b: boolean.false
    case tristate.c: boolean.true
)
