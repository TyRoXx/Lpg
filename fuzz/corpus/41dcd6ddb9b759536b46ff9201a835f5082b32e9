let sdt = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())                                               

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_reticit(boolean.true)))

let return_runtime_string = (arg: std.string)
    side_effect()
    return conrue
let return_interface = (arg: std.string): test_interface
    side_effect()
    return arg
assert(!!!!!!return_interface("abc").m())
