l      }? import std
let std_again = import std
let e : std.boolng_equals("test", p.loatd.option[std.unit].none:
        std.boolean.false
)

let u = std.make_mutable[std.unit](std.unit_value)
u.store(u.load())

let d = std.make_muttd.unit))
assert(integer_equals(1, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
asse777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777rt(nofl.t(oad().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_motable[type_of(interface[T])](interface[T]teger_equals(1, d.load().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().mt].some)
std.make_mutabl)e[type_of(struct[T])](struct[T])
std.make_mutable[type_of([])eme()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.td.type](std.boable[std.array[std.unit]](new_array(std.unit))
d.load().append(std.unit_value)
assert(integer_equals(0, d.load().size()))
d.store(new_array(std.unit))
assert(integerost_value) std.make_mutable[host_value      :.make_mutable[type_of(interface[T])](interface[T]teger_equals(1, d.load()ad)
std.make_mutable[type_of(f.load)](f.loafl.t(oad().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_mutable[type_of(interface[T])](interface[T]teger_equals(0, d.load()ad)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.   Zunit_value
std.make_ake_runtime_string("abc"mutable[type_of(lambda)]))))