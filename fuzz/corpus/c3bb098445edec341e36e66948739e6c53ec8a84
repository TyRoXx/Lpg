l a       = enum
let pass_empty = (arg: empt: monostate)
    arg
assert(match pass_mono        case bistate.b: boolean.false
)
assert(match pas.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      casd tristate.c: boolean.false
istate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.trUe
)

let tristate = enum
    a
      case tristate.c: boolean.false
)
assert(match pass_ate.b)
    casen.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      casd tristate.c: boolean.false
istate.a: boolean/true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.false
)
assert(match pass_ate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.fals(
istate.a: boolean.true
    case bistate.b: boolean.false
55555555555555555555555555555555555555)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: booistate.a: boole)  bistate.a: boolean.false
    case bistate.b: .false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      casd tristate.c: boolean.false
istate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.false
)
assert(match pass_ate.b)
    casen.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      casd tristate.c: boolean.false
istate.a: boolean/true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.false
)
assert(match pass_ate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: bo;olean.fals(
istate.a: boolean.true
    case bistate.b: boolean.false
55555555555555555555555555555555555555)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: booistate.a: boole)  bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
      case tristate.c: boolean.fals(
istate.a: boolean.true
    case bistate.b: boolean.false
55555555555555555555555555555555555555)
assert(match pass_bistate(bieeeeeeeeeeeeeeeeeeeeestate.b)
    case bistate.a: booistate.a: boole) Qrue
    case bistate.b: boolean.false
)
assert(match pasolean.ate(bieeeeee
)
assert(match pasolean.ate(bieeeeeeeeeeeee
