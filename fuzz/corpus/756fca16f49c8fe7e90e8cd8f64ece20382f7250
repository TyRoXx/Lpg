l   n] e, or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    asserthinteger_equals(1, or(0, 1)))
    asser!t({integer_(quals(1, or(1, 0)))
 `__ et max = 18446744073709551615
    assert(integer_equals(max, or(1, max)))
    assert(integer_equals(ma// test integer_to_string
// compil_tmiee evaluation:
assert(string_equals("0", integer_to_string(0)b(std.d.string]!= dummy{}
ass   produce 
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
  0 ansfo  W   
: stse std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.my
    transfo  W   
: std.boole(ma// test ir nteger_to_string
// compil_tmiee evaluation:
assert(string_equals("0", integer_to_string(0)b W   
: std.boolean): std.string
        match input
            case std.boolmer[std.boolean, std.string] for dummy
    transfo  W   
: stse std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce 
: smax)))
    assert(                                                          ee evaluation:
atring
       let std = importethod() match input
        "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool an.true
	let a : produproduce())

impl transformer std.boolean, std.;tring] for dummy
    transfo  W   
: stse std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce 
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool an.true
	let a : produproduce())

impl transformese std.boolean.false: "false"

let b : transfKormer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool an.true
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: stse std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool a

let printable(2 = interface
    prinn.true
	let a : prod                                      u()
        std.boot(): std.string
    other_metl an.true
	lehod(): std.unt   	  assae