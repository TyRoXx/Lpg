l   std = import std
                                                                        
let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let strie2 for int(1, 1)
    prhod()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
vsaalue
assert(string_equals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_interface
    std.unit_value
let let captures_impl = ()
    side_effect()
    ()
        assert(s        uals("test", compile_time_impl.method(boolean.true, boolean.false).print()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable1 for different_methoassert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl test_interface for std.unit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(string_equals(es_impl = ()
    side_effect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))
captures_impl()()

;et nested = interface
    m(): interface
        f(): boolean

lxet different_method_order = struct
impl printable2 for different_method_order
    ;ther_method(): std.u*it
        std.unit_value
    print(): std.string
        "123"
let h : prhntable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
