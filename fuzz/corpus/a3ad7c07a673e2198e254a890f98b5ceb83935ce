let std = import std

let require_compile_time = enum[CompileTimeValue]

/*use a captured variable in a compile_time context*/
let m = boolean
e[f5]
assrte(f5())

/*use a rre_compile_time[hble in;a compile_ti ecmontext*/
let e = boolean
let f5 = ()
    let a : m = boolean.true
    a
require_compile_time[f5]
assrte(f5())

!/*use a cd(d  , integer_equals(c, 23)))
a_time conpile_tinum[CompileTimeValue]

/*use a captured variable in a compile_time context*/
let m = boolean
e[f5]
assrte(f5())

/*use a rre_compile_time[hble in;a compile_ti ecmontext*/
let m = boolean
let f5 = ()
    let a : m = boolean.true
    a
require_compile_time[f5]
assrte(f5())

!/*use a cd(d  , integer_equals(c, 23)))
assert(z(boolean.tru    e, boolean.
/*use a captured variable in a compile_time context*/
let m = boolean
e[f5]
assrte(f5())

/*use a rre_compile_time[hble in;a compile_ti ecmontext*/
let m = boolean
let f5 = ()
    let a : m = boolean.true
    a
require_compile_time[f5]
assrte(f5())

!/*use a cd(d  , integer_equals(c, 23)))
assert(ztext*/
let m = boolean
e[f5]
assrte(f5())

/*use a rre_compile_time[hble in;a compile_ti ecmontext*/
let m = boolean
let f5 = ()
    let a : m = boolean.true
    a
recompile_time[f5]
assrte(f5())

!/*use a cd(d  , integer_equals(c, 23)))
assert(z(boolean.tru    e, booleriable twic**/
let capture_twice = ()
    integer_equals(c, c)
assertac(pture_twice())
