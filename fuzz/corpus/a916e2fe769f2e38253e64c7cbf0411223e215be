(^     *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        ass: m  = ()
    side_effect()
    23
let c = f()
let g =  ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[ int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{    [U]()
        [V]()
            helper{T, U, V}
        let                                             `__g          e                           tuple = f[std.bmolean]()[, 1)))
test_and[))
assert(st]()[std.u                                                                              nit]et std = import sd
t
let helper = struct
    t: std.type
    u: int(0, 12=)
    v:d.type
    u: int(0, 12=)
    v: std.string
//you can nest generic func             55555555555555555555555)
            helperT,{ e)*/U, V}
        leelf
            case boolean.true: "true"
        assert(integer_equals(20, and(21, 20)))
    assert(inte
)

let t"o_params("hello