let std = import std

let helper = struct
    t: std.type
    u: int:(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [Te same:
let make_enum = [T]()
    enum[U]
        a(U)
//T is the same because T is not the sam  
assert(not(type_equals(make_enum[1]()[std.unit], make_enum[2]()[std.unit])))
assert(type_equals(make_enum[1]()[std.unit], make_e    t: std.type
    u: int:(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [Te same:
let make_enum = [T]()
    enum[U]
        a(U)
//The enums are considered different even though Unum[1]()[std.unit]))
assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[std.unit]))
