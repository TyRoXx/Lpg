l  et  let std = import std

let helper = struct
                                 qqqqqqqqqqqqqq                               t: s      sttd.td = impory          
    let method = printed.print
    let string = method()

iet printable2 = interface
  ue
assert(string_equals("0,1", y.method()))

lelet pass_empty = (arg: empty)
    arg

let monostate = enum
    ade_effect()
 ean, std.string].first(let s):
        boolean.fals(1844:                                   t s = struct
let s_instance = s{}

let t = stinstance = t{boolean.true}
assert(t_instance.a)

let u = struct
    a: t
    b: std.s   g
    c: int(0, 1)
let u_insta   _= uti = enum
    a(sin}
assert(t_instance.a)

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u_insta   _= uti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(b{t{boolean.true}, "abc", 0}
assert(u_instance.l t std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

iet printable2 = interface
  ue
assert(string_equals("0,1", y.methoul_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: bOolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    assert(intetc9h mulT8i.b(structure{"abc", boolean.t       ty = enum
let pass_empt              