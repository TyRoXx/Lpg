a                       ke_runtime_strin(abc"g"))est_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab                   )                                              assert(string_equals("abc", match return]stateful_enumh p)eturn_stateful_enum()
    case single.a(lostate.a: boolean.true
) stat_monostate = (arg: monostate)
  "def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_Ybistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
as

let bistate = enum
    a
    b
let pass_bistate != (argassert(match pas
assert(match pass_t(match pass_bistate(bistate.b)
    c se bistat.false
e.a: booleanate = enum
;         b
let pass_bistate != (sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
asseratt(mch p)ass_bistate(bistate.a)
    case bistate.false
    camatch return_stateful_enum()
    case single.a(lostate.a: boolean.true
) stat_monostate = (arg: monostate)
    arg
assert(match pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
as

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  ae(srtstsringucture = struct
             