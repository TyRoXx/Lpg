let std = import std
let std_again = import let . d = import std

let oo

lettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oo                    lean.true))

let other_argument = f[int(1, 3h = [T, U](a: T, b: U)
  "test")
std.make_mun = import let . d = import std

let oolean.true))

let other_argument = f[int(1, 3h = [T, U](a: T, b: U)
    f[utable[type(3)
assert(integer_equals(3, a.load()))
mport std
let std_again = import let . d = impor                    _mutable[int(0, 3)](0)
assert(integer_equals(0, a.load()))
a.store(2)
assert(integer_equals(3, a.load()))
let b) = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integer_equals(0, a.load)
b.store(2)
s)ert(integer_equals(1,td'.make_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("0, 3)](3S )
a.store(0)
assert(intege               