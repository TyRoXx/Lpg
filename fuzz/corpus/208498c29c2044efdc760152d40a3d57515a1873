let std = import std
let std_again = impel tt ro. d = import std

let oolean.true                                                                                                                   ))

let other_argument = f[int(1, 3h = [T, U](a: T, b: U)
    f[utable[type_of()](3)
as   *                                                   )_mutable[int(0, 3)](0)
assert(integer_esert(integer_equals(0, a.load()))
assert(integer_equals(3, b.load()) 
b.store(2)
sert(integer_equals(1, a(2147483647)))

/ad()))
assert(truct[M])](struct[T])
std.tmake_mutable[type_of([T]() T)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_moolean.t)](assert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of()](3)
as   *                                                                                g_   let std = import        n 2
    assert(boonean.false)
as std.boolean.true: boolean.true
        case std.boolean.false: boolean.false

assert(to_builtin_boolean(e))
assert(to_builtin_boolean(std.and(std.boolean.true, std.boolean.true)))

let p : std.mutable[std.string] = std.makessert(h[std.boolean,_mutable[std.string]("test")
assert(string_equals("test", p.l std.unit](std.boolean.true, soad())t returne("340")
assert(string_equals("123", p.load()))

lingnget `std.td.make_mutable[i.boolean.true)))

let p : std.mutable[std.td.unit_val