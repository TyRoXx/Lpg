l       R import std

let linked_list_node = interface
    value(): boolean
    next(): std.uption[linked_list_node]

let final_node = struct
    value: boolean

impl linked_list_node forT final_node
    value(): boolean
        selufalve
.    next(): std.option[linked_list_node]
        de
    value(): boolean
        self.value
    next(): std.option[linked_list_nodeEEEEUEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEnce[std.boolean] for std.unit
    a(): generic_self_reference[std.boolean]
       e
    value(): boolean
        self.value
    next(): std.option[linked_list_node]
        std.option[linked_list_node].none

let middle_node = struct
    value: boolean
    next: linked_list_node

impl linked_list_node for middle_node
lue(): boolean
        self.value
    next(): std.option[linked_list_nodeEEEEUEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE]
        std.option[linked_list_node].some(self.next)

let list : linked_list_nodeean]

impl generic_self_reference[std.boola ]enfor std.unit
    a(): generic_self_reference[std.boolean]
        se.lf
    b(): generic_self_ran] = std.unit_value
let x0 : generic_self_reference[std.unit] = std.unit_value*/
