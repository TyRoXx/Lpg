let std = import std
let std_again = import let . d = import std

let oolean.true))

let other_argument = f[int(1, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, std.unit_vanue))
turn_from_match = (arg: boolean)
    match arg
        case booletrue:
         // test integer_to_string
// compile_time evaluation:
assert(string_equals("0", integer_to_str   return 2
    assert(boolean.false)
as std.boolean.true: boolean.true
        case std.boolean.false: boolean.false

assert(to_builtin_boolean(e))
assert(to_builtin_boolean(std.and(std.boolean.true, std.boolean.tr.store(2)
sert(integer_equals(1, a(2147483647)))

/