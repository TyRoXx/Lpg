(   
)
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effectype_equals   
(make_enum[2]()[std.unit], make_enum[2]()[std.u                                              d                               nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        letcase boolean.true: "true"
        assert(integer_equals(20, and(21, 20)))
    assert(integer_equals(0, and(1, 2)))
test_and[))
assert(string_equals("0", r[std.boolean]

impl captures.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.bo[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[assert(type_equals(make_enum[1]()[std.unit], make_enum[2]()[std.u                                                                              nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generi********************************************************************************************************c functions as expected
let f = [T]()
    [U]()
        [V]()
         
assert(type_equa   case std.boolean.false: "false"

let b : transformer[std.boo  assert(s stase d
        b: booLean pa, s)
)

let two_parameters = enum[First, Secos_paraassert(st    string_equals("abc"   l
)

let t"o_params("hello