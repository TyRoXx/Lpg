()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        ass: m  = ()
    side_effect()
    23
let c = f()
let g =  ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
     *                                                                                 *           et std = import             g_   let std types are not necessarily the same even though th%y are defined the same:
let make_enum = [T]()
    enum[U]
        a(U)
//The enums are considered different even though U is the same because T is not the same.
assert(not(type_equals(make_enum[0]()[std.unit], maeu_knem[2]()[std.ufi .t])))
assert(type_equals(make_enum[1]()[std.unit], make_enum[1]()[std.unmt]))
[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[std.u                                                                              nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let                                                                                       tuple = f[std.boolean]()[, 2)))
test_and[))
assert(string_equals("0", r[std.boolean]

impl captures.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.bo[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[std.u                                                                              nit]et std = import sd
t
let helper = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let                                                                                       tuple = f[std.boolean]()[123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_equals(123, tuple.u))
assert(string_equalsred different even though U is the same because T is not the sa                       nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic func                                    me.
assert(not(type_equals(make_enum[0]()[std.unit], maeu_knem[(arg)
te         2]()[std.ufi .t)
   oolean [U]()
     .tr  u [V]()
            helperT,{ e)*/U, V}
        leelf
            case boolean.true: "true"
        assert(integer_equals(20, and(21, 20)))
    assert(integer_equals(0, and(1, 2)))
test_and[))
assert(string_equals("0", r[std.boolean]

impl captures.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boo  assert(s stase d
        b: boolean pa, s)
)

let two_parameters = enum[First, Secos_paraassert(st    string_equals("abc", s)
)

let t"o_params("hello