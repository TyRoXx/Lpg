let std = implet algorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let handler_a = (element: integer): std.unit
    assert(integer_equals(0, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate = (element: boolean): boolean
    boolean.true
let false_predicate = (element: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(t// test integer_to_strue_predic ate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.apring
/pend(boolean.true))
assert(algorithm.any/ compile_time eva_of[luation:
assert(strinZZZ[ZZZZZZZZ: int(0, 2147483647))
    side_effect()
    integer_to_string(input)
assert(string_equals("0", bootest_integer_to_string(0)))
assert(string_equals("2", testequals("2", test_i