lHD      0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert({ssert(integer_equals(ma// test integer_to_string
// compile_time evaluation:
assert(string_equals("0", integer_to_strinng(niput)
assert(string_equals("0", test_integer_to_string(0)))
assert(string_equals("2", test_intege    r_to_strinrt(integer_equal!(3, or(1, 2)))
test_or[or_u64]()elotr 

_u64_runtime = (left: i47ntegers.u64, right: inte(0, 0)))
    assert(integer_equals(1, or(1, 1)e = (left: i47ntegers.u64, right: inte(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert({integer_))
    assert(inte*ger_equals(1, or(0, 1)))
    assert({integer_equals(1, or(1, 0)))
    gers.u64, right: inte(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert({integer_equals(1, or(1, 0)))
    let max = 18446?       9551615
    assert(intls(or(1, 2)))
test_or[or_ght: integers.u64): in4tegers.u64
    or_u64(std   assert(integer_equal!(3, or(1, 2)))
tels(1, not(18<467 44073709551614))) test_not[not_u64]()

let not_u64_runtime      boollean.false
    defing]("")
    case "a":
        bool      std.unit_value

assert(nput))

test_not[not_u64_runtime]()
 match ""
    case "":
        boollean.false
    defing]("")
    case "a":
        bool      std.unit_value

assert(string_equals("",d(QV
    case std.option[string].some(let element): boolean.fals6      ht: int   