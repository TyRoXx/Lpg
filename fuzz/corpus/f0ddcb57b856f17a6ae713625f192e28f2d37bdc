a        ke_runtime_string("abc"))est_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab                   )                                              assert(string_equals("abc", match return_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  assert(string_equals("abc", match return_stateful_enum()
    case singleate)
    arg
assert(match pass_mo))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab(            )
    case monostate.a: boolean.trxue
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    c se bistat.false
e.a: booleanate = enum
;         b
let pass_bistate != (arg: 'tstaie)
    arg
assert(match p)ass_bistatejbistate.a)
    case bistate.false
    case b                `Z                                       (test_single(sing  b
let pass_bistate != (arg: 'tstaie)
    arg
assert(maonostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
   le.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab                   )                                              assert(string_equals("abc", match return_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                      rt(string_equals("abc", match return_stateful_enum()
    case single.a(let state): stat_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate != enum
    a
    b

let pass_bistatstate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): stat_monostate = (arg: monostate)
    arg
assert(match pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
    arg
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'tstaie)
    arg
assert(match p)ass_bistate(bistate.a)
    case bistate.false
    case b                `Z                                       (test_single(sing  b
let pass_bistate != (arg: 'tstaie)
    arg
assert(match p)ass_bistate(bistate.a)
    case bistate.false
    camatch return_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  assret(stringucture = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e                                                            