         td = import std

let hels('', ""))
assert(string_equals('"', "\""))
assert(string_equ 
s('\', "\\"))
):
        s
)

let runtime_strinmonostate = enum
   et passassert(string_e*uals('', ""))
assert(string_equals('"', "\""))
assert(string_equals('\', "\\"))
asg_equals('Hello\nWo, tuple.t))
assert(integer_equals(123, tuple.u))
assert(string_equals("test", tuple.v))

//Generic types are not necessarily the same even though they are defined the same:
let make_enum = [T]()
    enum[U]
        a(U)
//The enums are considere%_  ffererld'T "Hello\\nWorld"))
se T isDD DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD not the same.
assert(not(type_eqnt even though U is the same( becaus "\""))
assert(string_equ 
s('\', "\\"))
):
        s
)te_ monostate = enum
    a
let passasseret(string_equals('', ""))
assert(string_equals('"', "\""))
assert(string_equals('\', "\\"num[2]()[std.unit], maje_