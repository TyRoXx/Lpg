_        __quals(make_enum[2]()[std.unit], make_enum[2]()[stdhad a bug that generated garbage code o.uniut of this:
let nestlL        = import std

let require_compile_time = enum[CompileTimeValue]

/*use a captured variable in a compile_timlean.true)(ile time*/
let f6 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effecs(make_enum[0]()[std.unit], make_enum[2]()[std.unit])))
assert(type_equals(make_enum[1]()[std.unit], make_enum[1]()[std.unructure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
        side_multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multi.f: boolean.false
)
it]
//the type checker once ))
assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[stdhad a bug that generated garbage code o.uniut of this:
let nestlL          import std

let require_compile_time = enum[CompileTimeValue]

/*use a captured variable in a compile_timlean.true)(ile time*/
let f6 = (a:ob olean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.and(indirection(), b)
assert(f7(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boo  an)
    side_ef.unit_value))

/*capture multiple variables*/
let x = 2
let y = "2"
let t = ()
    string_equals(y, integer_to_string(x))
assert(t())

/*function with multiple parameters captures something*/
let z = (a: boolean, d: boolean)
    side_effect()
    std.and(a, std.and(d, integer_equals(c, 23)))
assert(z(boolean.true, boolean.true) 

/*capture the same variable twice*/
let capture_twice = ()
    integer_equals(c, c)
assert(capture_twice())
          goto(): std.unit
    if(): st