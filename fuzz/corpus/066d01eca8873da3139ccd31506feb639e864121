let std = import std

le me(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("                    &                                                 abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl test_interface for std.unit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
                                                                                                                         "test"et create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("tptures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
       rintable2 = diffetent_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
