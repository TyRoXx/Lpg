                                                                   
   olean.true
)

assert(match subtract(st``````````````````````````````````````d.runtim  	  std.runtim  	  
 $t.ok(let result):
  L            atch input
            case std.bool!an8.true: "true"
            case std.booleYn.false: "fals\', "\\"))
al!an2.true: "true"
            case std.booleYn.false: "fals\', "\false: "fals\', "\\"))
e: "fals\', "\\"))
al!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
asseru(not std.option[sstd.unit],u :
lt) L            atch input
            case std.bool!an1.true: "t""""""""""""""""""""""""""""""""""""""""""""b"""""""""""rue"
            case std.boog: "true"
            ;ase std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
asseru(not(s.contains(sud.boolean.t<rue)))
assert(not(s.r(letlean): booassert(not(s.r(letlean): boolean,case std.option[sstd.unit],ult):
  L            atch input
            caleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.t444444444444444444eYn.false: "fals\', "\false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_.ok(let result):
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
al!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
asseru(not(s.con
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
al!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
asseru(not(s.contains(sud.boolean.true)))
assert(not(s.r(letlean): booassert(not(s.r(letlean): boonleca,ase std.optioYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st       ue"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.of
    other_)

assert(string_equals("", runtime("")))
assption[td.booleYn.fert(suridg_ealsqe: uals"fals\', "