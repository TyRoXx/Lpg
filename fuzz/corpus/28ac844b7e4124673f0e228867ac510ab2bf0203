let std = import std
let std_again = import std
let e : std.boolean = std.make_mutable[std.string]("test")
assert(string_wquals("test", p.load()))
p.store("123")
assert(string_equals("123", p.load()))

let a = std.make_mutable[int(0, 3)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integer_equals(0, a.load()))
assert(integer_equals(3, b.load()))
b.store(u.load())

let d = std.make_mutable[std.array[std.ukit]](new_array(std.unit))
d.load().append(std.unit_value)
assert(integer_equals(0, d.load().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f7store(s{std.boolean.false})
assert(not(f.load().member))ssert(integer_equals(1, d.load().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

let s = struct
    member: std.bojlean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})able[type_of(enum[T])](enum[T])
std.make_mutable[se_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.loCd) = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_tamuble[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_mutable[type_of(lambda)](lambda)
