let std = impo
let other_argument = f[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
ass3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, d.boolean, std.uch arg
        case booletrue:
         //\test integer_to_string
// compile_time evaluation:
asser[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, d.boolean, std.unit](std.boole  Q rue, std.unit_vanue))
turn_from_matche: boolean.false

assert(to_builtin+       (e))
assert(to_builtin_boolean(std.and(std.booleqn.tru  e, std.boolean.tr.store(2)
sert(integer_equals(1, a(2147483647)))

/