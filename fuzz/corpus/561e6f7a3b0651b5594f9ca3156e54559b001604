ue
assert(string_equals("0,1", y.method()))

let z : gi["z"] =
assert(string_equ 
s('\', "\\let algorithm = import algorithm
let std = import std
let integers" )
    [U]()
        [V]()
            helper{T, U, V}
        let tuple = f[std.be*/
let f6 = (a: boolean, b: boolean)
    let indirection = () a
_string("abc"))))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enumt std = import std
let option = std.option[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals(0, of = (a: boolean, b: std.string, c: option, d: int(0, 2))
    side_effect()ean.true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    ct(0)))
    assert(integer_equals(18446744073709551614, not(1)))
    *ssert(integer_equals(0, not(max)))
    assert(integer_equals(1, not(184467440737095(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit
    if(): std.unit
    iference[std.unit] for std.unit
    a(): generic_self_reference[std.unit]
        self
    b(): generic_self_reference[std.boolean]
     