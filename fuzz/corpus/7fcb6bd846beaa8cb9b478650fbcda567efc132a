l x std = import std

let printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.uni = "abc"
assert(string_equals("                    &                                                 a     a2.print()))

let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
 string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals("", runtime("")))
assert(string_equals("a",rt(string_equals("unitYS_
  me(std.unit_value)))
assept(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals(""  other_)

assert(string_equals("", runtime("")))
assert(string_equals("a",rt(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(stri("123", h.print()))
