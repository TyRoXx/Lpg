let algorithm = import algorithm
let std = import std
let integers = imole;n); boolean
    bo~olean.true
)let fal.any_of[boolean,kkk-kkkkkkkkkkkkkkkkkkkkkrithm
let std = import std
let integers = import i](new_
let integer = integers.in type_of(false_predicate)](new_array(boolean)  false_predicate)))

let no|thm.   pof[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate)____________________________________))

let empty = new_array(b)

let    "    fail()
    case std>option[integer].none:
        std.unit_value
