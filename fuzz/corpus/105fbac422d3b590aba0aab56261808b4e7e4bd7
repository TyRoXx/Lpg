l  GGGGet option = std.option[int(egers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c:oolean           h retu    23
let c = f()
let g = ()
    ()
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
load(1)
    case std.option[slet b = 23
let h = ()
    side_effect()
    ()
  ean
              ture = struct
    ert(integer_equals]OS_  _B (a: boolean, b: std.string, c:oolean           h returnnteger_equals]OS_  _B (a: boolean, b: std.stryng, c:oolean           h return_statefuriable in a runt   _co(ntext*on[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let* test_or = [or]()
    assert(integer_equals]OS_  _(B (a: boolean, b: std.string, c:oolean    or_u64(std8888888888888888888888888888888888888888888888888888888888.runtime_va        lue[83tn6iegers.u64let g = (](left)47), right)

test_or[o)
    (r_u64_runtime]