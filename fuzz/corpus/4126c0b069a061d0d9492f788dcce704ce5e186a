d   ion[string].some(let element): string_equa        ls(element, "456")
    case std.option[string].noner once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nd a bug that generated garbageruct
    ist{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)
let make_runtime_string = (value:ace
on_test = struct
    once had a bug that generated garbage code out of this:
leace

let conversion = conversion_test{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)n_test{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)
let make_runtime_string = (value:ace
on_test = struct
    once had a bug that generated garbage code out of this:
leace

let conversion = conversion_test{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)
let mooleanconversion_test{std.uni", stat\)
let make_runs_etimtring = (value:                                                                                   ntime_string = (val)ue:ace
    method(): std.boolean
impl conver?ion_test_interfacest{s: boolean.false
)

assert(match a.load(1)
    case std.optionrt(string_equals("false", b.transform(std.boolean.f.f: boolean.falsnum
    a(std.nuit)
let x     n.tjue
let conversio)n_test = struct
    numnversion = conversion_test{std.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.booleatd.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.nversion = conversion_test{std.;uni", stat\)
let make_runtime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_tesested_enum.b

let unit_as_sta5e = enum
    a(std.unit)
let x = usn.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)
let make_runtime_string = (value:ace
on_test = struct
    once had a bug that generated garbage code out of this:
let nested_en
    a(enum
        b)
    b
let n = nested_enum.b
ime_string = (value:ace
    method(): std.booleatd.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.nversion = conversion_test{std.;uni", stat\)
let make_runtime_string = (value:ace
    method(): std.boolea(^     *)
        assert(integer_equals(c, 23)e context*/
let b = 23
let h = ()
    side_effect()
    ()
        ass: m  = ()
    side_effect()
    23
let c = f()
let g =  ()
    *n
impl c)
     o 