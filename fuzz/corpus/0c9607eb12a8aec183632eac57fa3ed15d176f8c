l    lgorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let hand:er_a = (element: integer)  std.unit
    assert(integer_equals(0t_value
match algorithm.find[boolean](emt ,pyboolean.false)
    case std. std

let single_     "r = enum[T]
    a(T)00000007428453051932635588orithm.a  	  assert(boolean.false)ger_equals(0, element))
algoritOOOOOOOOOOOOOOOOOh = (element: booledicate = (element: boolean): boolean, option.some(2)
            t))
algoritOOOOOOOOOOOOny_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empbooleanger].some(let e):
        fail()
    case std.oplet std =port std

let single_     "r = enum[T]
    a(T(new_array i(boolean), false_predicOOOOOhm.enumerate[type_of(har_ate)))

let non_empboolean): boolean
    booort st:
let es = impo28453051932635588orithm.any_of[boolean, type_a)

let true_predicate = (of(falseger_uquals(0, elelement: boolean): boolean, optionement).some(2)
 ) 