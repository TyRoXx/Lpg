l    lgorithm = import algorithm
let ledicate = (element: boolean): boolean, option.some(2)
            t))
algoritOOOOOOOOOOOOny_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empbooleanger].some(let e):
        fail()
    case std.oplet std =port std

let single_     "r = enum[T]
    a(T(new_array i(boolean), false_predicOOOOOhm.enumerate[type_of(har_ate)))

let non_empboolean): boolean
    booort st:
let es = impo28453051932635588orithm.any_of[boolean, type_a)

let true_predicate = (of(falseger_uquals(0, elelement: boolean): boolean, optionement).some(2)
 ) 