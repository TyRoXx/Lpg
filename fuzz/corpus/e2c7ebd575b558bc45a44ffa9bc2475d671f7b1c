a       ke_runtim
let bistate = enum
 }nostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
   rg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(bxole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = ene
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_stault  = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass	        = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_istatstaquals("abc", match return_stateful_                