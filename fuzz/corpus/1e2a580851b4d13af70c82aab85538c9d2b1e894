let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
 (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
            case boolean.true: "true"
            cast(string_equals("unit", runt.unit_value))s("test", compile_time_impl.method(boolean.true, boolean.false).pri                                                      nt()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for dlue

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
           ()
assert(string_equals("123", h.print()))
