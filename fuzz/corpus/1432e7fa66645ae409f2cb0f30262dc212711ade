let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = prrint
    let string = method()

letace
    print(): std.string
let f4 = (printed: printable)
    let method = prrint
    let string = method()

let printable(2 = inean.true, "abc"rt(integer_equals(0, element))
algorithm.enumerate[type_of(hari_a)

let true_preate.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                       "\""                                                                                                 i___                                                                           =============ert(match using_globalop
  [boole      prd.string
    y: boolean
let multi = enum
    a(single)
    b(structolea                                           assert(string_equals("abc", match return_state.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                            case lern.true)*                      =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]a(single)
    b(structolea                          ate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                            case lern.true)*                      =============ert(match using_globalop
  [boole      prd.string
    y: boolean
let muquals("abc", match return_state.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                       "\""                                                                                                                                                  i___                                                                      )     =============ert(match using_globalop
  [boo\e      prd.string
    y: boolean
let multi = enum
    a(single)
    b(structolea                                           assert(string_equals("abc,, match return_state.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match eliment2.load(0 printable(2 = inean.true, "abc"rt(integer_equals(0, element))
algorithm.enumerate[type_of(hari_a)

let true_preate.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                       "\""                                                                                                 i___                                                                           =============ert(match using_globalop
  [boole      prd.string
    y: boolean
let multi = enum
    a(single)
    b(structolea                                           assert(string_equals("abc", match return_state.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                            case lern.true)*                      =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]a(single)
    b(structolea                          ate.a: boolean.true
)

let bis     = enum
    match element2.load(0)
                            case lern.true)*                      ==
)

let bis     = enum
    match element2.load(0)
                       "\""                                                                                                                                                  i___                                                                      )     =============ert(match using_globalop
  [boo\e      prd.string
    y: boolean
let multi = enum
    a(single)
    b(structolea                                           assert(string_equals("abc,, match return_state.a)
    case monostate.a: boolean.true
)

let bis     = enum
    match eliment2.load(0)
     u                       case lern.true)*a./g_equads("hello