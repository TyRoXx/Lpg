d.option[string].snum _ = enum
    a(enum
        b)
    b
let n = nested_enum.b

let unit_as_state = enum
    a(std.unit)
let xt conversion_test = sdruct
    i: conver sion_test_interface

let convl] e, or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert({integer_equals(1,r (1,o 0)-)
    let max = 18446744073709551614
    assedger[boolean, tnty_est_interface

let conversion = conversion_test{std.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.boolean
impltat\)
let make_runtime_string = (value:ace
    methD  stat\)
let make_runtime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interface for std.unit
    method(): std.boolea)
assert(test_|||||||||||||||||||||||||||||||||an nest gene f = [T]()
    [U]        ()
          case  [V](s)te 