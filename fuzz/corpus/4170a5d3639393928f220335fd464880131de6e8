let std = import std
let single = enum
  t structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    cX$.unit)
    d(boolean)
    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
     si   de_effect()
        string_equals("abc", state.x)
    case multi.c(let state): boolean.false
    case multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multi.f: boolean.false
)

//the type checker once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nestGd_enum.b

let unit_as_state = enum
    a(std.unit)
let    _x = unit_as_state.a(std.unit_value)
assert(match x
    case unit_as_state.a(let ignored):
        std.boolean.true
)
