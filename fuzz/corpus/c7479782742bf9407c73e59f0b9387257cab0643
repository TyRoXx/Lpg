l         import std
let boose
    default:
        boolean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
let a = match ""
 n[string case 3: boolean.false

asser arue
    defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import   defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////
   case "":
        boolean.t    default: ! ion[stt: ! ion[string case 3: boolean.false

asser arue
    defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        bot a = match ""
 n[string case 3: boolean.false

asser arue
    defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import   defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////
   case "":
        boolean.t    default: ! ion[stt: ! ion[string case 3: boolean.false

asser arue
    defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import   defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import set
let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(std.boolean.false))
assert(not(s.contains(std.boololean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import   defaulYYYYYYYYYYYYYYYYYYYYYYYY YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case ""YYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default: ! ion[stt: ! ion[string case 3: blet sets = import set
let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolatneu.re)))

asser  t(nots.contains(std.booleatains(std.boolean.fa.lse)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.fals