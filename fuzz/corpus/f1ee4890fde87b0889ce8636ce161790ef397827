l   s):
= import stod(): std.booleaerface
    me*thod(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true = strucr generic interface
let gi`B_ nterf    case boolean.false: "false"
 tring

impl[S] gi[S] for std.unit
    method(): stpl[S] gi[S] for std.unit
    method(): std.s     :Htring
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
lerface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ l[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.trxxxxxxxxxxxxue 
let z2 : i = g [int(0, 0)]{0}
assert(z2.method())

let u(1 : i = gs[int(0, 1)]{1}
  other_method()
        std.unit_vauel

impl printable2 for  oolean
    prod()))

// impl for generic self
let i = interface
t[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.trxxxxxxxxxxxxue 
let z2 : i = g [int(0, 0)]{0}
assert(z2.method())

let u(1 : i = gs[int(0, 1)]{1}
  other_method()
        std.unit_value

impl printable2 for  oolean
    prod()))

// impl for generic self
let i = interface
    method(): std.boolean

let L  [T]
    dummy: T

impl[T] i for gs[T]
    metestGd_enum.b

