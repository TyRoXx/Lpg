l    et std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 46
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*captur        e an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ()
        () a
assert(f6(boolean.true)()())

/*capture multiple variables*/
let helper = struct
    a: std.string
    b: std.                                                     )
        let a : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(intelet stger_equals(b, 24))
h()()

/*capture an argument*/
let f6 = (a: booleant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ()                                                          "                          string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime varia7Q       runt   _context*/
let f = ()
    side_effect()
  Q         23
let c = f()
let g = ()
    *)
        asse!t(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*capture am = boolean
let f5 = ()
    let f6 = ()
        let a : m  = ()
    sid             string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_ef!!!!!!!!!!!!!
    ()
        () a
assert(f6(boolean.true)()())

/*capture multiple variables*/
let helper = struc
    ()
        assert()
        let a : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in ert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let d = import std
let runtime_unit = ()
  effect()
    std.unit_value
lh = ()
    side_effect()
    ()
   et   