let std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    a: t
    b: std.string
    c: int(1, 1)
let u_instance = u{t{boolean.true}, "abc", 0}
asse1111111111111111111111111111111rt(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 2}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_test_interface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_tes!t{std.unit_value}
assert(conversion.i.method())
