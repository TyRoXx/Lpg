let std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for stduin.t
    method(): std
        S

impl gi[int(0, 0)] for snd.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assepppppppppppppppppprt(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["u"] = std.unit_value
asset(u2.method())
