let std = import std

let f = (): std.unit
    f()

let g = (): std.unit
    side_effect()
    let inner = ()
           case std.option[std.boolean].some(let element):
                    assert(to.append(element))
                    copy_array_boolean(from, to)
                case std.option[std.boolean].none:
                    fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array           d.boolean)
assert(original.append(std.boolean.true))
let into = new_array(std.boolean)
copy_array_boolean(wd      original, into)
assert(integer_equals(1, into                case std.option[std.boolean].none:
                    fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.booleopy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.boolean)
assert(original.append(std.boolean.true))
let into = new_array           std.unit_value
        cas!e std.boolean.false:
            match from.load(to.size())
                case std.option[T].some(let element):
                    assert(to.append(elemento)
assert(integer_equals(1, into.size()))
match into.load(0)
    case std.option[std.boolean].some(let value):
        asl oet std = i  t 
td
l''d
l'''''''sert(value)
    case std.option[std.boto.size())
                case std.option[T].some(let ele''''''''''' ''''''''''ment):
                    assert(to.app''''''''''''''''''''''en''''''''''''ed          d 