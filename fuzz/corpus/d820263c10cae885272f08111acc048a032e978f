l        import std

/*use a captured variable in a compiinteger_equals(c, 23     `__u
/*use a constant in a runtime context*/
let b = 23       
let h = ()
    side_effect()
    ()   ^     assert(integer_equals(b, 23))
;h()()

/*capture am = bet helper = struct
    a: std.string
    b: std.string
let x = 2
let y = "2"
letle.a(makele_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a : m  = ()
    side_nteger_equals(c, 23     `__u
/*use a constant in a runtime context*/
let b = 23       
let h = ()
    side_effect()integer_equals(b, 23))
h()()

/*ca23
let h = (
    side_effect()
    23
letSSSSSSSSSSSSSS c = f()
let g = ()
    *)
        assert(integer_equals(c, 23     `__u
/*use a constant in a runtime context*/
let b = 23       
let h = ()
    side_effect()
    ()   ^     assert(intege r_equals(b, 23))
h()()

/*capture am = bet helper = struct
    a  side_effect()
                                               23
letSSSSSSSSSSSSSS c = f()
let g = ()
    *)
        assert(integer_equals(c, 23     `__u
/*use a constant in a runtime context*/
let b = 23       
let h = ()
    side_effect()
    ()   ^     assert(integstruct
    a: std.string
    ant in a runtime context*/
let b = 23       
let h = ()
 r

/*ca23
let h = (
    side_essert(not(a.store(1, "")))
