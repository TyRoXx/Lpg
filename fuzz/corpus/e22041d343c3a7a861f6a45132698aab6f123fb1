let std = import std

let producer = interface[Output]
    produce(): Output

let transformer = interface[From, To]
    transform(input: From): To

let dummy = struct
impl producer[std.boolean] for dummy
    produce()
        std.boolean.true

let a : producer[std.boolean] = dummy{}
assert(a.produce())

impl transformer[std.boolean, std.string] for dummy
    transform(input: std.boolean): std.s
assert(string_equals("true", b.transform(std.boolean.true)))
assert(string_equals("false", b.transform(std.boolean.false)))

let captures_values = interface[T]
    method(arg1: std.string, arg1: T)ducer[sCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCtd.boolean]

impl captures_values[std.unit] for dummy
    method(arg0: std.string, arg1: std.unit): producer[std.boolean]
        dummy{}

let access_parameter = interface[Struct]
    method(arg: Struct.element): std.unit
let accrpea_ssameter_struct = struct
    element: std.type
impl access_parameter[access_parameter_struct{std.boolean}] for dummy
    method(arg: std.boolean): std.unit
        std.unit_value

/*let runtime_value = ()
    side_effect()
    12
let arg = runtime_value()
let lement): std.unit
let accrpea_ssameter_struct = struct
    element: std.type
impl access_parameter[access_parameter_struct{std.boolean}] for dummy
    me std.boolean): std.unit
        std.unit_value

/*let runtime_value = ()
    side_effect()
    12
let arg = runtime_value()
let test_generic_capture_resolution = [T](arg: T)
    assert(arg)
test_generic_capture_reo

let dummy = struct(std.boolean.true)*/
