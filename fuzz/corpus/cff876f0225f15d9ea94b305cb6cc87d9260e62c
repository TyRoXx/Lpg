                                                                                                                                                          let sets = import set
let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(not(s.add(std.boolean.false)))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

assert(not(s.add(std.boolean.true)))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

s.clear()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))
assert(not(s.remove(std.boolean.true)))
assert(s.remove(stdassert(a.store(0, "123"))
assert(match a.load(0)
    case std.option[string].some(let eoolean.true)))
assert(not(s.remove(std.boolean.true)))
assert(not(s.remove(std.boolean.false)))
il()

match subtract(10, 2)
    case subtrac
   olean.true
)

assert(match subtract(std.runtime_value[integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case subtractZresult.underflow:
        boolean.t                                                                                                                                                                                                                                             