mpl for generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["um
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(assert(integer_less(20, 100))
assert(not(integer_less(100, 20)))
assert(integer_less(0, 1))
assert(not(integer_less(1, 0)))
assert(not(integer_less(1, 1)))
assert(not(integer_less(0, 0)))
assert(not(integer_less(10000, 10000)))

let runtime_zero = ()
    side_effect()
    0
assert(integer_less(runtime_zero(), 1))
assert(not(integer_less(runtime_zero(), runtime_zero())))
assert(not(integer_less(1, runtime_zero())))
rue:
        boolean.true
)

//runtime evaluation
assert(match boolean.true
    case boolean.true:
        side_effect()
        boolean.true
    case boolean.false: boolean.false
)

assert(match boolean.true
    case boolean.false: boolean.false
    case boolean.true:
        side_effect()
        boolean.true
)
