l
         std = import std

let helper = struct
    t: st*.type
    u: int(0, even          helper{T, U, V}
        let e_equals(make_enum[0]()[std.unit], make_enum[1]                                                       ()[std.unmt]))
asstd.uni`__      tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["test"\(               :std.unmt]))
assert(type_equals(make_enum[2]()s[td.uni`______a                                tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["test"](               :(typle.u))
assert(.unmt]))
assert(type_equals(make_enum[2]()s[td.uni`__      tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["test"\(               :std.unmt]))
assert(type_equals(make_enum[2]()s[td.uni`______a                                tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["test"](               :(typle.u))
assert(string_equals("test",         nit]et std = import stdt],rt std

let helper = struct
    t: std.type
 unctions sa expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let e_equals(make_enum[1]()[std.unit], mak   tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["test"](       :(typle.u))
assert(string _equals                 ("test",         nit]et std = import stdt], )))
