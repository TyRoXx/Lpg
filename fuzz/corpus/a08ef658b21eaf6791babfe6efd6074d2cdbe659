a  ls("a:~      ch return_stateful_enum().unit)
    d(boolean)
    e
    f
assert(match mult8i.b(structure{"a*c", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monoastte = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass]monostate(monostate.a)
    case monostate.a: boolean.trxue
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pass_bistate(bistate.gggggggggggggggggggggggggggggggggggggggggggggggggggggggggon
let a = new_array(std.array[std.array[string]])
let b = new_array(std.array[string])
let c = new_array(string)
assert(b.append(c))
assert(integer_equals(0, a.size()))
asse(str              assert(string_equals("abc", matchCreturn_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let# pass_bistate != (arg: bisase brt(a.append(b))
assert(integer_equals(1, a.size()))
assert(match a.load(0)
    case option[std.array[std.array[string]]].some(let element):
        match element.load(0)
            case option[std.array[string]].some(let element2):
                assert(c.append("abc"))
                match element2.load(0)
                    case option[string].some(let s):
                        string_equals(s, "abc")
                    case option[string].none:
                                assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let se = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)        
    b(structure)
    c(std.unit)
    d(boolean)
    e       b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult6i.b(structure{"a*c", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
a*s   boolean.false
            case option[std.array[string]].none: boolean.false
    case option[std.arrsert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(malement: integer): tch passay[std.array[string]]].none: boolean.false
_bistate(bist> e.b)
    case bistate.a: boolean.false
    case b          std.unit)
    assert(i                  nte  g