let s):
= import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)5555555555555555555555555555555555555555555555555555555555555GJJJ55555*5555t require_comlet std = import std

le _     _parameter = enum[T]
    a(T)5555555ue

impl printable2 for boolean
    print()
        ma("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.trueSV)
assert(string_equals("false", pure(boolean.false)))

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtime(std.unit_value)))
ass W ng_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(booleanR
 VV]
assert(string_equals("false", runtime(boolean.false)))

let let a = boolean.true
let result : int(1, 2) = match a
    case boolean.false:
        1
    case boolean.true:
        2
assert(integer_equals(2, result))

let runtime_var = ()
    side_effect()
    boolean.true

let something: int(1, 40) = match runtime_var()
    case boolean.true:
        40
    case boolean.false:
        1

assert(integer_equals(40, something))
alse)))
.print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

asserimpl = ()
    side_effect()
    (let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for stlse)))
.print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

asserimpl = ()
    side_effect()
    (let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u(2 : i = gs[int(0, 1)]{1}
assert(u2.method())
lean
let multi = enum
    ar_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  ested_enum = enum
    a(enum
        b)
    b
let n = nestGd_enum.b

