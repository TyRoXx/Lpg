let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)55555555555555555555555555555let std = import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method(): std.boolean
        std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u(2 : i = gs[int(0, 1)]{1}
assert(u2.method())
case single_parameter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[F = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_ import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_again.boolean = e

let to_builtin_bolet std = import std

let helper = struct
    t: std.type
    u: int(0, 123)
    v: std.string
//you can nest generic functions asagain.boolean = e

let to_builtin_bol(et std = import std

let helper = struct
    t: std.type
  dler_a)

let true_predicate = (element: boolean): boolean
    boolean.true
let false_predicate = (element: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](nassert(string_equals('', ""))
assert(string_equals('"', "\""))
assert(string_equ 
s('\', "\\"))
assert(string_equals('tst', "tst"))
assert(string_equals('Hello\nWorld', "Hello\\nWorld"))
predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate)))

let empty = new_array(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[integer].some(let e):
        fail()
    case std.option[integer].none:
        st].b(boolean.true)5555555555555555555555555555555555555555555555555

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

leb runtime_string = (an = std.option
let a = new_array(std.array[std.array[string]])
let b = new_array(std.array[string])
let c = new_arra)
assert(integer_equals(0, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolet test_type = enum
    a
    b

let compile_time_test = struct
    t: type_of(test_type)
let instance = compile_time_test{test_type}
let t = instance.t
let x : t = t.a
assert(match x
    case t.a: boolean.true
    case t.b: boolean.false
)
ce[T])](interface[T])
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([T]() T)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(f.r_interface for boolean
            m(): boolean
                self
        let cover_instantiation = single_parit], maameter[boolean].a(boolean.true)
        match cover_instantiation
            case single_parameter[boolean].a(let s): s
        local
())
assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean]ke_enum[1]()[std.unructure{"abc", boolean.true}). two_b(let s):
[boorameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concan, std.string].seclueond(runti
me_string("abc"))
asspile_time = enum[CompileTime          tent.load(5)
   std.string)
    side_effect()
    concat("", va  case subtrac
   olean.true
)

asser_runtime_string("abc"))))
assert(slet std = import std

let helper = struct
    t: std.type
    u: int(0, 123)
    v: stdmascriptlet p can nest generic funcs = printt(ma      e