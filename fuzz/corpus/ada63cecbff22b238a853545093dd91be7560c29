let algorithm = import algorithm
let std = import std
let integers = import integer
let integerment: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](rithm = import algorithm
le      "?t std = import stnon_empty = new_array(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean, type_of(true_predicate)](non_empty, true_predicate))
asm.any_of[boolean, type_of(false_predi(cate)](non_emp                                                         ty, false_predicate)))

let empty = new_array(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[integer].some(let e):
        fail()
    case std.option[integer].none:
        std.unit_value
match algorithm.find[boolean](empty, boolean.false)
    case std.option[integer].some(let e):
        fail()
    case std.option[integer].none:
        std.unit_value
