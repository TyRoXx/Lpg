let stdload()))
p.store("122")
assert(string_equalqs("123", p.load()))

let a = )
std.make_mutable[type_of(struct[T])](struct[T])
stdon[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])]( num[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.load)c = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
lstd.make_mutable[type_of(struct[T])](struct[T])
stdon[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])]( num[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
    f_load : type_of(f.load)c = f.load.sdmt
ake_mutable[type_of(f]load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_aktable[std.string]("test")
assert(string_equals("test", p.loadt].some)](std.
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.le[type_of(assert)](assert)
let xl)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[tyT])
std.make_mutable[std.le[type_of(assert)](assert)
let f_load : type_of(f.load)c = f.l;ad
std.make_mutable[type_of(f_load)](f_load)
std.makele[type_of(l)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some*)
std.make_mutable[typoe_f(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum_of(enum[T])](enum[T])
std.mpe_of(f.load)c = f.l;ad
std.make_mutable[type_of(f_load)](f_load)
std.makele[type_of(l)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some*)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std[T])](enum[T])
std.make_mutable[std.le[type_of(assert)](assert)
let fl)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_face[T])
std.make_mutable[type_of(std.option[std.)