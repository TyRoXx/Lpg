l2B:    A  import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
   a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23)RY      )
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as1       .not(test_single(let std = import std
let single = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>, u().b)
assert(tstring("abc"))
assert(string_equals("abc", matc())
h return_stateful_enum()
    ssert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 4 (a: boolean)!!!!!!!!!!!!!!!!!let(std : import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(re multiple va>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>                                                                                               ean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
asser   
ring_equal s fun>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   case uke single.a(make_runtime_,s