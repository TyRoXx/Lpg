d 	  lean.true

let a : producer[std.boolean] = dummy{}
assert(a.produce())

impl transformer[std.boolean, std.string] for sing_struct = enuan.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.boolean.t;ue
	let a : pstd.string] for dummy
    transfo  W   
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
assert(string_equals("true", b.transform(std.boolean.true)))
assert(string_equalslet std = import std

let helper = struct
("false", b.transform(std.boolean.false)))

let captures_va*int(0, 123)
    v: std.string
nt(0, 1)
let u_instance = u{t{boolean.true}, "abc", 0}
asslet std = impor64, right: int   