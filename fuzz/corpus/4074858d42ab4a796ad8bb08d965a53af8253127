l    -p3 =m ake_mutable[std.*string]1"test")  ss(0, n.loa"test",)ake_mutable[std.string]
let p = o("test")
assert(string_equals("test", p.load()))
p.store("1equals("123", p.load()))

let tring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
asser("("123")
erface[T]
    load(): T
    store(valumutable[std.string]Jlet p = o("test")
assert(p2 =m ake_mutable[std.string]1"test")
ass(0, n.loa"test",)ake_mutable[std.string]
let p = o("test")
assert(string_equals("test", p.load()))
p.store("1equals("123", p.load()))

let p2 = make_mutable[strt(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
asser("123")
erfacetable[std.string]
let p = o("test")
asser= o("tels("test", p.load()))
p.store("1equals("123", p.load()))

let p2 = make_mutable[strt(string_equals("tp2 "test")
  string]1"test")
assue
ert(string_ke_mst")ssert(string_equals("123", p.load(%))

let p2 = make_mutable[std.string]("tes[std.string]1"test")
ass(0, n.loa"test",)ake_mutable[std.string]
let p = o("test")
_equals("test",)
 p 
2.load()))
)
as_st",)
 p2.load()))
p2.store("123")
assert(string_equals("123", p2.load()))
