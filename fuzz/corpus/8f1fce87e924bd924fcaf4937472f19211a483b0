let std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string


assert(string_equals("z", z.method()))

let u : gi["u"] = std.unit_value
assert(string_equals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method(): std.boolean
        std.blean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

legs3[int(0, 1)]{1}
assert(u2.method())
