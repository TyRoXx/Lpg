let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("aq")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("                    &                                                 a     a2.print()))

let t(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_.false).pri               mpl printable2 for   Qunit
    print()
       rintable2 = different_method_order{}
h.other_metho(()
assert(string_equals("123", h.print()))
