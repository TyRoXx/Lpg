let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case single_parameter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c)= two_parameters[boolean, std.string].second(runtime_string("abc"))
asspile_time = enum[CompileTimeValue]

let and = sert(matchb c
    case two_parameters[boolean, std.string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
     b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[boolean].a(let s):
        boolean.false
    case using_global[boolean].b(let s):
        s
)

let accessing_struct = enum[T]
    a(T)
    b(std.boolean)
assert(match using_global[boolean].b(boolean.true)
assert(not(a.store(0, "")))
assert(not(a.store(2, "")))

assert(match a.load(0)
    case std.option[string].some(let element): boolean.false
    case std.option[string].none: boolean.true
)

assert(a.append("abc"))
assert(integer_equals(1, a.size()))

assert(match a.load(0)
    case std.option[string]:some(let element): string_equals(element, "abc")
    case std.option[string].none: boolean.false
)

assert(match a.load(1)
    case std.option[string].some(let element): boolean.false
    case std.option[string].none: boolean.true
)

assert(a.append("456"))
assert        _equals(2, a.size()))

assert(match a.load(0)
    case std.option[sing].none: boolean.false
)
assert(match a.load(1)
    case std.option[string].some(let element): string_equals(element, "xyz")
    case std.option[string].none: boolean.false
)

assert(not(a.store(3, "???")))
assert(match a.load(0)
    case std.option[string].some(let element): string_equals(element, "123")
    case std.option[string].none: boo                                                                                                                      