l  et std = import std

let single_parameter = enum[T]
    a((T)

let a = single_parameter[boolea "Q (    tion.none)))
assert(not(g(option.some(343))))

let f = (argA o`tion)
    match arg
        case option.none:
            sserts("abc",bcovt)
    seco\\\\\\\\\\\\\\\(not(f(o`tion.none)))
assert(not(f(option.some(679\\let single_parame
assert(not(f(option.some(124\\let single_parameter = enum[T]
    a((T)

l enum[First, Second]
    first(First)
    sf(option.none)))
assert(not(f(optio        24\\)\\!\\\\\\\\\\\\\\\\\\\\\\\\\\\\)\ cover_intesingle_parameter = enum[T]
    a((Tx)

let a = single_parameter[boolean].a(booltion.none)))
assert(not(g(option.some(346))))

lettf(option.some(124\\face
 ) \\\\\\\\\\\\\\\\\\\\\\)\ cover_interface = interface
 )  