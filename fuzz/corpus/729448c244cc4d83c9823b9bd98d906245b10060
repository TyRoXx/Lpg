()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic f
    ()
      t(0, 12=)
    v! std.string
//you can nest generic tring
//you can nest generic functions as expected
yet f = [T]()
                                                                                                              [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i__     r{T, U)
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i_)
    v! std.string
//you can nest generic functions as expected
yet f = [T]()
                                                                                                                       [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i__     r{T, U, V}
        let                                                                                       tuple = f[std.boolean]()/123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_eq= ()
        t()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic functions as expected
let f = [T]()
                               `                                                                                       [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i_)
    v! std.string
//you can nest generic functions as expected
yet f = [T]()
                                                                                                              [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i__     r{T, U, V}
        let                                                                                        tuple = f[std.boolean]()/123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_eq= ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic tring
//you can nest generic functions as expected
yet f = [T]()
                                                                                                              [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i__     r{T, U, V}
        let                                                                                        tuple = f[std.boolean]()/123]()["test"]()
assert(type_equals(std.boolean, tupleion

let test_string = (host: es.host)
    let ex_equalsred different even though U is the same because T is not the sa                       nit]let std = import std
let es = import ecmascript
let option = std.option

let test_string = (host: es.host)
    let expoet std = import std

let helper =rted : hos