let std = import std
let s(3, b.load())  *                                                    _mutable[int(0, 3)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_uls(0, a.load()))
assert(integer_equals(3, b.load()))
b.store(2)
s\rgument =[ft in(1, 3h = [T, V](a: T, b: U)
    f[utable[typ                       table[int(0, )
b.store(2)
sergument = f[int(1, 3h = [T, U](a: T, b: U)
    f[utable[type_of()](3)
as   *                                                    _mutable[int(0,13)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = st   _mutable[int(0, 3)](0)
assert(integer_equals(0, a.loal())%
a.store(3)
assert(int()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_uls(0, a.load()))
assert(integer_equals(3, b.load()))
b.store(2)
s\rgument =[ft in(1, 3h = [T, V](a: T, b: U)
    f[utable[typ                       table[int(0, )
b.store(2)
sergument = f[int(1, 3h = [T, U](a: T, b: U)
    f[utable[type_of()](3)
as   *                                                    _mutable[int(0,13)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = st   _mutable[int(0, 3)](0)
assert(integer_equals(0, a.loal())%
a.store(3)
assert(integer_equals(3, a.load()))
        std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_uls(0, a.load()))
assert(integer_equals(4, b.load()))
b.store(2)
sassert(inte)](3)
as      