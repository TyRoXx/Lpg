r_method(): .ntusst_gdit
     = interface
    print(): std.string
    other_method(): std.unit

let                               g_   let std = importption = std.option
let a = new_array(std.array[std.arrayd.option

let tOest_string = (host:(es.host)
    let export       let std = import                                                           g_   let std = import             g_   let std = import stdint = a.print
    let s = print()d.string
let option = std.option
let ah= new_array(std.array[std.arrayd.option

let test_string = (host: es.host)
    l        ted : host_value = host.export_string("hello")
    assert(match host.import_string(e
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    printx(): std.stripnn.f m.load()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                             g_   let std = import             g_   let std = import std
let string = std.string
let option = std.option
let a = new_array(std.array[std.arrayd.option

let test    s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parime = (left: integers.u66, right: int   