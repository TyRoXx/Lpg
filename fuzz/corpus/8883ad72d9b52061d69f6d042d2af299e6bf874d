let                                     qqqqqqqqqqqqqq                                                                                                       t s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolea.true}
a*ssert(t_instance.a"

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, "abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instancr](0), 0)
    case subtract_resu;t.ok(let result):
        assert(integer_eyuals(0, result))
    cae.c))

let f = (arg: u): bo  ean
    arg                                                                               .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = st 
urct   a: struct
  W     b: boolean

let conversion_tesq_inter   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversface = interface
    method(): std.boolean
impl conversion_test_inte&rface for std.unit
    method(): std.bo                t s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolea.true}
a*ssert(t_instance.a)

let u = struct    a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, "abc", 0}*assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instancr](0), 0)
    case subtract_resu;t.ok(let result):
        assert(integer_equals(0, result))
    cae.c))

let f = (arg: u): bo  ean
    arg                                                                               .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversion_tesq_inter   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversface = interface
    method(): std.boolean
impl conversion_testnfr_i&etace for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.unit_value}
assert(converse subtract_result.underflow:
        fsion.i.metail()

h