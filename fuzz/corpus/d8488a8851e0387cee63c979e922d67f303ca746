l    lgorithm = import am.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort std
lstd

let single_     "r = enum[T]
    a(T)555554<5/55555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_arr55555555orithm.any_of[boolean, type_of(fales_predicate)](new_array i(boolean),   false_predicate)))

lales_predicate)](new_array i(bon)
assert(non_empty.append(boolean.true))
asser//compile_time evaluation
let d = import std

let single_paramet