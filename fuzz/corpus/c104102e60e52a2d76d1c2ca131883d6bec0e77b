d      <3H[     !ion[string].some(lni", stat\@)
let make    side_effect()
    concat("", na", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_tace

let conversion = conversion_test   
{std.una", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_s(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
stdrsion_test{std.una", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_tace

let conversion = conversion_test   
{std.una", stat\test_es(gnilsingle.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\zest_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.mest{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.make_mutable[type_of(str++++++++++++++++++uct[T])](str{std.una", stat\test_single(single.test_single(single.a(make_runtime_string("abc"))))
assert(std.not(te.mest{ltd.una", stat\test_single(single'a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)e)](std.option[std.un
std.make_mutable[type_of(str++++++++++++++++++uct[T])](str{std.una", stat\test_single(single.a(make_runtime_stringT("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = coeype_ conversion_tace

let conversion = conversion_test   
{std.una", stat\test_single(single.a                                                                                           (make_   r))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.mest{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_ot[T])](str{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(te.mest{ltd.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit(].some)e)](std.option[std.un
std.make_mutable[type_of(str++++++++++++++++++uct[T])](str{std.una", stat\test_single(single.a(make_runtime_stringT("abc"))))
assn_tesof(std.option[std.unit].some)](std.option[std.un
std.tmake_mutabl