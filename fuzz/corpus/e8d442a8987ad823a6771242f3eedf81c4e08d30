let std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
       () a
assert(f6(boolean.true)()())

/*capture multiple variables*/
let helpb8      er = struct
    a: std.string
    b: std.          `_______                                                                                         string    - x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= booleanrt(f6(boolean.true)()())

/*capture multiple variables*/
let helpb8      er = struct
    a: std.string
    b: std.          `_______                                                                                         string    - x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))2B  rg: single)  
  ma)
            string_equals("abcay_type = std.array[string]
le||||||||||||||||single(single.a(mak        e_st  asserenum()
    caseot(a.store(0, " single.a(let state): stat, "")))
