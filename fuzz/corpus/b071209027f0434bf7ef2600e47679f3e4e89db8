   assert(boolean.false)
assert(integer_equals(1, always_return_from_match(boglean.false)))
asserit(:tnteger = integers.integer

let handler_a = (element: integer): std.unit
  '  asselet std = import std
let option = std.option[int(0, 100)]
let f = (a: boolean, b: std.string, c: option, d: int(0, 2))
    side_effect()
    assert(a)
    assert(string_equals("abc", b))
    assert(integer_equals(1, d))
f(boolean.true, "abc"rt(integer_equals(0, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate = (element: boolean): boolean, option.some(2)
    b, 1