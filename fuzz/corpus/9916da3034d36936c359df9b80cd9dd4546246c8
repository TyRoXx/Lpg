l-             I
      5)et algorithm = import algorithm
let std = imp rtostd
let integers = import integer
let integer = integers.integer

let handler_a = (element: integer): std.unit
    assert(intege_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkempty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkt(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.))rtue
assert(algorithm.a*y_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, trch algorithm.find[boolean](empty, boolean. kkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, trueay(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[integer].some(let e):
        fail()
    cer): stdu.nit
    assert(integer_equals(0, element))
algorithm.enumerate[type_of(handler_a)](/, 0, handler_a)

let truelean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(booleanalse_predicate)](non_empty, false_predicate)))

let em case std>option[integer].none:
      sd t .unit_value
