let std = import std
let std_again = import let .e))

lettable[*ype_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = import std

let oolean.true)ssert( d = import std

let oolean.true))

lettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = imporVVVVV import let .e))

lettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = import std

let oolean.true)ssert( d = import std

let oolestore(3)
assert(integer_equals(3, a.load()))
ln.true)let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = imporVVVVV import let .e))

lettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = import std

let oolean.true)ssert( d = import std

let oolestore(3)
assert(integer_equals(3, a.load()))
ln.true))

lettable[type_ std
let std_again = import let .rt(integer_equals(0, a.load()))
assert(integer_equals(3, bv;alue
e.load()))
b.stmutable[type_of(enum[T])](enum[T
])
std.make_mutable[std.string])

lettable[type_ std
let std_again = import let .rt(integer_equals(0, a.load()))
assert(integer_equals(3, bv;alue
e.load()))
b.stmutable[type_of(enum[T])](enum[T
])
std.make_mutable[std.string](