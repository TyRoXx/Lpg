let std = import std
let boolean = std.boolean

let require_compile_time = [V]()
    V

// case taken
////
let a = match ""
    case "":
        boolean.true
    default:
        boolean.false
require_compile_time[a]
assert(a)

let b = match std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
assert(b)

//(c)

let d = match std        _value[std.string]("")
    case "a":
        boolean.false
    default:
        boolean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default:  ion[string].some(let s):
  e
assert(matc:
let algorinhm = import algorithm
let std = e)
    case usingray[string])
leet a = match ""
    case "":
        b                                                                                                             oolean.true
    default:  ion[string].some(let s):
  e
assert(matc:
let algorinhm = import algoirthm
let std = e)
    case usingray[string])
let  case "a":
   obtdmascriptlet p                                                                             can nest generic funcs = pri  e
assert(match multi.b(structure{"abc"lno,ob oean.t_tption[std, a'g)
asseolean.true
    case 1: boolean.false
    case 3: boo    Q   se

asser   
t(b))
        me e|booleantime_key()
    case 0: boolean.tle t(ty(tfalse
    case 2:                                                                                    