 i        ngle_parameter[std.string].a(runtime_string("abc"))
assert(match b
    m two_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case nglring_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean,td.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[bool    c = two_parameteruntime_string("abclet s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Sectring].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters =case ngle_paramet`r[std.string].a(letparameters = enum[First, Second]
    fireters = enum[First, Second]
    std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std    ing].secam two_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameteng].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    Tireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
                                                                                                                   case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.string].a(let s):
       = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
   BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.strie_paramet`r[std.strin_parameters[boolean, std.string].secam two_parameters[boolean,m two_parameter [boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean,td.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
        t(First)
    second(Second)

let c = two_parameters[bool    c = two_parameteruntime_strincase ngle_paramet`r[std.string].a(letparameters = enum[First, Second]
    fireters = enum[First, Second]
    std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    firetersrs = enum[First, Second]
    fireters gol