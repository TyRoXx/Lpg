l        et  d = implet algorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let handleretd.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)]  = interface[T]
    method(): std.string

impl[S] gi[S]ufor std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for stdvvvvvvvvvvvvvvvvvvvvvring_equals("0,1", y.method()))

let z : gi["z"string_equals("*,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl for generic self
let i =e     ce
    method(s) :td.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.met    ))
std.unit
    megi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z = import std

// impl fc%
let gi = interface[T]
    mestring_equals("0,0"N x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl fotd.option[std.boolean].some(lat element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)

assert(a.store(1     