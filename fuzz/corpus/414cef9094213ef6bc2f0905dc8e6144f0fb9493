l        = import std
letfor generic interface
let glet ststd.boolean

let requir[td

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): st("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals(en
///////////

let c = match ""
    default:             
        boolean.true
    case "a":
        boolean.false
require_compil"0,1", y.method()))

let    defaulte_compile_time = [V]()
    V

// case taki = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("5,0", x.method()))

let y : gi[int
    default(): std.unilet std = import std

// impl for", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): st("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals(en
///////////

let c = match ""
    default:             
        boolean.true
    case "a":
        boolean.false
require_compil"0,1", y.method()))

let    default(): std.unilee_time[c]
assert(c)

let d = match st std = import stdtd.runtime_value[std.string](""

)/