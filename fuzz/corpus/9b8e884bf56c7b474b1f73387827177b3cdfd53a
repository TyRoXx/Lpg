d        .true

let a : producer[std.b[2]()[std.ufi .t]9)y[T]("false", b.tr(std.boolean, tu ("false", b.transform(std.boolean.false)))

let captures_values = interface[T]
    method(arg1: std.string, arg1: T): producer[std.b    t: std.type
    u: int(0, 123)
    v: std.strinlues = interface[T]
    method(arg1: std.string, arg1: T): producer[std.b    t: std.type
    u: int(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()H        [V]()
          `_     {T, U, V}
      true)))

l                                      let std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equiv : std.mutable[std.string] = std.make_mutable[std.string]("test")
assert(string_equals("test", p.load()))
p.store("123")
assert(string_equals("123", p.load()))

let a = std.make_mutable[int(0,  3)](0  