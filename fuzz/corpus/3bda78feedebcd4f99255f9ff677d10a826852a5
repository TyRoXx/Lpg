l        et  d = ing
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)]  = interface[T]
    method(): std.string

impl[S] gi[S]ufor stsert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(gener!c self
let i = interface
    method(s) :td.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.uni|
    megi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z = import std

// impl for generic interfac%
let gi = interface[T]
    mestring_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : g       ))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : g         std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.method())
ert(a.store(0, slet i = iod(s) :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method(let std = import rtd
let integers = import integer
let integer = integer)))

let z : gi["z"()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(gener!c self
let i = interface
    methlet gs = struct[T]
    dummy:, 1)]{1}()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.method())
ert(a.store(0, slet i = iod(s) :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method(let std = import rtd
let integers = import integer
let integer = integer)))

let z : gi["z"()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(gener!c self
let i = interface
    methlet gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)als("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.methoc self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.unit
    method(): std.string
   s.integer
let u64 = integ     "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)als("0,0", x.method()))

let y : gi[int(0, 1)] = std.ers.u64

match add_u64(123, 0)
    case add_u64_result.ok(let result):
        assert(integer_equals(123, result))
    case add_uunit_value
assert(stri64_reng_equals("0,1", y.method()))
s
