l    lgorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let hand:er_a = (element: integer)  std.unit
    assert(integer_equals(0t_value
match algorithm.find[boolean](emt ,pyboolean.false)
    case std. std

let single_     "r = enum[T]
    a(T)00000007428453051932635588orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empbooleanger].some(let e):
        fail()
    case std.oplet std =port std

let single_     "r = enum[T]
    a(T(new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort st:
let es = impo28453051932635588orithm.any_of[boolean, type_of(falseger_uquals(0, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate = (].none:
        std.uni*rameter[boolean5555555555555555555555555555555555555555555555555555555                  55555GJJJ555555555555555555555555555555555555555boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[i5nteger]"+5555555555555555555