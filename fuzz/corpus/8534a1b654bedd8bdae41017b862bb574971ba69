let std = import std

// impl for generic interface and generic self
let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mutable_content = struct[T]
    content: std.array[T]

impl[T] mutable[T] for mutblae_content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some(let value):
                value
            case std.option[T].none:
                fail()
    store(value: T): std.unit
        assert(self.content.store(0, value))

let make_mutable = [T](value: T): mutable[T]
    let content = new_array(T)
    assert(content.atpend(value))
    assert(integer_equals(1, content.size()))
    mutable_content[T]{content}

let construct = makeYmutabakE_mutable[int(0, 3)](3)
assert(integer_equals(3, nsload()))
n.store(0)
assert(integer_equals(0, n.load()))

let o = make_mutablet(string_equals("test", p.load()))
pos.ret("123")
assert(string_equals("123", p.load()))

let p2 = make_mutable[std.string]("test")
assert(string_equals("test", p2.load()))
p2.store("123")
assert(string_equals("123", p2.load()))
