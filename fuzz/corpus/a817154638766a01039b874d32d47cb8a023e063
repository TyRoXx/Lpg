i  nt(0, 1)] = std.unit_value
assert(string_equals("0,1", y      "?.mr std.unit
    met od((): std.string
        "0,0"

impl gi[int(0, 1)]                                                             l  et std = import sinteger_equals]OS_  _B ([or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: boole ([or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: tristate)
    arg
assert(match pass_trhstate(tristate.a)
  re)
    'c(std.unit)
  d     r < struct
 = import ilper 
let heent,td.option[string].some(l      d(boolean)
    e
    f
assert   