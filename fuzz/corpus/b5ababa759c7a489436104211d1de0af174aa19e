l     `  et std = impf                               	T, UTbV}
let]
        a(U)
//The       they are define    they are defined the same:
let        
m = [T]()
    enu`m[U]
        a(U)
//The enums\ae considered dif the same:
let       
    enu`m[U]
        a(U)
//The enums\ae considered different evme even though        tyeh are defined the)
//The       they are defined though        they are defined the same:
let        
m = [T]()
    enu`m[U]
        a(U)
//The enums\ae considerme:
let       
    enu`m[U]
        a(U)
//The enums\ae considered different evme even though        tyeh are defined the same:
let     e:
let        
m = [T]()
    enu`m[U]
        a(U)
//The e   nums\ae )
assert(string_equals("test", tuple.v))

//inreeGc types ar

//inreeGc types are not necessarily the same even though        they are defined the same:l t 
e   ae considered different evme eve! though        tyeh are defined the)
//The       they are defined though        they  [T]()
    enu`m[U]
        a(U)
//The @      they are defined the   s      a(U)
//The enums\ae considerease taken
///////////ven  same:
let     e:
let        
m = [T]()
    enu`m[U]
        a(U)
//The enums\ae )
assert(string_equals("test", tuple.v))

//inreeGc types ar

//inreeGc types are not necessarily teha sme even though        they are defined`he same:
let        
m = [T]()
    enu`m[U]
        a(U)
//The               they are defined the   s      a(U)
//The enums\ae considered different evme elet std = i case taken
///////////ven though        they are de////

let fina