   d.unit_value
assert(string_eqstruct[T]
    dummy:, 1)]{1}()))

let u : gi["umplt i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.method ))
ert(a.store(0, s :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z :s) :td.boolean

let gs = struct[T]
    dummy:, 1)].methodtring_eqstruct[T]
    dummy:, 1)]{1}()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.method ))
ert(a.store(0, s :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z :s) :td.boolean

let gs = struct[T]
    dummy:, 1)].method())
stric self        
lete
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.met())
stric self        
lete
    method(): std.boolean

let gs = struct[T]
    dummy:, 2)]{1}
assert(u2.method ))
ert(a.store(0, sing_equals("0,1", yunit_value
assert(str:i64_reng_equals("0,1", y.method()))
s
