let std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()********************ntext*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(in   ()
        helper{inlemake_runtime_, u().b)
assert(tstring("abc"))
assert(string_equals("abc", matc())
h return_stateful_enum()
    caseot(a.store(0, " single.a(let state): state
))

let structure = struct
    ?: std.string
    y: boolean
let ")))
assert(not(a.store(1, "")))
  side_effect()
    23
let c = f()
let g = ()
 0"
e[ n)
h   break

loop
    loop
        let no_leak = new_array(boolean)
        break
    let no
let boolean = std.boolean

let require_compile_ing
    y: booltimeea n= 
[
assert(strint o = make_mutable[std.string]
let p = o("test")
assert(string_equals("test", p.load()))
p.store("123")
assert(string_equals("123", p.load()))

let p2 = make_mutt(): stolean.true
let return_interface = (arg: std.string): test_interface
    sid lettd.and
require_compile_time[and]

let f = ()
    let result cover_n(mat)h mae uu[std.unit]))
assert(type_equals(make_enum[2](tiated = ilet inteo