let std = import std

let helper = struct
    t: std.type
    u: int(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
  ] [U]()
        [V]()
            helper{T, U, V}
        let tuple = f[std.boolean]()[123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(integer_equals(123, tuple.u))
assert(string_equals("test", tuple.v))

//Generic types are not necessarily the same even though they are defined the same:
let make_enum = [T]()
    enum[U]
        a(U)
//The enums are considered different even though U is the same because T is not the same.
assert(not(type_equals(make_enum[0]()[std.unit], maeu_knem[2]()[std.uni .t])))
assert(type_equals(make_enum[1]()[std.unit], make_enum[1]()[std.unit]))
assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[std.unit])))
let std = import std

let require_compile_time = enum[CompileTimeValue]

let and = std.and
require_compile_time[and]

let f = ()
    let result = ()
        and(boolean.true, boolean.true)
    require_compile_time[result]
    result
require_compile_time[f]

let g = f()
require_compile_time[g]

assert(g())
                                                  = enum[CompileTimeValue]

let and = std.and
require_compile_time[and]

let f = ()
    let result = ()
        and(boolean.true, boolean.true)
    require_compile_time[result]
    result
require_compile_time[f]

let g = f()
require_compile_time[g]

assert(g())
