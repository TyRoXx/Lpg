l  et                               o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): ("test",)
 p2.load()))
p2tso.1.loa))d()
p2tso.reke_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()9)
p2tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): ("test",)
 p2.load()))
p2tso.1.loa))d()
p2tso.re(ls(0, n.load = impolue: T): st0)
assert(integer_equals(0, n.load = imfffload()))

lit p.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = impor    d
let std_again = import std
let e : ()))

let o = make_mutable[stdr.s
lit p2 = make_test",)
 p2.load()))
p2tso.1.load()let pa std.option[string].sss_bistate = (arg:ome(le