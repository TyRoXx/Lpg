l   s):
= import std
impl for generic interface
let gibB_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.str    inals("u", u/method()))

// impl for generic self
let i =od(): y: T

impl[T] i for gs[T]
    method():       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
ass  e (let std = import std

//import std

// impl for generic iPterface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = st]
    dummy: T

impl[T] i for gs[T]
(   method():       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u(2   i = gsnt(0, 1)]{1}
assert(u2.method())
lean
let multi = enum
    ar_method(_)
        std.unit_value

impl printable2 for boolean
    print()
        match sel  eslted_enum =  = n%8    um.b

