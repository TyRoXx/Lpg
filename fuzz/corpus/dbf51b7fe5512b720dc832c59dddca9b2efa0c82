let std = import stdp
// impl for generic interface
let gi = interface[T]
    metOhod(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
let z : gi["z"] = std.unit_valsert(string_equals("u", u.method()))

// impl for generic self
let i = interface
    method(): sad.boolean

let gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method(): std.boolean
        std.boolean.true

let z1 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u2 : i = gs[int(0, 1)]{1}
assert(u2.method())
