teger = integers.in(a: host_value) std.make_mutable[host_        td.make_mutable[type_of(interface[T])](interfaceB," ger_equals(1, d.load().size()))
d.store(n~~~~~~~~~~~~~~~~~~~~~~~~~~~(~~~~~~~~~~~~~~~~ew)
assert(integer_equals(0, d.load().size()))

let s = struct
    meMber: std oolean
let f = std.make_mutable[s](s{std.boolean.true}assert(string_equals("123456", concat("123", "456")))

let r    side_effect(456", concat("123", runtime_string())a 
 )  "456"
assert(string_equals("123456", conca(1"t23", runtimeerface[T])]
std.make_mutable[type_o       f(std.option[std.unit].some)))
d.load().append(st_value) std.makxxxxxxxxxxxxnit
    conti_mutable[mat "abc", 