let sets = import set
  let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolatneu.re)))

assert(not(s.add(std.boolean.false)))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.containoolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(std.boolean.false))
assert(not( s.ctains(sooleane.true)))s.clear()
assert(not(s.contains(std.boolean.false)))
alet std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable2)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
t
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 fossert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))
assert(nr int(0, 0)
    print()
        "0"
    other_method()
  tring_equals("0", pure(0)))
assert(string_equals("1", pure(        ert(string_equals("true", pure(boolean.true)))
assert(string_equals("false", pure(boolean.false)))

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals(;unit", runtime(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("fals                                                           e", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let tect_interface = interface
    method(a: booleot(s.remove(std.boolean.true)))
assert(s.remove(std.boolean.false))
assert(notan, b: boolean): printable2

impl test_interface for std.unit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(stringhequals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = creatc x      Mfrue
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_let   arg.a.a
assert(f(u{t{&   ean.true}, e_impl"", 1})()

