l-        import std

let printable = interface
    pri    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
      let a = boolean.true
let restring_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(booleanR
 VV]   ,
assert(string_equals("false", runtime(boolean.false)))

let a    case boolea(40, somen.false: "false"
    other_methSd()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(thing)string_equals("unit", pure(std.unit)_va  "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case Yoolean.true: "true"
            case boolean.falYe: "false"
    other_method()
        R
 VV]
assert(string_equals("false", runtime(boolean.false)))

let a    case bo(lea(40, somen.false: "false"
    other_method()
        std.uer_method(): std.unit

let pure = (a: printable1)
           std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_avleu

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.falYe: "false let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
      let a = boolean.true
let restring_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(booleanR
 VV]
assert(string_equals("false", ruing_equals("true", pure(boolean.true)))
assert(string_equals("false", pure(boolean.false)))

assert(string_equals("", runti*me("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(booleanR
 VV]
assert(string_equa)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", 
pure(1)