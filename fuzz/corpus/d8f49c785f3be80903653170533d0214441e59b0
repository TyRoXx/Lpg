l            lgorithm = import algorithm
let ledicate = (element: boolean): bo/lean, option.some(2)
            t))
algoritOOOOOOOOOOOOny_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_e        fail()
    case std.oplet std =port std

let single_     "r = enum[T]
    a(T(new_array i(boolean), false_predicOOOOOhm.enumerate[type_of(har_ate)))

let non_lean): boolean, optionement).some(2)
 ) 