t     = import std
let option = std.option[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals(0, of = (a: bocture = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
  tate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: booleantring("abc"))
assase single.a(let state): stastruct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)     c(std.unit)
    d(boolean)
    e
    f
assert(matc5h mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(mote = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: coolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match past test_or = [or]()
    assert(integer_equals(0, of = (a: bocture = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
  tate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.c: bs_tristate(tristate.a)
        case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.cean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate    boolean.true
    case tristate.b: boolean.false
    case tris_tristate(tristate.b)
    casassert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pas
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.faing_equals("as_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.cean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolet a = boolean.true
let result : int(1, 2) = match a
    case boolean.false:
        0
    case boolean.true:
      lean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate  2
assert(integer_equa.a)
    lcs