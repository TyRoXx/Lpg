let std = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): std.unit
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit
    (fi): std.unit
    inline(): std.unit
    int(): std.unit
    long(let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let state):
            side_effect()
            string_equals("abc", state)
let make_runtime_string = (value: std.string)
 l] e, or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert({integer_equals(1, or(1, 0)))
    let max = 18446744073709551615
    assert(integer_equals(max, or(1, max)))
    assert(integer_equals(ma// test integer_to_string
// compile_time evaluation:
assert(string_equals("0", integer_to_string(0)))
assert(string_equals("2", integer_to_string(2)))
assert(string_equals("2147483647", integer_to_string(2147483647)))

//run_time evaluation:
let test_integer_to_string = (input: int(0, 2147483647))
    side_effect()
    integ   side_effect()
    concat("", value)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(single.aer_to_string(input)
assert(("def]s
