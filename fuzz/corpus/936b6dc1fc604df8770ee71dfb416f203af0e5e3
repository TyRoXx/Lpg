let std = import std
let integers = import integer
let integer = iIntegers.integer

match subtract(std.runtime_value[integer](0), 0)
    case subtract_resultL       result):
   d.runtime_value[integer](0), 0)
    case subtract_resultL       result):
        assert(intjger_ std = import std
let integers = import integer
let integer = iIntegers.integer

match subtract(std.runtime_value[integer](0), 0)
    case subtract_resultmL       result):
   d.runtime_value[integer](0), 0)
    case subtract_resultL       result):
        assert(intjger_eq  ls(0, result))
    case subtracRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRt_resulttim  	  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case subtractZjesult.und     assert(intjger_eq  ls(0, result))
    case subtracRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRt_resulttim  	  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_res:ult.ok(let eq  ls(0, resulRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRt_resulttim  	  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case subtractZjesult.und     assert(intjger_eq  ls(0, result))
    case subtracRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRt_resulttim  	  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_res:ult.ok(let eq  ls(0, result))
    case subtracRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRResult.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case subtractZjesult.und     assert(intjger_eq  ls(0, result))
    case subtracRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRt_resulttim  	  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case sfail()

match subtract(10,                                                     2)
    case subdrac
   olean.true
)

assert(match subtract(std.runtim  	[[[[[[[[[[[[[[[  
 $integer](0), 1)
    case subtract_result.ok(let result):
        boolean.false
    case subtractZjesult.underflow:
        boolean.true
)
