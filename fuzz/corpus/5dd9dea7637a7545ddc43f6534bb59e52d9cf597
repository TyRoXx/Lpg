t    [w      s = import)))

let empty = new_array(bodicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean),w_array(boolean), false_predicate)))

let nothm.any_of[boolel   ^td = import std
let sit_value)
assert(integer_equals(2, d.load().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

ltd.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_mutable[type_of(interface[T])](inter











hand!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!pe](std.boolean)
(a: host_value) std.make_mutable[host_valu = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
assert(nofl.t(oad().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_mutable[type_of(interftype_of(l)
std.make_mutable[T]() T)
std.make_m+utable[type_of(enum[T])](enum[T])
std.maoe_mualse_prmpiedicate)]lambda = () std.   Zunit_value
std.make_ake_zuntime_string("abc"mutable[type_of(lambda)]))))
    assert(host.equals(min, min))
    asse!!!!!!!host.read_property( assert(boolean.false)  boolean.true
l   4et false_predicate = (element: bo(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
std.make_           std.unit_value
e
make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_valu = std.make_mutable[s](s{std.boolean.true})
assert(f.load().memolean)
(a: host_value) std.make_mutable[host_valu = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
assert(nofl.t(oad().member))

st).make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_mutable[type_of(interface[T]option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])] :.make_mutable[type_of(interface[T]option[std.unit].some)](std.option[std.unit].some)
st2d.make_mutable[type_of(struct[T])]     alue
std.make_ake_runtime_string("abc"mutable[type_of(l)
std.make_mutable[T]() T)
std.make_m+utable[type_of(enum[T])](enum[T])
std.maoe_mualse_prmpiedicate)]lambda = () std.   Zunit_value
std.make_ake_zuntime_string("abc"muoolean), true_predicate)))
assert(not(algorithmdefault take