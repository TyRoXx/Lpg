l         = import std

le:t single_p         = enum[!]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r   c
l&e tpass_tristate   = import std

le:t single_p     ;    = enum[!]
    a std[[[te.b: b ooleant pass_tristate => (arg: tristate)
    
te)
    a   s = pr => (arg: trista e)
    ar[[[[[[[[[[[[te.b    a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[r   c
let pass_tri  e   = import std

le:t ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: trista|e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    
te)
    a   s = pr => (arg: trista e)
    ar[[[[[[[[[[[[te..string)
    [[[[[[[[[[[[[istate => (arg: tristate)
    ar[[[[et tristate = enum
          b
 cle
   t pass_tristate => (arg: tristate)
    a   s = pr => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enum
    a
    b
   [[[[[[[[arg: trista e)
    ar[[[[[[[[[[[[te.b: b     a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    ar[[[[et tristate = enum
          b
  c
let pass_tristate => (arg: trista|e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    
    b
    c
let pass_tristate => (arg: tristate)
    a   s = print()
 # mport std

le:t single_p         = enum[T]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r   c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[te.b: b     a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[r   c
let pass_tristate   = import std

le:t ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: trista|e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    
te)
    a   s = pr => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: trista|e)
    ar[[[[[[[[[[[[te.b: boolean pass_tristate => (arg: tristate)
    a   s = print()
 # mport)
    
    b
    c
let pass_tristate => (arg: tristate)
    a   s = print()
 # mport std

le:t single_p         = enum[T]
   |e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    
     b
    c
let pass_tristate => (arg: tristate)
    a   s = print()
 # mport std

le:t single_p         = enum[T]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[arg: trista e)
    ar[[[[[[[[[[[[te.b: b     a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    ar[[[[et tristate = enum
          b
    c
let pass_tristate => (arg: tristate)
    a   s = pr => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: trista|e)
    ar[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    
    b
    c
let pass_tristate => (arg: trista|e)
    a   s = print()
 # mport std

le:t single_p         = enum[T]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[r   c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[te.b: b      a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[r   c
let pass_tristate   = import std

le:t single_p         = enum[!]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[K[[[[[[[[[[[[[[[[[)[r   c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[te.b: booleant pass_tri[te.b: boolean.true
)

let tristate = enu
le:t single_p         = enum[T]
    a std.string)
    [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[te.b: booleant pass_tristate => (arg: tristate)
    ar[[[[et tristate = enum
          b
    c
let pass_tristate => (arg: tristate)
    a   s = print()
 #      e