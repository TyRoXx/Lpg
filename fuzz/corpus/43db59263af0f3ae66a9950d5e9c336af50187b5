ake_runtime_sarg: bistate)
    arg
single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab(            )
    caszi      e monostate.a: boolean.trxue
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a:t pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bi                                                                      vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvtate.a:t pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bi                                        tring("abc"))))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab(            )
    se bistate.b: boolean.false
)
assert(match pass_ibstate(bistate.b)
 timt(arg: bistate)
    arg
single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab(            )
    caszi      e monostate.a: boolean.trxue
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a:t pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(matct(match!pass_bisle.a(leean
let multi =       