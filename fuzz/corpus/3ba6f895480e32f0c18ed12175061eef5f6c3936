d   	  lean.true

let a : producer[std0boole========================<========etr(match using_global[boole    produce()
        std.boolean.trze
	let a : produproduce(|)

impl transformer[ruct = enum[T]
    a(T)
    b(std.boolean)
ass======?=======================<======================etr(match using_global[boole    produce()
        std.boolean.trze
	let a : produproduce()td.boolean)
ass==============================<============================= f==============================================<=====================================================   std.boolean.true
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  e()
        sd.string] for dummy
=========== ==================================<====================*======================()
 ====<========etr(match using_global[boo;le    produsingmpl transformer[std.boolean, std.string] for sing_st====================<========etr(match using_global[boole    produce()
        std.boolean.trz]
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
         ing] for sing_struct = enum[T]
    a(T)
    b(std.boolean)
ass==============================<=================================]()
          case  [V](s)t