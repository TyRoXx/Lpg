let std = import std

let require_compile_time = enum[CompileTimeValue]

/*use a captured variable in a compi
  ime c)ntext*/
let m = boolean
let f4 = ()
    lesert(integer_equals(b, 23))
require_compile_time[h]
h()

/*capture an argument at compile time*/
let f6 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effe(ct)
        std.ald(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtied.unit, d: std.unit)
        side_effect()
        std.and(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capt*capture an argument at compile time*/
let f3 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.cnd(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boolean)
    side_nd(a, std.and(d, integer_equals(c, 23)))
assert(z(boolean.true, boolean.true))

/*capture the same variable twice*/
let capture_twice = ()
    integev_equals(c, c)
assert(capture_twice()hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhteger_to_string(x))
assert(t())

/*function with multiple parameters captu2esffect()
    assert(integer_equals(b, 23))
require_compile_time[h]
h()

/*capture an argument at compile time*/
let f3 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std    std.cnd(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boolean)
    side_effect()
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.and(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capt*capture an argument at compile time*/
let f3 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.cnd(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boolean)
    side_nd(a, std.and(d, integer_equals(c, 23)))
assert(z(boolean.true, boolean.true))

/*capture the same variable twice*/
let capture_twice = ()
    integev_equals(c, c)
assert(capture_twice()hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhteger_to_string(x))
assert(t())

/*function with multiple parameters captu2esffect()
    assert(integer_equals(b, 23))
require_compile_time[h]
h()

/*capture an argument zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzat compile time*/
let f3 = (a: boolean, b: boolean)
    let indirection = () a
    (c: std.unit, d: std.unit)
        side_effect()
        std.cnd(indirection(), b)
assert(f6(boolean.true, boolean.true)(std.unit_value, std.unit_value))

/*capture an argument at runtime*/
let f7 = (a: boolean, b: boolean)
    side_nd(a, std.and(d, integer_equals(c, 23)))
assert(z(boolean.true, boolean.true))

/*capture the same variable twice*/
let capture_twice = ()
    integev_equals(c, c)
assert(captuhhhhhhhhhhh)
