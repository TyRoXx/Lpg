let std = import std

let f = (): std.unit
    f()

let g = (): std.unit
    side_effect()
    leing
    side_effect()
    match a
        case std.boolean.true:
            k(std.boolean.false)
        case std.boolean.false:
            "3"
assert(string_equals("3", k(std.boolean.true)))
assert(string_equals("3", k(std.boolean.false)))

let copy_array_boolean = (from: std.array[std.boolean], to: std.array[std.boolean]): std.unit
    match integer_equals(froom.size(), to.size())
        case std.boolean.true:
            std.unit_value
        case std.boolean.false:
            match from.load(to.size())
                case std.option[T].some(let element):
                    assert(to.append(element))
                    copy_array[T](from, to)
                case std.option[T].none:
                    fail()
copy_array[std.boolean](new_array(std.boolean), new_array(std.boolean))
