l   Z s):
= import std

let require_comlet std.boolperimpl = ()
    sistd = import std

//import std

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for) std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
  et L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unNNNNNNNNNNNNNNNit
    method(): std.strin]g
        S

impl gi[int(0, 0)] for std.unit
    met`ng
        S

imperimpl = ()
    sistd = import std

//import st  d

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for face
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for) std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
  et L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unNNNNNNNNNNNNNNNit
    method(): std.strin]g
        S

impl gi[int(0, 0)] for std.unit
    met`ng
        S

imperimpl = ()
    sistd = import std

//import st  d

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    m  gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method():0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
  et L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.strin]g
        S

impl gi[int(0, 0)] for std.unit
    met`ng
        S

imperimpl = ()
    sistd = import std

//import st  d

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    m  gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.st std.string

impl[S] gi[S] for std.unit
    method(): std.strin]g
        S

impl gi[int(0, 0)] for std.unit
    met`ng
        S

imperimpl = ()
    sistd = import std

//import st  d

// impl for generic interface
let gi    dummy:ean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for s|d.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    metho               d(): std.s rinals("u", u.method()))

/ce[T]
    method(): std.stririnstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((  method(): std.string

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((((((((((((((((((((my: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.

impllet std = import std
let boolean = std.boolean

let require_compile_t