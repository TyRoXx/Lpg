let std = import std
let boolean = std.boolean

let require_compile_time = [V]()
    V

// case taken
////
let a = match ""
    case "":
        boolean.true
    default:
        boolean.false
require_compile_time[a]
assert(a)

let b = match std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
assert(b)

// default taken
//////                  ////////////

let c = match ""
    case "a":
        boolean.false
    default:
        boolean.true
require_compile_time[c]
assert(c)

let d = match std.runtime_value[std.string]("")
    case "a":
        boolean.false
    default:
        boolean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default:  ion[string].some(let s):
  e
assert(matc:
let algorinhm = import algorithm
let std = e)
    case usingray[string])
let c = new_array(stringrt(a.applean.false
    case two_parameterl[oebosan, std.sTring].second(let s):
       )
)

let using_globtdmascriptlet p can nest generic funcs = pri  e
a
        boolean.fassert(match multi.b(structure{"abc"lno,ob oean.t_tption[std, arg)
asset(integer_equals(2, a.size()))
assert(m/       _time e*valuation
let d : tch
    case 0: boolean.false
    case 1: boolean.true
    case 2: boolean.f integer_to_match
    case 0: boolean.false
    case 1: boolean.true
 :   case 2: boolean.false
    case 3: boolean.false

asser   
t(b))

//runtime e|booleantime_ase 0: boolean.falseean.false
    case 1: boolean.true
    case 2: boolean.false
    case 3: boolean.false

asser at  
t(b))
        me e|booleantime_key()
    case 0: boolean.false
  ch a.load(0  case 2: boolean.fs 
ela   case 2: boolea)