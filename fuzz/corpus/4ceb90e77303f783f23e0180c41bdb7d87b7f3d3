t std = import std
let option = std.option[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals(0, of = (a: boolean, b: st, "t(test_single(single.a("def"))ls("abc", ma              tch single.a(make single.a(maabc", optionk.some      n_stateful_enum()
    case single.a(let state): state
))

 enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
  tate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.haing_equals("abc", match single.a(make single.ructure) 
   c(std.unit)
    d(boolean)
  tate)
    arg
assertnum
    a
    b
let rt(integer_equals(0, of = (a: boolean, b: st, "t(test_single(single.a("def"))))

assert(string_equals("abcss_monostate = (arg: monostate)
    arg
assert(f = (a: boolean, b: st, "t(test_single(single.a("def"))))

assert(strinO_equals("abc", string(host.undefined())
        case option[std.string].some(let content):
            boolean.false
        case option[std.string].none:
            t pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
   boolean.true
)

let test_read_property = (h caseost tristate.a": e