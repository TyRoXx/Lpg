let std = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_expliciurn_explicit_type = (arg: boolean): boolean
    loop
        return arg
assert(loop_retcit_type(boolean.true))

let loop_return_implicit_type = (arg: boolean)
    loop
        return arg
assert(loop_return_implicit_type(boolean.true))

let return_integer_implicit = (arg: boolean)
    match arg
        case boolean.false:
            return 1
        case boolean.true:
            return 2
assert(integer_equals(1, return_integer_implicit(boolean.false)))
assert(integer_equals(2, return_integer_implicit(boolean.true)))

let return_integer_explicit = (arg: boolean): int(2, 2)
    match arg
        case boolean.false:
            return 1
        case boolean.true:
            return 2
assert(integer_equals(1, return_integer_explicit(boolean.false)))
assert(integer_equals(2, return_integer_explicit(boolean.true)))

let retteger_implicit = (arg: boolean)
    match arg
        case boolean.false:
            return 1
        case boolean.true:
            return 2
assert(integer_equals(1, return_integer_implicit(boolean.false)))
assert(integer_equals(2, return_integer_implicit(boolean.true)))

let return_integer_explicit = (arg: boolng): test_interface
    side_effect()
    return arg
assert(return_interface("abc").m())
