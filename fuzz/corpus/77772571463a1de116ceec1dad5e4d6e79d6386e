l       ^td = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_again.booert(nofl.t(oad().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value](a)
std.make_mutable[type_of(interface[T])](interface[T])
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T]) (struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_muuct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]()unit].some)
std.make_mutable[type_of(struct[T])](s                   truct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutablsW      e[type_of(enum[T])le[type_of(f_load)]( f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_ake_runtime_string("abc"mutable[type_of(lambda)]))))