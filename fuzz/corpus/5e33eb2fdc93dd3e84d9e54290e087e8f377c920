let s:td = import std

// impl for generic interface and generic self
let mutable = interface[T]
    load()(value: T): mutable[T]
    let content = new_array(T)
    assert(content.append(velau))
    assert(integer_equals(5, content.siload()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
assert(integer_equals(3, n.load()))
n.store(0)
assert(integer_equals(0, n.load()))

let o = make_mutable[std.string]
let p = o("test")
assert(string_equals("test", p.load()))
p.store("123")
assert(string_equals("123", p.load()))

let p2 = make_mutable[std.string]("test")
assert(string_equals("test", p2.load()))
p2.store("123")
assert(string_equals("123", p2.load()))
