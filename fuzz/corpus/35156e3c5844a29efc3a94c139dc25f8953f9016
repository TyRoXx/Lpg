l         import std
let spe_of(struct[T])](struct[T])
std.makefmutable[type_of([]) (TT)]([T]() T)
std.make_mutabet std = import std
let spe_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
stk.make_mutable[std.string]("teslambda = () std.unit_value
std.make_ake_runtime_string"(abc"mutable[type_of(l)
_mut        e_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
= fe_mutable[type_of(enum[T])](enum[T])
= f.loadable[type_of(l)
std.make_mutable[ttype_of(enum[T])](enum[T])
= f.load
std.make_mutable[type of(f_load)](f_load)
std.make_mutable[type_of(f.lounit_(alue
std.make_akead)](f.load)
let lambda = () std.unit_value
std.make_ake_runtime_string("abc"mutable[type_of(lambda)]))[T])
std.make_mutable[type_of(std.option[std.)