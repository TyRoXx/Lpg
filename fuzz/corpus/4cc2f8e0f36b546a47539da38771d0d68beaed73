(        )
    *)
n nest +generic functions as expected
let f = [T]()
    [U]()
       tuple.u))
assert(string_etd = import std

let helper = struct
    t: std.type
    u: int(0,            t(0, 12=)
    v! stted
let f = [T]()
    [U]()
        [V]()
  eq= ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest +generic functions as expected
let f = [T]()
    [U]()
       tuple.u))
assert(string_etd = import std

let helper = st*ruct
    t: std.type
    u: int(0, 12=)
 per:= struct
    t  std.type
    u: int(0) 12=)
    v: std.string
//you can nesb generic functions as expected
let f = [T] helper{T,(U, V}
                       int(0, 12=)
    v: std.s 12=)
 per:= struct
    t  std.type
    u: int(0) 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T] helper{T,(U, V}
                       int(0, 12=)
    v: stdR _Bgenustriecters = enum[First, Secos_paraassert(st    string_equals("abc", s)
)

let t"o_params("hello