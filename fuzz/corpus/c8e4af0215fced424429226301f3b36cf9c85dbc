let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let state):
       : std.string
    y: boolean
l<et multi = enum
    a(single)
    b(structure)
    cX$.unit)
    d(boolean)
    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
     si   de_effect()
        string_equals("abc", state.x)
    case multi.c(let state): boolean.false
    case multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multi.f: boolean.false
)

//the type checker once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nestGd_enum.b

let unit_as_state = enum
    a(std.unit)
let    _x = unit_as_state.a(std.unit_value)
assert(match x
    case unit_as_state.a(let ignored):
        std.boolean.true
)
it
        lettd.and
require_compile_time[and]

let f = ()
    let result cover_not = !boolean.true
        let cover_interface = interface
           L       olean
        impl cover_interface for boolean
            m(): boolean
                self
       false", b.transform(std.boolean.false)))

roducer[std.boolean] = dummy{}
assert(a.produce())

impl transformer[std.boolean, std.string] for dummy
    transform(input: slet std = import std

let printable = interface
    print(): std.string
let f8 = (printed: printable)
    let method = printed.print
    let stle2 = interface
    print():' std.string
    other_method(): std.unit

let pure = (a: d.unit] for dummy
    method(arg0: std.string, arg1: std.unit): producer[std.boolean]
        dummy{}

let access_parameterruntime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()esult):
        boolean.'false
    case subtractZresult.underflow:
        boolean.t                                                                                                                                                                                                                                             