l       \ import std  // impl for generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(1, 0)] for std.unit
et gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
__      S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): face
    method(): std.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_valueor std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

l:t x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert1d.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    me    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[ivt(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : or generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
__      S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): face
    method(): stlet x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[ivt(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : or generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
__      S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): face
    method(): std.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method():std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_valueor std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method():t sd.string
        "0,1"

l:t x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert1d.boolean

let gs = struct[T]
   r generic interface
let gi = interface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "5,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_valu2.method())
