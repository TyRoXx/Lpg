l Z let std =[boolean].a(let s):
        boolealn.falring)
    side_weffect()
   (return concat("abc"} arg)
assert(string_e  quals("abcdef"T return_runtime_string("def")))

let test_interface = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(t            t]))
assert(type_equarfake_mutable[type_of(std.option[std.unit].d.boolean.true})
assert(f.l element): string_equals(element, "912")
    case std.option[string].noner oncussert(string_equals("unit", pure(std.qnit_value)))
assert(string_equals("0"O_pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.true)))
assert(string_lllllllllllllllllllllllllllllllllllequals("false", pure                            