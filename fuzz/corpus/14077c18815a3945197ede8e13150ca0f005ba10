l    std = impleked_list_node

impl linked_postd.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interfafe

let conversion = conversion_test{s( boolean.false
)

assert(match a.load(2)
    case std.optionrt(string_equals("false", b                                                                                         thod(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.e_runtime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interfac       F                  (          .!ra                                                                                        .transform(std.boolean.f.f: boolean.falsnum
    a(std.unit)
let x = usn.true
let conversion_test = struct
    i: conversion_test_interface

let co  ersion = conversion_test{std.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.e_runtime_string = (value:ace
    method(    i: conversion_test_interface

let conversion = conversion_test{std.e_runtime_string = (value:ace
    method(): std.booleaan.true
let conv                                       _struct{std.boolean}].e(st())d.(new_array(boolean), false_predicate)))
to_string(): std.string

let s C_ ruct
    slet alwaext: linked_list_node

nilpl miked_por1111(integer_equals(0,       self
 of =              e

let z2 : i = gs[i //Thenleo