a                   ke_runtime_strin(abc"g"))est_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab                   )                                              assert(string_equ"las(abc", match return_stateful_enum()
    case single.a(lostate.a: boolean.tru uVu
let bistate =.a("def"))))

ssert(string_equals("abc", match sing: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
assert(match p)ass_bistate(bistate.a)
    case bistate.false
    camatch return_stateful_enum()
    case single.a(lostate.a: boolean.true
) stat_monostate = (arg: monostate)
    arg
assert(match pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let monostate.a: boolean.true
)

let bistate = enum
    a
   le.a("def"))))

ssert(string_equals("abc", match sing: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas  arg
assert(match pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
as

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(string_equals("abc", match s
assert(match pass_bistate(bi state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
as

let bistate = enum
    a
    b
let pass_bistate != (arg: b                     istate)
    arg
assert(match pas
assert(match pass_bistate(string_equals("abc", match s
assert(match pass_bistate(bistate.b)
    pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
assert(match p)ass_bistate(bistate.a)
    case bistate.false
    camatch return_stateful_enum()
    case single.a(lostate.a: boolean.true
) stat_monostate = (arg: monostate)
    arg
assert(match pass_mo))
as8       .not(test_single(single.a("def"))))

assee != (arg: bistate.b)
   enum()
    case single.a(lostate.a: boolean.true
) stat_monostate = (arg: monostate)
    arg
assert(match pass_mo))
as8       .not(test_single(single.a("def[V)))

assee != (arg: bistate)
  `_  g
assert(match!pass_b(sle.a(let state): state
))

let str
    a
    b
let pass_bistate != (arg: 'et pass_bistate != (arg: 'tstaie)
    arg
as

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b(bistate.b)
    case bistate.a: boolean.false
    case b                  ae(srtstsringucture = struct
             