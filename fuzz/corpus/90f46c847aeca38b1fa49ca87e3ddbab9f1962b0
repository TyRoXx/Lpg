l2B       import std

/*use    aptured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
   a runtime context*/t*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(let std = import std
let single = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>!!!!g
    b: std.string
let x = 1
let y = "2"
let t = ()
    elt=u   ()
        helper{inleX	   ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>!!!!g
    b: std.string
let x = 1
let y = "2"
let t = ()
    elt=u   ()
        helper{inleX	   ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(let std = import std
let single = enum
   t(integer_e
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = stdttttttttttttttttttttttttttttttttttttttttttttt.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(let std = import std
let single = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>!!!!!!!>!!!!!!!!!!!!!!!!!!!!!!!!!!!1!
    ()
        () a
assert(f6(boolean.true)()())

/*capture multiple vaU       /
let helper = struct
    match single.ateger_to_string(x)( y}
`__dstring_equals(u().a(make single.a(make_runtime_, u().b)
assert(tstring(ntime context*/
let b = 23
let h = ()
    side_effect()
    ()
    assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(let std = import std
let single = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>       \>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>!!!!g
    b: std.string
let x = 1
let y = "2"
let t = ()
    elt=u   ()
        helper{inleX	   ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = std.svalue)
assert(test_single(single.a(make_runtime_strin       g("abc"))))
as3       .not(test_single(let std = import std
let single = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>! = enum
   t(integer_equals(bn argum>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>!!!!g
    b: std.string
let x = 1
let y = "2"
let t = ()
    elt=u   ()
        helper{inleX	   ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!      helper{inleX	   ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!assert(integer_equals(b, 23))
h()()

/*capture an )
