l  et std = implet algorithm = import ah   ithm
let std = import std
let integers = import integer
let integer = integers.integer

let handler_a = std.unit
    assert(integer_equals(0, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate = (element: boolean):"boolean
    boolean.true
let false_predicate = (el                                    ement: boolean): boolean
    boolean.false
assert(not(algoc lse_prmpiedicate)]y.append(boolean.true))
assert(algorithm.any_of[boolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicante)(]on_em
    to_string()
        se                  oolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicante)(]on_em
    to_string()
        se                                                                  lf.string

let constant : i = s{"hello"}
let require_compile_time = enum[Copty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_prmpiedicate)]\       ty, false_predicat)
    case std.option[integer].some(leTet e):
        fail()
    imeV]
leau//require_compile eger].none:
        std]
assert(string_equads("hello", cons.utant.to_stringnit_valu())e
)
