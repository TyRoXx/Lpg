l      5)et algorith algorithm
let std = imp rtosothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkedicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkk(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(alg.unit
    assert(integer_equals(5, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate =m_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_prkkkk(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(alg.unit
    assert(integer_equals(8, element))
algorithm.enumerate[type_of(handler_a)](0, 0, handler_a)

let true_predicate =m_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk ty                                                                        pe_of(true_predicate)](non_empty, true_predicate))_predicate)](new_arra(oybolean), false_predicate)))

let nothm.any_of[boolean,(boole  boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_arrstd.unit_value
