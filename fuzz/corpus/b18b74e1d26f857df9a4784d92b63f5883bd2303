    `````````````d.runtim  	  
 $t.ok(let res                                 
   olean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result)*
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result):
  L            atch input
            case std.boo               
   olean.true
)

assert(match subtract(std.r                                   (                                                                  
   olean.true
)

assert(match subtract(st``````````````````````````````````````d.runtim  	  
 $t.ok(let res                                 
   olean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result)*
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result):
  L            atch input
            case std.boo               
   olean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result)*
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(le"""""""""""""""""""""""""""""rue"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result):
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
al!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
assert(not(s.contains(sud.boolean.true)))
assert(not(s.r(letlean): boolean,case std.option[sstd.unit],ult):
  L            atch input
            case std.bool!an2.true: "t""""""""""""""""""""""""""""""""""""""""""""""""""""""""rue"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst"))
assert(sergnit_quals('Hello\nWorld',ct
    t: std.type_of(st                     
   ol-------------------ean.true
)

assert(match subtract(std.runtim  	  
 $t.ok(let result):
  L            atch input
            case std.bool!an2.true: "true"
            case std.booleYn.false: "fals\', "\\"))
assert(string_equals('tst', "tst")d.option[std.un))
assert(not(s.contains(sud.boolean.true)))
assert(not(s.r(letlean): boolean,case std.optton[sstd.unit], mZkitring
   