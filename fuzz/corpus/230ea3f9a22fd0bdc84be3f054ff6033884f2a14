t      [w      s = import)))

let empty = not(algorithm.any_of[boolean, type_of(false_predload().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

ltd.type](std.boolean)
(a: host_value) std.make_mutable[host_va!!!!!!!!!!!!!!!!!!pe](std.boolean)
(a: host_value) std.make_mutable[h st_valu = std.make_mmber))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_muta                                                   ble[type_of(interftype_of(l(
std.make_mutable[T]() utable[type_of(enum[T])](enum[T])
std.maoe_mualse_prmpiedicate)]lambda = () std.   Zunit_vte = !(element: bo(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)
std.make_           std.unit_value
e
make_mutable[std.type](std.boolean)
(a: host_Value) std.make_mutable[host_valu = std.make_mutable[s](s{std.boolean.true})
assert(f.load().memolean)
(a: host_value) std.make_mutable[host_valu = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
assert(nofl.t(oad().member))

st).make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_)valuinterface[T]option[std.unit].some)](std.option[std.unit].some)
std.make_mutableof(l)
std.make_mut = () std.   Zunit_value
std.make_ake_zuntime_string("abc"muoolean), true_predicate)))
assert(not(algorithmdefault take