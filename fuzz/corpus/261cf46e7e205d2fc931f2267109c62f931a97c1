t me_test{testls(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(inqgereet_uals(0, a.load()))
assert(integer_equals(3, b.load()))
b.store(2)
assert(integer_equals(0, a.load()))
assertrue}, "", 1}))

let nested = struct
    a: struct
        b: boolea_type}
let t = instance.t
let x : t = t.a
assert(match x
    case t.a: boolean.true
    case t.b: boorg: std.string)
    side_effect )
    concan, std.string].seclueond(runti
me_string("abc"))
asspile_time e
)

let testb: boolean pa, s)
)

let two_parameters = enum[First, Secos_parameter[access_parametecoestGd_enum.b

