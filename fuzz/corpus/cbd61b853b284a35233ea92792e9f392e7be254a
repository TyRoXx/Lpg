let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.un  	  assert(boolean.false)
assert(integer_equals(1, alwa rt(integer_equals(1, d))
f(boolean.true, "abc"rt(integer_equals(0, element))
algorithm.enumerate[type_of(hari_a)

let true_pred icate = (element: boolean): bt

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

letunr time = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable1 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(string_equals("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.true)))
assert(string_equals("false", pure(boolean.false)))

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(booleanR
 VV]
assert(string_equals("false", runtime(boolean.false)))

let a    case boolean.false: "false"
    other_method()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(string_equals("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.true)))
assert(string_equals("false", pure(boolean.false)))
.printtest_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 for std.str     std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_v:alue

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
 oolean, optio       std.unit_value

asserimpl = ()
    side_effect()
    ()
 n.some(2)
           assert(strb, 1ing_equals("test", compile_time_impl.method(b