l   ) (TT)]([T]() T)
std.make_mutf(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
ste[type_of(l)
_mut        e_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
= fe_mutable[type_of(enum[T])](enum[T])
= f.loadable[type_of(l))
std.make_mutable[ttype_of(enum[T])](enum[T])
=kead)](f.load)
let lambda = () std.unit_value!std.make_ake_runtisme                  ng("abc"mutable[type_of(lambda)]))[T])
std.maon[std.)