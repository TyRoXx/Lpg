ake_runtime_string("abc".a("def")t state) c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (;rg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let paarg: bistate)
    arg
assert(match pass_bistate(bistate.a   case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: ue
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bi!tate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", matctate(tristate.b)
    case tribistate = enum
    a
    b
let p case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(e
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(mastate.a: boolean.false
    case tristate.b: boolean.trulet bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a   case monostate.a: boolean,true
)

let bista7te = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: ue
)

let bistate = enum
= enum
    a
    b
loolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boole    an.tru return^statHful_enum()
 tate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate =             