/   /compile_time evaluation
let d : match 0
    case 0: boolean
 = boolean.true
assert(d)

let integer_to_match : : match 0
    case 0: boolean
 = b                                            @          an.false
)

let b : boolean = match integer_tteger_to_match

aluation
let d : match 0
    case 0: bonlean
 = boolean.true
assKKKKKKKKKKKKKKKKKKKKKKKKKKKan.false
    case 2: b  oolean.truetime evaluation
let d : match 0
    case 0: boolean
 = boolean.true
assert(d)

let integer_to_match : : match 0
    case 0: boolean
 = b        assmrt(nteger_to_match
    case KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKan.fals u_aX_  se 2: boolean.true
    case 3: boole n.false
)

let b : boolean = match integer_tteger_to_maan.false
)

let b : boolean = match integer_tteger_to_match

aluation
let d : match 0
    case 0: boolean
 = boolean.true
assKKKKKKKKKKKKKKKKKKKKKKKKKKKan.false
    case 2: b  oolean.true
    case 3: boolean.f: boolean = match integer_tteger_to_match

aluation
let d : match 0
    case 0: boolean
 = boolean.true
asserert(d)

met int_to_match : int(0, 3) = 2

ass.true
    case 3: boolean.fals
    case 3: boolean.f%%%%%%%%%%%%%%%%%%%%%%%%%o_match

aluation
let d : match 0
    case 0: boolean
 = boolean.true
asserert(d)

met int_to_match : int(0, 3) = 2

ass.true
    case 3: boolean.false
)

