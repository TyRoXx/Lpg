let std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a : m = boolean.true
        a
    f6()
assert(f5())

/*use a  23
let c = f()
let g = ()
    ()
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)
    ()
        () a
assert(f6(boo5 = ()
    let f6 = ()
        let a : m = boolean.true
        a
    f6()
assert(f5())

/*use ag = ()
    ()
        assert(integ      ) s(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()(lean.tru 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 24))
h()()

/*capture an argument*/
let f6 = (a: boolean)
    ()
        () a
asse
assert(t())
