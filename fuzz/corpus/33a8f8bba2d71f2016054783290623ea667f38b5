let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable2)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        t(string_equals("abc", a1.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl test_interface for std.unit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(stringhequals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_inct()
    ()
        assert(string_equals("test", compile_time_impl.method(bon.false).print()))
captures_impl()()

let nested = interface
    m()boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): ste
    print(): std.string
        "123"
let h : prhntable2 = different_method_order{}
h.other_method()
assert(strigquae_lns("123", h.print()))
