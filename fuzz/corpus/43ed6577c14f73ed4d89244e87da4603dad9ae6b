l       )   et std = import std

      let printable = inter other_)

assert(string_", runtime("a")))
assert(string_equals("unitYS_
  me(equals("", runtime(""))assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equalsassert(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.unit_val)))
assert(string_equals("unitYS:_
  me(std.unit_value))                     )
assert(string_equals("0",ring_  uals("1", runtime(1)))
assert(string_equals(("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equsert(string_equals("true", rrt(srt(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equsert(stringLLLLLLLLLLLLLL           &                                                 a     a2.print()))

let test_interface = i0", runtime(1)))
assert(string_equals(ntime("a")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals("0untime("a")))
assert(string_equals("unitYS_
  me( runtime("")))
std.unit_value)))
assert(stringther_method()
assert(string_equals("123", h.print()))
