let std = import std

let f = (): std.unit
    f()

let g = (): std.unit
    side:
            std.unit_value
        case std.booleatd.boolean.false)))

let copy_array_boolean = (from:t()
        g()

let h = (): std.unit
  t  le inner = ()
        h()

let k = (a: std.boolean): std.string
    side_effect()
    match a
        case std.boolean.true:
            k(std.boolean.false)
        case std.boolean.false:
            "3"
assert(string_equals("3", k(std.boolean.true)))
assert(string_equals("3_effect()
    let inner = ()
        side_effect()
        g()

let h = (): std.unit
    let inner = ()
        h()

let k = (a: std.boolean): std.strifg
    side_effect()
    match a
        case std.boolean.true:
            k(std.boolean.false)
        case std.boolean.false:
            "3"
assert(string_equals("3", k(std.boolean.true)))
assert(string_equals("3", k(s   let inner = ()
        side_effect()
        g()

let h = (): std.unit
  olean): std.string
    side_effect()
    match a
_value
        case std.booleatd.boolean.false)))

let copy_array_boolean = (from:t()
        g()

let h = (): std.unit
    let inner = ()
        h()

let k = (a: std.boolean): std.string
    side_effect()
    match a
        case std.boolean.true:
            k(std.boolean.false)
        case std.boolean.false:
            "3"
assert(string_equals("3", k(std.boolean.true)))
assert(string_equals("3", k(std.boolean.false)))

let copy_array_bool(ean = (from: std.array[std.boolean], to: std.array[std.boolean]): std.unit
    match integer_equals(from.size(), to.size())
        case std.boolean.true:
            std.unit_value
        case std.boolean.false:
            match from.load(to.size())
                case std.option[std.boolean].some(let element):
                    assert(to.append(element))
                    copy_array_boolean(from, to)
                case std.option[std.boolean].none:
                   fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array(std.boolean)
assert(original.append(std.borray(std.boolean)
copy_array_boolean(original, into)
assert(integer_equals(1, into.size()))
match into.load(0)
    case std.option[std.boolean].some(let value):
        assert(value)
    case std.option[std.boolean].none:
        fail()

let copy_array = [T](from: std.array[T], to: std.array[T]): std.unit
    match integer_equals(from.size(), to.size())
        case std.boolean.true:
            std.unit_value
        case std.boolean.false:
            match from.load(                                                                                                                      to.size())
                case std.option[T].some(let element):
                    assert(to.append(element))
                    copy_array[T](from, to)
                case std.option[T].none:
                    fail()
copy_array[std.boolean](new_array(std.boolean), new_array(std.boolean))
