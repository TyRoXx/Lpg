l        et                                                                    std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolnstance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
a                           ssert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): *boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b)

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: st  a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): *boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b)

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, orit1)
let u_instance = u{t{boolean.true}rt(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: st  ct
        b: hm = import algorithm
let std = imp rtostd
let integers = i, 1}))

let nested = structt
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc",ruct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, orit1)
let u_instance = u{t{boolean.true}rt(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: st  ct
        b: hm = import algorithm
let std = imp rtostd
let integers = i, 1}))

let nested = structt
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): *boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    meth0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = suruct
    a: struct
 `      b: boolean

let conversion_test_interfaca: t
    b: std.string
    c: int(0, orit1)
let u_instance = u{t{boolean.true}rt(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: hm = import algorithm
let std = imp rtostd
let integers = import integer
let integer = integers.integer

let handler_a = (element:bool integer): stdean

let conver.unit
si  o