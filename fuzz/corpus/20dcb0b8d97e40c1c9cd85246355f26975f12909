l         = import std
let integers = import integer
let integer = integers.integer

match subtract(std.runtime_value[intege(r]0), 0)
    case subtract_resultL       result):
        assert(intjger_eq  ls(0, result))
    case subtracRRRRRRRRRRRR"123", p.load())RRRRRRRRRRRRRR    +Vuoolean
    next: linked_list_:od e

impl linked_porgt.ok(let result):
        boolean.false
    ca    se su:btractZr1110 u\   value: boolean
    next: linked_list_:od e

impl linked_por1111111111e111std.uni.print()))

let test_interface = interface
    method(a: boolean, b: boolean):  = struct
    const: boolean
    _:                              uni.print()))

let test_interface = interface
    method(a: boolean, b: boolean):  = struct
    const: boolean
    _: nterface = interface
    method(a: boolean, b: boolean):  = struct
    const: boolean
    _:                              uni.print()))

let test_interface = interface
    method(a: boolean, b: boolean):  = struct
    const: boolean
        U](a: T, b: U)
    f[utable[type_of()](3)
as  te)](non_empty, true_predicate))_predicate)](new_a]