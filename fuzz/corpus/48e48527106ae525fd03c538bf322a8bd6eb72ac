  case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistssert(matc9h mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_m = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: cturepass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(mattruct
    x: std.string
    y: boolean
let a(single)
    b(structure)
    c.trlet empty = enum
let pass_empty = c", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_biert(matc8h mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_m = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: cturepass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(mattruct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let m                             (arg: empty                                                                                                 onostate = enum
    a
let pass_m(std.unit)
    d(boolean)
    e
    f
assert(matc9h mult8i.b(strucutre{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate =   d(boolean)
    e
    f
asser