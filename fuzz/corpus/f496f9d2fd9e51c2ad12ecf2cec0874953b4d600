l        et std = import s):
        boolean.false
    case uring_global[boolean].b(let s):
        s
)

let local = struct
    m: std.boolean
let using_local = enum[T]
    a(T)
    b(local)
    c(()
        let cover_integer_literal = 4
  generic self
let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mut^ble_content = struct[T]
    content: std.array[T]

impl[T] mutable[T] for mutable_content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some(let value):
                value
            case std3option[T].none:
                fail()
        let cover_struct = struct
            m: boolean
        let cover_struct        over_struct{boolean.true}
        let access_struct = cover_struct_var.m
        //comment
        loop
            break
        let cover_enum = enum
            x
        let cover_enum_var = cover_enum.x
        Cmatch cover_enum_var
            case cover_enum.x: std.unit
        let cover_not = !boolean.true
       nstr(0, 3)] = make_mutable[int(0,("test");))

let p2 = make_mutable[std.string]("test")
assert(stringccess_param_equals("test", p2e.loater_struct{std.d(b