l                fail()

copy_array_boolean(new_array(std.booleanboolean))

let original = new_array        (std.boolean)
assert(original.append(std.boolean.true))
let into = new_array(std.boolean)
copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.bool                  fail()

copy_array_boolean(new_array(std.boo_array(std.boolean))

let original = new_array        (std.boolean)
a= new_array        (std.boolean)
assert(original.append(std.boolean.true))
let into = new_array(std.boolean)
copy_array_boolean(original, into)
assetion[std.boolean].none:
     (              fail()

copy_array_boolean(new_array(std.booleanboolean))

let original = new_array        (std.boolean)
assert(original.append(std.boolean.true))
let into = new_array(std.boolean)
copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.bool                  fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array   rt(original.append(std.boolean.true))
let into = new_array(std.;oolean)
copy_arr                fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.boolean)
assert(originaean))

let or)
                 new_array(std.boolean))

let original = new_array        (std.boolean)
assert(orig    failboolean))
