runtime_string = (value: std.string)
    side_effect()
    concat("", value)
assert(test_single(single.a(make_runt)
    d(boolean)
    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
        side_effect()
        string_equals("abc", state.x)
    case multi.c(let state): boolean.ufalse
    case multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multq.f: bnit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): std.unit
    do(): std.unit
    00000000000000000000000000000000000double():se multilse(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit
    if(): std.unit
    inline(): std.unit
    int(): nue(): std.unit
    default(): std.unit
    dlet s = prinrue, std.bo                                                           em
 ea        