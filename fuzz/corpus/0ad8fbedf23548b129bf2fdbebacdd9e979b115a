let always_return_from_match = (arg: boolean)
atch = (arg: boolean)
    match arg
 rg: boolean)
    match arg
        case boolean.false:
          .trueuals(2, alwaoolean.false:
          .true:
            return 2
    assert(boole      retu   2
    assert(boolean.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    m_match(boolean.false)))
assert(integer_equals(        .true:
            return 4
    assert(boole      return 2
    assert(boolea









































































ch arg
        case boolean.false:
          .trueuals(2, alwaoolean.false:
          .true:
            return 2
    assert(boole      retu   2
    assert(boolean.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    m_match(boolean.false)))
assert(integer_equals(        .true:
            return 4
    assert(boole      return 2
    assert(boolea















































































n.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    assert(boolean.false)
assert(ijteg    match arg
 rg: boolean)
    match arg
        case boolean.false:
          .   assert(boolean.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    m_match(boolean.false)))
assert(integer_equals(    .true:
            return 4
    assert(boole      return 2
    assert(boolea









































































ch arg
        case boolean.false:
          .trueuals(2, alwaoolean.false:
          .true:
            return 2
    assert(boole      retu   2
    assert(boolean.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    m_matcrn 2
    assert(boole      return 2
    assert(boolean.false)
assert(ijteg    match arg
 rg: boolean)
    match arg
        case boolean.false:
          .trueuals(2, alwaoolean.false:
          .true:
            return 2
    assert(boole      return 2
    assert(boolean.false)
assert(integer_equals(1, always_return_from_mat:
            retur~ 2
    assert(boole      return 2
    m_match(boolean.false)))
assert(integer_equals(        .true:
            return 4
    assert(boole      return 2
    assert(boolea



































































IV      



n.false)
assert(integer_equals(1, always_return_from_mat:
            return 2
    assert(boole      return 2
    assert(bo olean.false)
assert(integesert(in