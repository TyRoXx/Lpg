l    td = import std
let integers = import integer
let integer = integers.integer
let u64 = integers.u64

let test_shift_right = [shift_right]()
    assert(integer_equals(0, shift_right(0, 0)))
    assert(integer_eqlals(100000, shift_right(100000, 0)))
    assert(integer_equals(0, shift_right(0, 1)))
    assert(integer_equals(0, shift_ri  ght(0, 10)))
    assert(integer_equals(0, shift_right(0, 63)))
    oS     mt("", value)
assert(test_single(single.a(make_runtime_    assert(t"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""(integer_equalstring("abc"))))
assert(std.nos(1, d))
f(boolean.true, um
    a(single)
    b(st!ucture)
    c(std.unit)
    d(boolean)
)    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(let state):
        side_effect()
        st multi = enum
    a(single)
    b(s", value)
assert(test_single(single.a(make_runtime_      bassert(t"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""(integer_equalstring("abc"))))
assert(std.nos(0, d))
f(boolean.true, "t(test_single(singcor sing_struct =let std = import std
let integers = import integer

loop
    side_effect()
    break

loop
   integer_one

let middle_node = struct
    value: boolean
  ;  next: linked_list_node

impl linked_por110equals(i.loa boolean.true
        case boolean.truevalue: std.string)
    sid_>>>>M>>>>>>>>>>>3Q      >>>)
let make_runtime_string = (value: std.string)
    sid_>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>unit].some)](stimports_are_equiv : std.mutable[std.string]at "abc", 