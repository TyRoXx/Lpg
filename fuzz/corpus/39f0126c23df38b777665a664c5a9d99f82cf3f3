  case "aruennnnn
    case boolean.true:
        side_effect()
        boolean.true
    case boolean.false: boolean.false
)

assert(match booleanstd

let string = std.string

let array_type = std.array[string]
let a : array_type = new_array(string)
assert(integer_equals(0, a.size()))
assert(not(a.store(0, "")))
assert(not(a.store(1, "")))
assert(not(a.store(2, "")))

assert(match a.load(0)
    case std.o3       .not(test_single(single.a("def"))))

assert(strins("abc", match return_stateful_enum()
    case single.a(single.a("def"))))

assert(string_equals("abc", match single.a(make sinbistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = ena(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
as        sert(match pass_tristattate.c: boolean.false
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = enum
 )))
assert(string(equals(",l" runtime(boolean.fal6e", h.   W WVV))))sseret integlettd = import std
let string = std.striWt)
es(",l" runtime(boolean.fals061e", h.   WVV))))sseret integlet std = import std

le              std.artate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.falae
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enu u__  a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
abc", match return_stach ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enu u__  a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match retuger_literal = 1ver_;truct = struct
       
assert(m)))))"abc"
        let cover_struct = struct
       
oolean
        let cover_struct_vin:glet a = single_parameter[boolean].a(boolean.true)t cover_integer_literOal = 1ver_;truct = struct
       
assert(match a
    case s     m)))))))))))))))))))))))))))))))istate(bistate.a)
    casetate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = ena(let state ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolead.nit], maeu_knem[atch pass_bistaquals("abc", match return_staulti = enum
    a(sich pass_bistaquals("abc", .none: boolean.false
)

assert(aet u2 : i = gs[int(0,ert(match a.load(0)
    case std.option[s

impl p        rintable2 for std bool
)

let tristate = enum
    a
      case tristate.c: boolean.fals(
istean(not(        s"\n"
  thmab