let sters[boolean, std.string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:   std.unit
        let cd = import std

let single_parameter = enum[T]
    a((T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[bo      < olean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parameter[std.string].a(runtime_string("abc")m[T]
    a(T)
    b(boolean)
asse                                       rt(match using_global[boolean].b(boolean.true)
    case using_global[boolean].a(let s):
        boolean.flet s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcovt)
    second(Second)

let c = two_parameters[boolean, std.string].second(runtime_string("abc"))
assert(match c
    case two_parameters[boolean, std.string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:   std.unit
        let cover_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
    ing_local[boolean].b(let s):
        s.m
    case using_local[bolelet s): s
        local
())
assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boolean.false
    case two_parame, s)
)

let using_global = enum[T]
    a(T)
                                                                               b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
 cover_interface = interface
            m(): boolean
        impl cover_interface for booleacover_instantiation = single_parameter[boolean].a(boolean.true)
        match cover_instantiation
            case single_parameter[boolean].a(let s): s
        local
())
assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:   std.enit
        let cover_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
            m(): bon
            m(): boolean
                solean].c(let s):
        boolean.false
)

let access_parameter = enum[Struc   t]
    e(Struct.element)
let access_parameter_struct = struct
    element: std.type
let x = access_parameter[access_parameter_struct{std.boolean}].e(std.boolean.true)
