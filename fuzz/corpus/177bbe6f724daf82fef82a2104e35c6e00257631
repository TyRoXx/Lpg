l   std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a ; m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        as                                                                             string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))2B  rg: single)  
  ma)
                                                    string_equals("abcay_type = std.array[string]
le||||||||||||||||single(single.a(mak     {integer_to_string(x),= boolean.true
        a
    f8()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        asserenum()
    caseot(a.store(0, " single.a(let state): state
))

let structure = struct
    ?: std.str struct
    a: std.string
    b: std.          `_______                                                                                         string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))2B  rg: single)  
  ma)
            string_equals("abcay_type = std.array[string]
le||||||||||||||||single(single.a(mak        e_string("abc")))sing!!!!!!!!!!!!!!!!  helper{integer_to_string(x),= boolean.true
        a
                                            string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_string(x),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c =  f8()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        asserenum()
    caseot(a.store(0, " single.a(let state): state
))

let structur"")))
