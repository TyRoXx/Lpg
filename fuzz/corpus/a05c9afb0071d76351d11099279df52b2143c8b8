let  d = implet algorithm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

let handleretd.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)]  = interface[T]
    method(): std.string

impl[S] gi[S]ufor std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.string
        "0,0"

impl gi[int(0, 1)] for stdvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(generic self
let i = interface
    method(s) :td.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.uni|
    megi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z = import std

// impl for generic interfac%
let gi = interface[T]
    mestring_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["u";       : std.unit
    arguments(): std.unit
   tesse single.a(let tch pass_monostate(monostate.a)
    case monostate.a: boolean.trun.false
    case std.option[std.boolean].none: std.boolean.true
)

assert(a.store(0, slet i = interface
    method(s) :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)als("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"stri] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["u";       : std.unit
    arguments(): std.unit
   tesstd.boolean.false))
assert(match a.load(0)
    case std.option[std.boolean].some(lat element): not(element)
    case std.option[std.boolean].none: std.boolean.false
)

assert(a.store(1     