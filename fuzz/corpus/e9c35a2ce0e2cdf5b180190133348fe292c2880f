d      <3H[      ion[string].some(let element): string_equals(element, "456")
    case std.option[string].noner once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nested_enum.k

llt unit_as_state = enum
    a(std.unit)
let x = usn.true
let conversion_test = struct
    i: conversion_test_interface

let conversion {std.uni", stat\@)
let make    side_effect()
    concat("", &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&vaboolean.falsnum
    a(std.unit)
nversion_testRinf: boolean.falsnum
    a(std.unit)
nversion_te*t = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.make_mutable[type_of(struct[T])](str{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.option[std.un
std.tmake_mutabl