let std = import std

let single_parameter = enum[T]
    a((T)

let a = single_parameter[boolean].a(booltion.none)))
assert(not(g(option.some(344))))

let f = (argA option)
    h arg
        case option.none:
            sserts("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(g_global[bcovt)
    seco\\\\\\\\\\\\\\\(not(f(option.none)))
assert(not(f(option.some(124\\let single_parameter = enum[T]
    a((T)

l enum[First, Second]
    first(First)
    second(g_global[bcovt)
    seco\\\\\\\\\\\\\\\(not(f(option.none)))
assert(not(f(option.some(124\\)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)\ cer_interface = interface
 ) \\\\\\\\\\\\\\\\\\\\\\)\ cover_interface = interface
 )  