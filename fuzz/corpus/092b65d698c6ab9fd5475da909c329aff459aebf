let sdt = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explic                   return boolype())

let match_return_explicit_type = (arg: boolean): std.string
    matcatch_returl_explicit_type(boolean.true)))

let match_return_implicit_type = (arg: boolean)
    match arg
        case boolean:
            return 1
        case boolean.true:
            return 666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666662
assea"
        case            boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_explicit_type(bollean.true)))

let match_return_i  licit_type = (arg: boolean)
    match arg
        case boolean:
            return 0
        case boolean.true:
            return 666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666662
asse): test_interface
    side_effect()
    return arg
assert(return_interface("abc").m())
