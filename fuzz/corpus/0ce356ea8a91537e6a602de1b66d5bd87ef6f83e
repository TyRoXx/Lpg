let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let statentime_string = (value: std.string)
    side_effect()
    concat("", value)
assert(test_single(single.a(make_runtime_str(ile time*/
let f6 = (a: boolean, b: boolean)
    let indirection = () a
_string("abc"))))
as3       .not(testing("abc"))))
assert(std.not(test_single(single.a("def"))))

assert(string_equals("let a = .
abc", match single.a(make single.a(make_runtime_string("abc"))
assert(string_eq]]_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolea*)
    e
    f
assert(match mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(matchlet std = import std
let integers = ]]]]]]]uals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structuimport integer
let integer = integers.integer
let u64 = integers.u64

let test_not = [not]()
    let max = 18446744073709551615
    assert(integer_equals(max, not(0)))
    assert(integer_equalre)
    c(std.unit)
    d(boolean)
    e
    f
assert(match multi.b(structure{s(18446744073709551614, not(1)))
    *ssert(integer_equals(0, not(max)))
    assert(integer_"abc", boolean.true})
    case multi.a(let state): boolean.false
    case multi.b(le