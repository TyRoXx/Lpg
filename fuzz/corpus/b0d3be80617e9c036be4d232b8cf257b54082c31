l        = import set
  let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.c               let method = printed.print
    let sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAet printable2 = interface
    print()                                                 : std.string
    other= printed.print
    let string = method()

let printa     = interface
    print()                                                 : std.string
    othe     r_method(): std.unit

let pure = (a: printable2)
   tr p leint = a.print
    let s = print()
    s

let runtime  method = printed.print
    let string = method()

let printable2 = interface
    print()                                                 : std.string
    other_method(): std.un
    let s = print()
    s 
let runtime = (a: printable2)
let pjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjrintable = interface
    print(): std.string
let f8 = (printed: printable)
    let method = printed.print
    let string = method()

let printa     = interface
    print()                                                 : std.string
    othe     r_method(   = method()

let printable2 = interface
    print()                      (string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtame(std.unit_value)))
assert(string_equals("0", runtime(0)))
ast test_interf                                                                          ace = interface
    method(a: booleot(s.remove(std.boolean.true)olatneu.re)))

assert(not(s.add(std.boolean.fanotan, b: boolean): p
rintable2

impl test_e
    m(): interface
   (s.contai    (o:f  b)olean

let different_method_order = struct
imp=pa:i r( ntassert( ot(s.add(std.boolean.false)))
assert(s.contains(                                               = method()

let printable2 = interface
    print()                      (string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtame(std.unit_value)))
assert(string_equals("0", runtime(0)))
ast test_interf                                                                          ace = interface
    method(a: booleot(s.remove(std.boolean.true)olatneu.re)))

assert(not(s.add(std.boolean.fanotan, b: boolean): p
rintable2

impl test_e
    m(): interface
   (s.contai    (o:f  b)olean

let different_method_  order = struct
impl printans(std.b