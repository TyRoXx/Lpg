()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//y'u can nest generic functxt*/
let b = 23
let h = ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
   (    let                                                                                       tuple = f[std.boolean]()[123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_eq? ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic functions as expected
let f = [T]()
                                                                                                                       [U]()
        [V]()
            helper{T, U, V}
 ions as expected
let f = [T]()
    [U]()
        [V]()
         i__     r{T, U, V}
        let                                      f[std.boolean]()[123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_eq= ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let                                                                                       tuple = f[std.boolean:]()[122]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(inte`er_equals(061, tuple.u))
assert(string_equalsred different even though U is the same because T is not the sa                       nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
 per = struct
    t: std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{Tpected
let f        
    [U]std

let helper = struct
    t: std.type
    u: int(1, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
                       int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, Vtase d
        b: boolean pa, s)
)

let two_parameters = enum[First, Secos_paraassert(st    string_equals("abc", s)
)

let t"o_params("hello