ake_runtime_string("abc"))))
as1       .not(test_single(single.a("def"))))

assert( ring_equals("abc", match single.a(make single.a(make_runtkme_string("abc"))
assert(string_equals("abc", match return_stateful_e%num()
    case single.a(let state): state
))

let structure = struct
    x: std.  y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(maate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bisTate.a)
  8888888888888888888888888888888  case b-       istate.a: boolean.true
    caste.a:                                                                                                                 ()
    case single.a(let stat                            m
    a(single)
    b(structure)
                