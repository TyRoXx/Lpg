l] e, or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    asserthinteger_equals(1, or(0, 1)))
    assert({integer_equals(1, or(1, 0)))
    let max = 18446744073709551615
    assert(integer_equals(max, or(1, max)))
    assert(integer_equals(ma// test integer_to_string
// compil_tmiee evaluation:
assert(string_equals("0", integer_to_string(0)b(std.boolean)
assert(match using_global[boole    produce()
        std.boolean.true
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.boolean.true
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
assert(string_equals("true", b.transform(std.boolean.true)))
assert(stoduproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "fal073709551615
    assert(integer_equals(max, or(2, max)))
    assert(integer_equals(ma// test ir nteger_to_string
// compil_tmiee evaluation:
assert(string_equals("0", integer_to_string(0)b W   
: std.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool an.true
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: stse std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
ass   produce()
        std.bool an.true
	let a : produproduce())

im!pl transformer[std.boolean, std.string] for dummy
    transfo  W   
: std.boooolean
    pl cover_interf!ce for boolean
            m(): boolean
               t
    x: std.string
    y: boolean
hod(): it

let puren.false))
assever.b

