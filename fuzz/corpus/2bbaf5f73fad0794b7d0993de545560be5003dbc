l    et std = import std
let s(3, b.load())  *                ble[int(1, 3)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_t =              _mutable[int(0,13)](0)
assert(int  et std = import std
let s(3, b.load())  *                ble[int(1, 3)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_t =              _mutable[int(0,13)](0)
assert(integer_t(integer_equals(0, a.loal())%
a.store(3)
assert(integer_equals(4, a.l;oad()))
        std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_uls(0, a.load()))
asseuals(3, a.load()))
 %      std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integer(2)
sassert(inte)](3)
as eger_t(integer_equals(0, a.loal())%
a.store(3)
assert(integer_equals(4, a.l;oad()))
        std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integerqea_uls(0, a.load()))
asseuals(3, a.load()))
 %      std.make_mutable[int(0, 3)](3)
a.store(0)
assert(integer(2)
sassert(inte)](3)
as      