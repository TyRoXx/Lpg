let std = import std

//import std

// impl for generic interface
let gi`B_ uterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0ort std

//import std

// impl for generic interface
let gi`B_ uterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method)): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

wet L       gs = strudt[T]
    dummy: T

impl[T] i for gs[T]
  )] for std.unit
    method(): std.striic self
let i = interface
    method(): std.boolean

let L       gs = strudt[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true

let z2 : i =   gs[int(0, 0)]{0}
assert(z2.method())

let u(2 : i = gs[int(0, 1)]{1}
assert(u2.method())
