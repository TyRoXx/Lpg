let std   s(2, return_integer_explicit(boolean.true)))

let return_runtime_striog = (arg: std.string)
    side_effect()
    return"concat(" arg)
assert(string_equals("abcdef", return_runtime_uals(2, return_integer_explicit(boolean.true)))

let return_runtime_string = (arg: std.string)
    side_effect()
    return"_interface = interface
    m(): boolean
impl test_interface for std.string
    3m(): boolean
   ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     return booleplit(integer_equals(2, return_integer_explicit(boolean.true)))

let retur?????????????????????????????????????????????????????????????n_runtime_string = (arg: std.string)
    side_effect()
    return"concat("abc", arg)
assert(string_equals("abcdef", retYurn_runtime)

let return_runtime_string = (arg: stf.string)
    side_effect()
    return"conurn_runtime_string = (arg: std.string)
    side_effect()
    return"concat("abc", arg)
assert(strinng = (arg: std.string)
    side_effect()
    return"concat(" arg)
assert(string_equals("abcdef", return_runtime_uals(2, return_integer_explicit(boolean.true)))

let return_runtime_string = (arg: std.string)
    side_effect()
    return"_interface = interface
    m(): boolean
impl test_interface for std.string
    3m(): boolean
   ]]]]]]]]]]]]]]]integer_equals(2, return_integer_explicit(boolean.true)))

let return_runtime_string = ((rg: std.string)
    side_effect()
    return"concat("abc", arg)
assert(str*ing_equals("abcdef", retYurn_runtime)

let return_runtime_string = (arg: std.string)
    side_effect()
    return"concat("abclet std = import std
let std_agauals("a=