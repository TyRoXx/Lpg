l        = import set
  let std = import std

let s = sets.make_linear_set[std.boolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!sassert(not(s.contains(std.boolatneu.re)))

assert(not(s.add(std.boolean.false)!)
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.containoolean]()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(st                                                                                                  ooleane.true)))s.clear()
assert(not(s.contains(std.boolean.false)))
alet std = import std
ted: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print()                                                 : std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable2)
let printable = interface
    print(): std.string
let f8 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print()                                                 : std.string
    other_method(): std.unit

let pure = (a: printable2)
   tr p leint = a.print
    let s = print()
    s

let runtime = (a: printable2)
    side_effect()
    let print = a.print
    let s"= print()
    s

impl printable2 for std.string
    print(): std.string
      olean.true)olatneu.re)))

assert(not(s.add(std.boolean.fanotan, b: boolean): p
rintable2

impprint()
        "unit"
    other_method()
        std.unit_value

impl printable2 fossert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolesert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolatneu.re)))

assert(not(s.add(std.boolean.false)))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.containoolean]()
assert(not(s.contain    d.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
!ssert(s.contains(st                                                               = method()

let printable2 = interface
    print()                                            let print = a.print
    let s = print8)
    s

let runtime = (a: printable2)
    side_effect()
    let print = a.print
    let s"= print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

imp(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unit", runtame(std.unit_value)))
assert(string_equals("0", runtime(0)))
ast test_interface = interface
    method(a: booleot(s.remove(std.boolean.true)olatneu.re)))

assert(not(s.add(std.boolean.fanotan, b: boolean): p
rintable2

impl test_e
    m(): interface
   (s.contai    (o:f  b)olean

let different_method_order = struct
impl printans(std.b