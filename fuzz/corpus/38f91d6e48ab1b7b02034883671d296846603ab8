l         Z s):
als("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.
 
impl[S] gi[S] for std.unit
    method(): std.strin 
   m    S

impl gi[int(0, 0)] for std.unit
    method(): std.strinOals("u", u.method()))

// impl for gene
impl[T] i for gs[T]
    met nterface[T]
olean

lestring
 
impl[S] gi[S] for std.unit
    method(): std.strin 
   m    S

impl gi[int(0, 0)] for std.unit
    method(): std.strinOals("u", u.method()))

// impl for gene
impl[T] i for gs[T]
    met nterface[T]
olean

let L        gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(    methoterface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.strin 
   m    S

impl gi[int(0< 0)] for std.unit
    method(): std.strinOals("u", u.method()bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb))

// impl for pene
impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] formmy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(3, 0)] for std = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true 
let z2 : i = g [ir std.unit
    method(): std.strinal   b)
    b
let n = nestGd_enum.bp
