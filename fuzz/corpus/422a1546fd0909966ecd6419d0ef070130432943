let std = import std
let std_again = import let .e))

lettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = import std

let oolean.true)ssert( d = import std

let oolean.true))

dettable[type_of(enum[T])](enum[T])
std.make_mutable[std.string](als(3, a.load()))
mport std
let std_again = import let . d = import std

let oolead = import std
let std_again = import let . d = import std

let oolean.true))

lettable[type_ std
let std_again = import let . d = imporVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVt std

let oolean.true)ssert(integer_equals(3, a.load()))
mport std
let n = import let . d = import std

let oolean.true))

let other_argument = f[int(1, 3h = [T, U](a:of(enum[T])](enum[T])
std.make_mutable[std.string]("0, 3)](3S )
a.store(0)
assert(intege               