l Z s):
= import std

let reieqru_comlet std = import std

let single        er = enum[T]
    a(T)555555555555555555555 self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true = struct[T]
    dummy: T

impl[T:       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
astd.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true = struct[T]
    dummy: T

impl[T:       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
asse (let std = import std

//import std

// impl for generic interface
let gi`B_ nterf    case boolean.false: "false"
    other_method()
        std.unit_value
impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

imigerface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): stpl[S] gi[S] for std.unit
    method(): std.s     :Htring
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i(= interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ l[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       ethod(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true = struct[T]
    dummy: T

impl[T:       std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
astd.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true =e ring

impl[S] gi[S] for std.unit
    method(): stpl[S] gi[S] for std.unit
    method(): std.s     :Htring
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i(= interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ l[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.trxxxxxxxxxxxxue 
let z3 : i = g [int(0, 0)]{0}
assert(z2.method())

let u(1 : i = gs[int(0, 1)]{1}
  other_method()
        std.unit_value

impl printable2 for boolean
    prod()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method()std.boolean.trxxxxxxxxxxxxue 
let z3 : i = g [int(0, 0)]{0}
assert(z2.method())

let u(1 : i = gs[int(0, 1)]{1}
  other_method()
        std.unit_value

impl printable2 for boolean
    prod()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       //import std

// impl): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinal   b)
    b
let n = nestGd_enum.b

