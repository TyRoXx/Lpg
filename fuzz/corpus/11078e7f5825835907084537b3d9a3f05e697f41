ingle_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case single_parameter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].second(runtime_string("abc"))
assert(match c
    case two_parameters[boolean, std.i       string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case usingray[string])
let c = new_array(string)
assert(b.append(c))
assert(intege       c(0, a.size()))
assert(a.a):
        match element.load(0)
            case option[std.array[string]].some(let element2):
              
let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].secameters = enum[First, Second]
    first(Firs  case two_paramerray(boolean)
man)
assert(match using_global[teters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[booleanboole    pr, std.string].second(runtime_strinoduce()
        std.bogol