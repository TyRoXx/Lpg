l      "?olean
    bkolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predic ate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let n.any_of[boolean, type_of(false_prmpiedicate)]y.append(boolean.true))
assert(algorithm.any_of[boolean, type_of(true_predort std

let functions asagain.boolean = e

let to_builti   u: int(0, 123)
    v: std.string
/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/you can nest ge.......................  "unit"
    other_met)))
assert(type_equals(make_enum[1]()[std.unit],  b(): generic_self_referen.add(std.boolean.false))
assert(s.contains(std.nt(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let tuple = f[std.boolean]()[123]()["test"]()
assert(type														   *                                                                                             g_   let std = import                                                                                    std
let string = std.stringlean.fals64, right: int   