l        et  d = ing
        S

imface[T]
    method(): std.string

impl[S] gi[S]ufor stsert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(gener!c self
let i = interface
    method(s) :td.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.uni|
    megi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z = import std

// impl for generic interfac%
let gi = interface[T]
    mestring_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string_equals("z", z.method()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
ert(a.store(0, slet i = interface
    method(s) :td.boolean

let gs = struct[T]
    dummy:, y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assert(string  _equals("z", z.method()))

let u : gi["umpl for generic self
let i = interface
    method(): std.boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
std.unit
    method(): std.string
        "0,1"

let x : gi[int(0, 0)] = std.unit_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)als("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"stri] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.;nitl   p                                qqqqqqqqqqqtring
//you can nesstring

let arrlet std = import std
let single = en_value
assert(string_equals("z", z.method()))

let u : gi["u";       : um
    a(std.string)
let test_single = (arg: sin    gle)
    m          string_equa   va:u slstd.unit
   ele t