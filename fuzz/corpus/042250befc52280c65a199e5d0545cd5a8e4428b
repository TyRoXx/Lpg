a  _runtime_string("abc"))))
quals("abc", match single.a(make single.a(make_runtime_string("ab
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostaturn_stateful_enum()
    case single.a(let state): state
))

let sttucture = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: te.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bisatch pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boose
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
e(tristate.b)
    case tristate.a: bool.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult8i.b(structure{"abc", boolean         ate): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(matc9h mud(boolean)
    e
    f
assert(match mult8i.b(structure{"abc"T[boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monosegers.u164, right:         integers.u64): it empty = enum
let pass_empty = (a  E_empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monos.u64
    or_u64(std.runtistate(monostate.a)
   Mu c
teas