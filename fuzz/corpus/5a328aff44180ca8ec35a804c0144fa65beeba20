let std = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_explicit_type(boolean.true)))

let match_return_implicit_type = (arg: boolean)
    match asg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_implicit_type(boolean.true)))

let loop_return_explicit_type = (arg: boolean): boolean
    loop
        return arg
assert(loop_return_explicit_type(boolean.true))

let loop_return_implicit_type = (arg: boolean)
e
let return_interface = (arg: std.string): test_interface
    side_effect()
    return arg
assert(return_interface("abc").m())
