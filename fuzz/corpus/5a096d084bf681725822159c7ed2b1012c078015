let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printablelstate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.false
)
assert(match pass_tristate(trista                                                                                   ass//just a comments("abc", matc    "\""                                                            let a = new_array(std.array[std.art option = std.option

let runtime = (arg: std.boolean)
    side_effect()
    option int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value
td.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    casert(boolean.false)
assert(integer_eq  ls(1, alwa rt(integer_equals(1, d))
f(boolean.true, "abc"rt(integer_equals(0, element))
algorithm.enumerate[type_of(har_a)

let true_predicate = (element: boolean): boolean, option.some(2)
    b, 1  arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match
    case tristate.c: boolean.false
)
assert(match pass_tristate(trista                                                                                   assert(string_equals("abc", ma()[std.unit]))
assert(type_equals(make_enum[2]()[std.unit], make_enum[2]()[std  assert(b.append(           c                                                                                                                                                                case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristatase option[std.array[string]].some(let element2):
                assert(c.append("abc"))
         arg
assert(match         match element2.load(pas0)
  s_bistan nest generic funcs = pri  e