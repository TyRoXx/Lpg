lS        import std

/*use a captured varilue: boolean
    next: linked_list_node

impl linked_por000000000000409075040  a runtime context*/
let b = 23
let h = ()
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3
let h = (let s):
= import std

let require_comlet std = import std

let single_parameolean.true, boolea>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtime context*/
let b = 23
let     000000000()
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3
let h = (let s):
= import std

let require_comlet std = import std

let single_parameolean.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    ()
    (let  case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_ing
    p0000409075040  a runtime co>>>>>>>>>>>>>>>>>>>>>>>>3
                   "t409075040  a runtime context*/
let b = 23
let h = ()
    >>>>>>>>>>>>>t = a.print
 le_parameolean.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtime context*/
let b = 23
let h = 000000000()
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3
let h = (let s):
= import std

let requirparameolea        n.tre).print()))  >>>>>>>>>>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtim>>>>>>3
let h = (let s):
= import std

let requirparameolea        n.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtime context*/
let b = 23
let h = 000000000()
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3
let h = (let s):
= import std

let require_comlet std = import std

let single_parameolean.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    ()
    (let  case booleanse).print()))  >>>>>>>>>>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtim>>>>>>3
let h = (let s):
= import std

let requirparameolea        n.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    let prinked_por000000000000409075040  a runtime context*/
let b = 23
let h = 000000000()
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>3
let h = (let s):
= import std

let require_comlet std = import std

let single_parameolean.true, boolean.f)
  alse).print()))  >>>>>>>>>>>>>=

let captures_()
    ()
    (let  case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_ing
    p0000409075040  other_method()
        std.unit_value a

assersimpl = ()
    si