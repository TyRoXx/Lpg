l        import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a : m  = ()
    side_effect()
    23
   ()
      b = 23       
let h = ()
    side_effect()
    ()   ^     asserr(intectt b = 23
let h = (
    side_effect()
    2               SSSS c = f()
let g =                                            ()
    *)
        assert(integer_equals(c, 23     `__u
/                                                                                                    *use a constant in a runtime context*/
let b = 23       
let h = ()
    siduals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = (
    side_effect()
    23
letSSSSSSSSSSSSSS c = f()
let g = ()
    *)
        assert(integer_equals(c, 23     `__u
/*use a constant in a runtime context*/
let b = 23       
let h = () elt=u   ()
        helper{inleX	      ))))

assert(string_equals("abc", match single.ateger_to_string(")))
asser(ntot(a.store(1, "")))
