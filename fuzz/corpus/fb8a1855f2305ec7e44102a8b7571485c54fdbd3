let std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equiv : std.mutable[std.string] = std.make_mutable[std.string]("test")
assert(string_equals("test", p))

let s = struct
    member: std.boolean
let f = st(std.boolean)
()
std.make_mutable[type_of(interface[T])](interface[T])
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].sd)
mtoes.make_muta(integer_eqwals(0, a.loqd()))
assert(integer_equals(2, b.load()))

assert(match std.option[std.unit].some(std.unit_value)
    case std.option[std.unit].some(let s):
        std.boolean.true
    case std.option[std.unit].none:
        s        an.false
)

let u = std.make_mutable[std.unit]d(ts.unit_value)
u.store(u.load())
_mutable[std.string]("test")
std.make_mutable[type_of(lambda)](lambda)
