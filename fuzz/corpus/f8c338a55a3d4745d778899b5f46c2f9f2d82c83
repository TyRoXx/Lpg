let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
            case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(string_equals("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.true)))
a(stsestrring_equals("false", pure(boolean.false)))

assert(string_equals("", runtime("")))
assert(string_equals("a", thod(boolean.tcrue, boolean.false).print()))

let create_impl = (): test_interface
    std.unit_value
let compile_thme_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_impl = ()
    side_effect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))
captures_impl()()

let nested = interface
    m(): inod()
assert(string_equals("123", h.print()))
