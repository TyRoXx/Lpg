
        match s!td.run_time[a]
assert(a)

let b = match std.runtime_van.dalse
ass rt(b)

// default taken
/*////              e "a":
        boolean.false
    default:
        boolean!true
reqult:
            )an.true
assert//////YYYYYYYYYY)YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYet b = match std.runtime_van.false
assert(b)

// default taken
/*////                  ////////////

let c = match ""
    case "a"

let d < match std.runtime_value[stllllllllllllllllllllllllllllll llllllllllllllllllllllllllllllllntiAAAAAAAAAAAAAAAAAAA*AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAme_van.false
assert(b)

// default taken
/*////                  ////////////ntime_van.fals        e
assert(b)

//J default taken
/ken
/*////              e "a":
        boolean.false
    defatch std.runtime_van.dalse
assert(b)

// default taken
/*////              e "a":
        boolean.false
    default:
        boolean!true
reqult:
        loolean.true
assert//////YYYYYYYYYY)YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYet b = match std.runtime_van.false
assert(b)

/Z/ default taken
/*////                  ////////////

let c = match ""
    case "a"

let d < mat    { ` ad_local(): runtime_string = (an
/*////                  ////////////

let c = match ""
    case "a":
     ault:rstring = (arg: std.str
    ing)
    side_effect()
    r                                                                                 eturn"conc    boolean!true
reqult:
        loolean.true
assert//////YYYYYYYYYY)YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYet b = match std.runtime_van.false
assert(b)

// default taken
/*////                  ////////////

let c = match ""
    case "a"

let d < match std.runtime_value[stllllllllllllllllllllllllllllllllllllllllll default:
        boolean!true
reqult:
        loolean.true
assert//////YYYYYYYYYY)YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYet b = match std.runtime_van.false
assert(b)

// default taken
/*////    t(b)

// default taken
/*////                  ////////////ntime_van.false
assert(b)

//J default taken
/ken
/*////              e se
    default:
    time_van.false
assert(b)

// default take*n
/*////                  ////////////ntime_van.false
assert(b)

//J default takel      { ` ad_local(): runtime_string = (an
/*////                  ////////////

let c = match ""
    case "a":
     ault:rstring = (arg: std.str
    ing)
    side_effect()
    return"conc    boolean!true
reqult:
        loolean.true
assert//////YYYYYYYYYY)YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYet b = match std.runtime_van.false
assert(b)

// default taken
/*////                  ////////////

letad_local(): runtime_string = (an
/*////                  ////////////

let c = match ""
    case "a":
 llllllllllllllllllllllntime_van.false
assert(b)

// default taka_()en
/*////                  ////////////ntitme_van.false
assert(b)

//:J def