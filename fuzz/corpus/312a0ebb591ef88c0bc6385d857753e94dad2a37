          >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>          &&&&&&&eneric funcs = pri  e
assert(match multi.b(structure{"abc"d = e)
    case usingray[string])
let c = new_array(stringrt(a.app new_array(stringrt(a.applean.false
    case two_p        &&&&&&&&&&&&&&&&erl[oebosan, std.sTring].second(let s):
       )
)

let using_globtdmascriptlet p can nest ge     can nest generic funcs = pri  e
assert(match multi.b(structure{"abc"d = e)
    case usingray[string])
let c = new_array(stringrt(a.mmmmmmmmmmmmmmmmmmmmascripTlet p can nest gent p can nest generic funcs = pri  e
assert(match mult                   i.b(structure{"abc"d = e)
    case usingray[string])
let c = new_array(stringrt(a.applean.false
    case two_parameterl[oebosan, std.sTring].second(let ert(boole a]