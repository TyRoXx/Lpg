lr     5)et algorithm = import algorithm
let std = imp rtostd
let integers = import integer
let integer = integers.integer

let handler_a = (element: integer): std.unit
    assert(integer_equals(0, element))
algorithm(enumerate[type_of(handlorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm   aslet s.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkckkkkkkkkkkkkkkkk tnothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkckkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate))mpty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_an, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_= edicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.appendtd (boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate))mpty, true_predica= import ssert(booletd

lte))
assert(not(algorithm.any_of[type_of(handlorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[booleet requan, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(no[boolean, type_of(false_predicaainte)](non_empty, .false_predicate)))

let empty = new_array(boolean)
match algorithm.find[bo