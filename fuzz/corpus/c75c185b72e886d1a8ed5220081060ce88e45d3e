let                                                                    std = import std

let s = struct
let s_instance = s                                                              
let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_YYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instan                 std = implet s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg:   a: struct
 `      b: boolean     a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, YYYYYYYYYYYYY: struct
        b: boolean

met conversion_test_interface = interface
    metort std

let s = struct
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))
_   
let f = (arg: u): boolean
    arg.a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = sun.i.method())
