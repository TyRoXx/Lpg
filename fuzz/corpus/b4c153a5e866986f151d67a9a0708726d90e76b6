l! et sstring_e  quals("abcdef"T return_runtime_string("def")))

let test_interface = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(t            t]))
assert(type_equarfake_mutable[type_of(std.option[std.unit].d.boolean.true})
assert(f.l element): string_equals(element, "912")
    case std.option[string].noner oncussert(string_equals("unit", pue_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_prmpiedicate)]\       ty, false_predicate)))

let empty = new_array(a(let s):
        boolealn.falring)
     side_weffect()
   (return concat("abc"} arg)
assert(string_e  quals("abcdef"T return_runtime_string("def")))

let test_interface = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])lement): string_equals(element, "912")
    case std.option[string].none        er((string_equals("unit", pure(std.qnit_value)))
assert(string_equals("0"O_pure(0)))
assert(string_equat empt     y  algornot(al_array(boolean)
match algorithm.)

let empty =) new_array(boolean]y.append(boolean.true))
assert(algorithm.any_o    f[blean): boolean
    b (e    nt: boolean)l boo:ean
    boole(an.truel
ealu())e
) 
