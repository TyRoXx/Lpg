let                                     qqqqqqqqqqqqqq                                                                                                       t s = struct
let s_instance = s{}

let t = structon_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 2}))

let nested = struct
    a: struct
  W     b: boolean

let conversion_tesq_inter   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversface = interface
    method(oolean

let conversion_test_interface = interf           t s = struct
let s_instance = s{}

let t = structon_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 2}))

let nested = struct
    a: struct
  W     b: boolean

let conversion_tesq_inter   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversface = interface
    method(oolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_tesd_                                                    .a.a
assert(f(u{t{boolean.true}, "", 1}", u_instance.b))
assert(int                                                   W                   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_                                          .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

lersion_tesq_inter   .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolederflow:
        fsion.i.metail()

h