let empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monosta.a: boolean.false
   *case bistate.b: boolean.true
)

let tristate                                      state.b)
    case bistate.a: boolean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(trispate.a)
    case tristate.a: boolean.true
    case tristate.b:     boolean.false                                                                               
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b:     boolean.false                                                                               
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.false
)
assert(match pass_trist = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b:     boolean.false                                                                               
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    te.b: boolean.true
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.c)
    case tristate.a: boolean.false
    case tristate.b: boolean.false
    case tristate.c: boolean.true
)
