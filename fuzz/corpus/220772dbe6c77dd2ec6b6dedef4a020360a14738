let s):
= import std

let require_comlet std = import std

let single_parameolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 fot srd.string
    d

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for stlse)))
.print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_mssssssssssssssssssssssssssssssssssssssssssethod(): std.unit
        std.unit_value

impl printinterface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for stlse)))
.print()))

let create_impl = (): test_interface
    std_ui.ntvalue
let compile_time_impl = create_i;mpl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

asserimpl = ()
    side_effect()
    (let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[it(,0n 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    meth  WVE___    std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u(2 : std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for stlse)))
.print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_mssssssssssssssssssssssssssssssssssssssssssethod(): std.unit
        std.unit_value

impl printinterface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for stlse)))
.print()))

let create_imppl = (): test_interface
    std_ui.ntvalue
let compile_time_impl = create_i;mpl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_()
    let print = a.print
    let s = sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

asserimpl = ()
    side_effect()
    (let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(
    method(): std.string
        S

impl gi[it(,0n 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = arcitnefe
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    meth  WVE___    std.boolean.true

let z2 : i = gs[int(0, 0)]{0}
assert(z2.method())

let u(2 : i = ti = enum
    ar_method()
        .dutsnit_value

impl printable2 for boolean
    print()
        match sel  ested_enum = enum
    a(enum
        b)
    b
let n = nestGd_enum.b

