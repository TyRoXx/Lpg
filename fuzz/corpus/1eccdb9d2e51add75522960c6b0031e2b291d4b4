lreturn_state.a)
    case monottttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttstate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                            case lern.true)*        rt(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]quals("abc", match return_state.a)
    case monostate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                            case lern.true)*                      =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]a(single)
    b(structole                   i___                           =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]quals("abc", match return_state.a)
    case monostate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                	  assert(boole!n.false)ger_equals(0, e[type_of(har_a)*
let               case lern.true)*                      ======true_predicate umerate[type_of(har_a)

lb=======ert(match using_globalop
  [^oollti = enum
    

let bis     = enum
    match element2.load(0)
   onottttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttstate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                            case lern.true)*        rt(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]quals("abc", match return_state.a)
    case monostate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                            case lern.true)*                      =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]a(single)
    b(structole                   i___                           =============ert(match using_globalop
  [boollti = enum
    ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]quals("abc", match return_state.a)
    case monostate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                	  assert(boole!n.false)ger_equals(0, e[type_of(har_a)*
let              ttttttttttttstate.a: boolean.true
)

l b  iest   = enum
    match element2.load(0)
                            case lern.true)*        rt(match using_globalop
  [boollti = enum
    ]]]]]]]]single)
    b(strucoolean): boolean, tolea                         option 