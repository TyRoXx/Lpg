l  et std = import std

let single_par p.load()))

lit p2 = make_mutal                                              e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2 o.re("value))
p2tso.1.load()))
p2t
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re_equals("test",)
 p2.load()))
p2tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let s= impagain = i p.load()))
p.store("123")
assert(string_equals("123", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string"equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()))

let o = make_mutabdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_e
  WJS n.load = i)
asque
ert(string_equals("test",)
 d.string]("test")d())!
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load())	
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n..s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equad()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enum[!]
 [[[[[[[[[[r .l  oad c
=l