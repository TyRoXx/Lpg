let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

assert(string_equals("", runtime("")))
assert(string_equals("a", runtime("a")))
assert(string_equals("unitYS_
  me(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("                    &                                                 a     a2.print()))

let test_interface = interface
    method(a: boolean, b: for std.unit
ect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).pri                                                      nt()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): std.uni        std.unit_value

impl printable2 for std.unit
    print()
       rintable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
