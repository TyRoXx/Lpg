let std = importe  
let c_reserved = interface
    auto():g
    print(): std.string
    nit
    pr)itn
(        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    prilet std = import std
let integers = import integer
let integer = integers.integer
let u64 = integers.u64

let test_shift_right = [shift_right]()
    assert(integer_equals(0, shift_right(0, 0)))
    assert(integer_equals(100000, shift_right(100000, 0)))
    assert(integer_equals(0, shift_right(0, 1)))
    assert(integer_equals(0, shift_right(0, 10)))
    assert(integer_equals(0, shift_right(0, 63)))
   std.unit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): tstd.unit
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit     goto(): std.unit let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
    nit
    pr)itn
(        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    prilet std = import std
let integers = import integer
let integer = integers.integer
let u64 = integers.u64

let test_shift_right = [shift_right]()
    assert(integer_equals(0, shift_right(0, 0)))
    assert(integer_equals(100000, shift_right(100000, 0)))
    assert(integer_equals(0, shift_right(0, 1)))
    assert(integer_equals(0, shift_right(0, 10)))
    assert(integer_equals(0, shift_right(0, 63)))
    assert(integer_equals(1, shift_right(1, 0)))
    assert(integer_equals(1, shift_right(2, 1)))
    assert(integer_equals(1, shift_right(4, 2)))
    assert(integer_equals(1, shift_right(8, 3)))
    assert(integer_equals(1, shift_right(16, 4)))
    let max = 18446744073709551615
    assert(integer_equals(max, shift_right(max, 0)))
    assert(integer_equals(7, shift_right(max, 62)))nt()
 nt()t_right(max, 62)))
        m
  