l        et std = import std

let printable = inter other_)

assert(stvalue)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_etqu printable = interface
    print(): std.string
let f4 = (printed:ssert(string_equals("unitYS_
  me(std.unit_value)))aintable = interface
    print(): std.string
let f4 = )

assert(stvalue)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_etqu printable = interface
    print(): std.string
let ing
luntime(1rintable = interface
    print(): std.string
let f4 = )(printed: prist runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)ntime(1)))
assert(string_equt printable = interface
    print(): std.string
let f0 = (printed: pris  runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (prinded: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals(t f4 = (printed: prist runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (pri               nded: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assertlet f4 = (prinde(string_equt printable = interfagable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
