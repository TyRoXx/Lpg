d      ZjH[      ion[string].some(lni", stat\@)
&&&&&&&&&let conversion = conversion_test{std.una", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interf_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.make_mutable[type_of(struct[T])](str{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.option[std.un
std.tmake_mutabl