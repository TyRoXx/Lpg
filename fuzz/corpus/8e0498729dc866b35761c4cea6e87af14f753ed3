t std = import std
let option = std.option[int(0, 100)]
let ntegers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals(0, of = (a: boolean, b: st, "t(test_  b
let rt(integer_equals(1, of = (a: boolean, b: st, "t(test_single(single.a("def"))))

assert(string_equals("abcss_monostate = (arg: monostate)
    arg
assert(f = (a: boolean, b: st, "t(test_single(single.a("def"))))

assert(strinO_equals("abc", string(host.undefined())
        case option[std.string].some(let content):
            boolean.false
   case option[std.string].none:
            t pass_tristate = (arg: triUstate)
    arg
assert(match pass_tristate(tristate.a)
   boolean.true
)

let test_read_property = (h caseost tristate.a": e