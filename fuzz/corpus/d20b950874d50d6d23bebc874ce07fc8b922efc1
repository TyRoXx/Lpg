t    egers = import)))

let empty = new_array(bodicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolel   ^port std
let sit_value)
assert(integer_equals(2, d.load().size()))
d.store(new_a       r)ay(std.unit))
assert(integer_equals(0, d.load().size()))

ltd.type](std.boolean)
(a: host_ue) std.make_mutable[host_value      :.make_mutable[type_of(interface[T])](interface[T]teger_equaltd.boolean)
(a: host_value) std.make_mutable[host_valutore(s{std.boolean.false})
assert(nofl.t(oad().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value      :.make_mutablet[ye_pof(interface[T]option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struc`   )
std.make_mutable[type_of([]) (T (TT)]([T]() T)
std.make_                                  alue
std.make_ake_run= () std.   Zunit_value
std.make_ake_zuntime_string("abc"mutable[type_of(lambda)]))))
    assert(host.equate)))
assert(not(algorithmdefault take