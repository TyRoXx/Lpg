l
         std = import std

let helper = struct
    t: st*.type
    u: int(0, even          helper{T, U, V}
        le[std.boolean:()[123]()["test"](       :(typ3]()["test"\(               :std.unmt]))
assert(type_equals(make_enum[2]()s[td.uni`______a                                tuple = f[std.boolean:()[123]()["test"](       :(typ3]()["te Ast"](               :(typle.u))
assert(.unmt]))
assert(type_equals(make_enum[2]()s[td.uni`__      tuple = f[tsd.boolean:()[123]()["test"](       :(typ3]()["test"\(               :std.unmt]))
assert(type_equals(lean:()[123]()["test"](       :(typ3]()["test"](               :(typle.u)V)
assert(string_eq   [V]()
            helper{T, U, V}
        let e_equals(make_enum[1]()[std.unit], mak   tuple*  =```````````````````````````````````````````````````````````````````````````` f[std.boolean:()[123]()["test"](       :(typ3]()["test"](       :(typle.u))
asserrt(ngtis _equals                 ("test",      (  nit]et std = import stdt], )))
