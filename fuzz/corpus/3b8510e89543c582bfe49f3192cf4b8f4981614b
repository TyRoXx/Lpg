r_method(): .ntusw_array(std.array[std.arr()))

let n ): mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                   let runtime = (a: ring = std.string
let option = std.option
let a = new_array(.dstarray[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[inlet string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable int(1, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   l mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                   let runtime = (a: printable4)
    side_effect()
let string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t ipport             g_   let std = import std
let a = new_array(std.array[std.arrayd.oedt s =t import             g_   let std = import std
let a = new_array(std.array[d.string
let option = std. *    option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t import             g_   let std = import std
let a = new_array(std.array[std.arrayd.oe      g_   let std = import std
let a = n    rray(std.array[std.arrayd.option

let test_string = (host: es.host)
    let exported : host_value = host.export_string("hello")
    asserprintable4)
    side_effect()
let string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[inlet string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable int(1, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                       g_   l mu                 g_   l mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                   let runtime = (a: printable4)
    side_effect()
let string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t ipport             g_   let std = import std
let a = new_array(std.array[std.arrayd.oedt s =t import             g_   let std = import std
let a = new_array(std.array[d.string
let option = std. *    option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t import             g_   let std = import std
let a = new_array(std.array[std.arrayd.oe      g_   let std = import std
let a = new_array(std.array[std.arrayd.option

let test_string = (host: es.host)
    let exported : host_value = host.export_string("hello")
    assert(match host.import_string(e
    l                                              g_   ledt s =t import             g_   let std = import std
let a = new_array(std.array[std.arrayd.option

let test_string = (host: es.host)
    let exported : host_value = host.export_string("hello")
    assert(match host.impo _string(e
    let print = a.print
    let s = prrint = a.pint()
    s

imoption
let a = new_array(std.array[std.arraet b = sin, 0)](3)
as   *                      gle_parime = (left: integers.u65, right: int   