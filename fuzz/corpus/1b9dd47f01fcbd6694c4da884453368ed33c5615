                                                                                                                                                  max = host.export_integer(9007199254740991)
    assert(host.equals(min, min))
    assert(host.equals(max, max))
    assert(not(host.equals(min, max)))
    assert(not(host.equals(max, min)))
    assert(not(host.equals(min, host.undefined())))
    assert(not(host.equals(max, host.undefined())))

let test_undefined = (host: es.host)
    let u0 = host.undefined()
    let u1 = host.undefined()
    assert(host.equals(u0, u1))

let test_call_method = (host: es.host)
    let object : host_value = host.export_string("hello")
    let arguments = new_array(host_value)
    assert(arguments.append(host.export_integer(0)))
    let charCode = host.call_method(object, "charCodeAt", arguments)
    assert(host.equals(charCode, host.export_integer(104)))

let test_import_integer = (host: es.host)
    let zero = host.export_integer(0)
    assert(match host.import_integer(zero)
        case option[es.integer].some(let value):
            integer_equals(value, 0)
        case option[es.integer].none:
            boolean.false
)
    let one = host.export_integer(1)
    assert(match host.import_integer(one)
        case option[es.integer].some(let value):
            integer_equals(value, 1)
        case option[es.integer].none:
            boolean.false
)
    let max = host.export_integer(9007199254740991)
    assert(match host.import_integer(max)
        case option[es.integer].some(let value):
            integer_equals(value, 9007199254740991)
        case option[es.integer].none:
            boolean.false
)

let test_equals = (host: es.host)
    assert(host.equals(host.undefined(), host.undefined()))
    assert(host.equals(host.export_integer(0), host.export_integer(0)))
    assert(host