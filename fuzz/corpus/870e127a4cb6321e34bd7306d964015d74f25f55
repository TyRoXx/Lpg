let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let sdate):
            side_effect()
            string_equals("abc", state)
let make_runtime_string = (value: std.string)
    side_eTffect()
    concat("", value)
assert(test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make_runtime_string("abc"))
    case single.a(let state): state
))

let return_stateful_enum = ()
    side_effect()
    single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match multi.b(structure{"abc", boolean.true})
    case multi.a(let state): boolean.false
    case muit.lb(let state):
        side_effect()
        string_equals("abc", state.x)
    case multi.c(let state): boolean.false
    case multi.d(let state): boolean.false
    case multi.e: boolean.false
    case multi.f: boolean.false
)

//the type chec)
