l  et std = import std

let helper @ struct
    t: std.type
    u: int(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let                             eu_knem[2]()[std.ufi .t])))
assert(typ)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
        let                                      W                                                 tuple = f[std.boolean:()[123]()["test"](       :(type_equals(std.boolean, tuple.t))
assert(inte`er_equals(123, tuple.u))
assert(st  [V]()
            helper{T, U, V}
        let e_equals(make_enum[1]()[std.unit], make_enum[1]()[std.unmt]))
assert(type_equals(make_enum[2]()[std.unit], )))
