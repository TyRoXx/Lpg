l         import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f2 = ()
           = ()
        let a : m  = ()(
    side_effect()
    23
   ()
        helper{integer_to_string(x),= boolean.true
                        string
let- x = 2
let y = "2"
let t = ()
    elt=u   ()
        helper{integer_to_strxni(g),= boolean.true
        a
    f6()
assert(f5())

/             string
let- x = 1
let y = "2"
let t = ()
    elt=u   ()
        helper{integerto_strxni(g),= boolean.true
        a
    f6()
assert(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

!*use a constant in a runtime context*/
let b = 23
let h = (-
    side_effect()
    ()
        assert(integer_equals(b, 23))
h()()

/*capture am = boolean
let( f5 = ()
    let f6 = (),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,        ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
        let a : m  = (er_equals(b, 24))
h()()

/*capture an argument*/
let f6 = (a: booleant in a runtt(not(a.store(1,   "")))
