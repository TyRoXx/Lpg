let                                     qqqqqqqqqqqqqq                                  std = import' std

le                                                                                                          t s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, "abc", 0}
assZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZert(u_instfnce.a.a)
asserlet std = import std
let integers = import integer
let integer = integers.integer

match subtract(std.runtime! alue[integet(string_equals("abc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boolean
    arg                                                        Y                   std = import' std

le          d

le          oolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversion_tesq_interface = interface
    method(): std.boolean
impl conversion_test_inte&rface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.unit_value}
assert(conversion.i.meth                               qqqboolean.true}, "abc", 0}
assert(u_instance.a.a)
assert(string_equals("abc", u_instance.b))
assert(9nteger_equals(0, u_instancr](0), 0)
    case subtract_result.ok(let result):
        assert(integer_equals(0, result))
    cae.c))

let f = (arg: u): bo  ean
    arg                                                                               .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
        b: boolean

let conversion_test_interface = interface
    method(): std.boolean
impl conversion_test_                                                    .a.a
assert(f(u{t{boolean.true}, "", 1}))

let nested = struct
    a: struct
  W     b: boolean

let conversion_tesq_interface = interface
    method(): std.boolean
impl conversion_test_inte&rface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.unit_value}
assert(converse subtract_result.underflow:
        fsion.i.metail()

h