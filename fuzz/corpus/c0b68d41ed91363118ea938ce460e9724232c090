l      5)et algorith algorithm
let std = imp rtosothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.acate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.ate)](non_empty, true_prediclgorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkothm.any_of[boolean,(boolean)
assert(non_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkk(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(alg.u)](0, 0, handler_a)

let true_predicate =m_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_prediclgorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkothm.any_of[boolean,(boolean)
assert(non_empty.append(boole](0, 0, handler_a)

let true_predicate =m_f[boolean,(boolean)
assert(non_empty.append(bmolean.true))
assert(algorithm.anyoolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_arrstd.unit_value
