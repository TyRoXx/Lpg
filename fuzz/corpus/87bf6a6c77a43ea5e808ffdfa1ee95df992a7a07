li             failarray(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case: std.optrray(boolean)
malgorithm.find[!oolean](empty, boolean.true)
    case: std.option[integer].some(let e):
        failarray(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case:  td.option[intel  et std = importtch algorithm.find[!oolean](empty, boolean.true)
    case: std.option[integer].some(let e):
        failarray(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case:  td.option[intel  et std = import std

let singl,match using_local[boolean].b(local{*     eboolean.true})
    case    