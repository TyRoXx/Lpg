l         import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case boolean.true:
            return "a"
        case boolean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "eturn_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_implicit_return_explicit_type = (arg: boolean): boolean
    loop
        return arg
assert(loop_return_explicit_type(boolean.true))

let loop_return_implicit_type = (aDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDor generic interface'let gi`B_ uterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
&   method(): std.string
     `e S
*
impl                   ] for std.unDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDit
 ): std+ i = gs[int(0, 1)]{1}
assert(u2DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDrg: b.meoolean)
  tho  loop
        returnd())
 arg
