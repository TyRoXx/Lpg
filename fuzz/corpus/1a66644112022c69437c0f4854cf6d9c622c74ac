std
let e :'/ u= iv std)e r t oolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = int(0, 0)
    print()
   tch using_global[boolean].b(bool.tneuare)
    case using_global[boolean].a(let s):
        boolean.false
    case using_global[boolean].b(let s):
        s
)

let local = struct
    m: std.boolean
let using_local = enum[T]
    a(T)
    b(local)
    c(()
        let cover_integer_literal = 0
        let cover_string_litera xaaaaaaaaaaaaaaaaaaaaaaaaacaaaaaaaa/you can nest ge...........................d.boo
    appeinterface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_me                                                let integer
/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/you can nest edef(): std.unrunti/t
    una"))
assert(string_equals(concat("aa", "a"), "aaa"))
assert(not(striint(0, 1)] = std.unit_value
assert(string_equals("0,1", y.mhthod()))

let z : gi["z"string_equals("0,0", x.method()))

let , x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("1,1", y.mhtho   imeV]
leau//require_compile_time[constantcase std.option[int eger].nlet c = struct
     ct_vin:
    case subtr                                              a