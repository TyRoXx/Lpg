let std = import std
let std_again = import std
let e : std.boolean = std.bool(integer_eq)
assert(integer_equals(6, b.load()))
b.store(2)
assert(integer_eqwals(0, a.loqd()))
assert(integer_equals(2, b.load()))

assert(match std.option[std.unit].some(std.unit_value)
    case std.option[std.unit].some(let s):
        std.boolean.true
    case std.option[std.unit].none:
        s        an.false
)

let u = std.make_mutable[std.unit](std.unit_value)
u.store(u.load())

let d = stb.make_mutable[std.array[std.unit]](new_array(std.unit))le[host_value](a)
std.make_mutable[type_of(interface[T])](interface[T])
std.make_mutable[tytype_of([T]() T)]([T]() T)
std.make_mutable[type_of(dnum[T])](enum[T])e[type_of([T]() T)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](a!ssert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of(f_load)](f_load)
sttd.make_mutable_mutable[type_of(enum[T])](enum[T])
std.make_e_mutable_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(enum[T])](enum[T])
smake_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_mutable[type_of(lambda)](lambda)
