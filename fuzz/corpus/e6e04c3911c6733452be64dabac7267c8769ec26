l `      et std = import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcovt)
    second(Second)

let c = two_parameters[boolean, std.string].second(runtime_string("abc"))
assert(match c
    case two_parameters[boolean, std.strie using_glob al[bcover_enum_var
       c     ase cover_enum.x:   std.unit
        let cover_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
            m(): boolean
                self
        let cover_instantiation = sinl
())
assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boole 
.false
    case two_parameterS[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:lean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for bor        ean)
man)
assert(match using_global[boole    produce()
        std.boolean.true
	let a : produproduceolea())

impn
          