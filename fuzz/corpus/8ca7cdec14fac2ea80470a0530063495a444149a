l   Z s):
= import std

let require_comlet std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    metho                                                                                                                          d(): std.s rinals("u", u.method()))

/ce[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

imperimpl = ()
    sistd = import std

//import std

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
  et L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    metho                  std.string
        S

impl gi[int(0, 0)] for std.unit
    metho                                                                                                                          d(): std.s rinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

imperimpl = ()
    sistd = import std

//import std

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
  et L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    met`o                                                                                       tring

impl[S] gi[S] for std.unit
    method(): std.string
        S

imperimpl = ()
    sistd = import std

//import std

// impl for generic interfa                                                                     tring

impl[S] gi[S] for std.unit
    method(): std.string
        S

imperimpl = ()
    sistd = import std

//import std

// impl for generic interface
let gi    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((  method(): std.string

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((((((((((((((((((((my: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((  method(): std.string

impl[S] gi[S] for std.unit
    metdum((((((((((((((((((((((((((((((((((((((((((((((((my: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true 
let z2 : i = g [ir std.unit
    method():d.t sstrinal   b)
        b
let n = nestGd_enum.bp
