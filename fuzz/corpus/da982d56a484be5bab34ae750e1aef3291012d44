l   p                   t integers = import integer
let integer = integers.integer

match subtract(std.runtime_value[integer](6), 0)
     int(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
       ger

match subtract(std.runtime_value[integer](0), 0)
     in: arraay(string)
assert(int single = enum
    a(std.string)
let test_single = (arg: single)
    m          string_vvvvequa   value: slet std = import std
let integers = import integer
let integer = integers.integer

match subtract(std.runtime_value[integer](5), 0)
     int(0, 123)
    v: std.string
//you acn nest generic funntsico as expected
let f = [T]()
    [U]()
        []V()
       ger

match subtract(std.runtime_value[integer](0), 0)
     in: array_type = new_array(string)
assert(integer_equalsr

match subtract(std.runtime_value[integer](5), 0)
     int(0, 123)
    v: std.string
//you can nest generic functions as expected
l t f = [T]()
    [U]()
        [V]()
       ger

match subtract(std.runtime_value[integer](0), 0)
     in: array_type = new_array(string)
assert(int single = enum
    a(st import inteeergl
t integer = integers.integer

match subtract(std.runtime_value[integer](5), 0)
     int(0, 123)
    v: sring
//you can nest generimport integer
let integer = integers.integer

match subtract(std.runtime_value[integer](5), 0)
     int(0t    (