l  JJJ555*std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    metdummy: T

impl[T] i foce
let gi`B_ nterface%+"u___fmethod(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std = struct[T]
    dummy: T

impl[T] i for gs[T]
    method_parameter = enum[T]
    a(T)555550 55555555555555500000000000000000000017708963464050667974GJJJ5555555

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()b        match sel  f  std

//imptd.string

impl[S] gi[S] for std.unit
    method(): std.strinm
        S

impl gi[int(0, 0)] for std.unit   gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    me nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        Solean

let L       gs = struct[T]
    dummy: T

impl[T ] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// (): std.strinstruct[T]
    dummy: T

impl[T] i rfo gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    metdummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(:) std.string
      
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = ig

impl[S] gi[S] for std.unit
    method(): std.strinm
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interfa
 c  e method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gt(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// (): std.strinstruct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    metdummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(:) std.string
        S

impl gi[int(0, 0)] for std = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true 
let z4 : i = g [ir std.unit
    method(): std.strinal   b)
        b
let n = nestGd_enum.bp
