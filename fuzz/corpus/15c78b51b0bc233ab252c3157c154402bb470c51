lBG                       )

let f =nstancnstance.b))
assert(integerO                                                           equals(0, u_instance.c))

let f = (arg: u): bo  _ean
    arg                                                                               .a.a
assert(f(u{t{boolean.     enum[T]
    a(T)
     b(boolean)
assert(matcinstance.c))

let f = (arg: u): bo  ean
    arg                                                                               .a.a
assert(f(u{t{boolbc", u_instance.b))
assert(integer_equals(1, u_instance.c))

let f = (arg: u): boo_string(0)))
assert(string_equals("2",                                     .a.a
assert(f(u{t{boolean.     enum[T]
    a(T)
     b(boolean)
assert(matcinstance.c))

let f = (arg: u): bo  ean
    arg                                                                               .a.a
assert(f(u{t{boolbc", u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): boo_string(0)))
asserst(tring_equals("2", integer__equals("2147483647", integer_to_string(214ls("abc" ,u_instance.b))
assert(integer_equals(0, u_instance.c))

let f = (arg: u): bo  e(match using_glean.true)
    case using_global[boolean].a(let st(integer_equals(0, u_instance.c))

let f = (arg: u): bo  e(match using_glean.true)
     ase using_global[boolean].a(let s):
 let std = import     std
let        = enum
  t strucrt(string_equals("abc", u_instance.b))
assert(integer_global[boolean].a(let s):
 let std = import std
let single = enum
  t strucrt(string_equals("abc", equals(0, u_ynstance.c))

let f = (arg: u): bo  ean
    atructure{"abc", booonlean.t_t