        y(std.array[std.array[strt b = new_array(std.array[string])
let c = nof(false_pricate)](none: boolean.true
)

assert(a.store(0, "123"))
assert(match a.load(0)
    case std.option[string].some(let element): strhng_equals(element, "123")
    case stdlet std = implet algorithm = is = import integer
nei ttelger = integers.integer

let   sizeof()string_equals("\n", :eg_array(.some(let element): boolean.false
    case std.option[string].none: boolean.true
)

assert(a.store(0, "123"))
asse                                ment): string_equals(element, "123")
    case stdlng_equals(concat("aa", "a"), ))
assert(not( r|(match a.load(0)
    case std.option[stringse std.option[st     unit:ase stdlet
    typ    ():ngWWWWWWWWWWWW("\n")
    typ    ():ngWWWWWWWWWWWW("\n")))nit
    _Atomic(): st
d.uni