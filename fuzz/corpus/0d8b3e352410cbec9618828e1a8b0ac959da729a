                            assert(intege_of[boam_f[boolean,(bt(algorithm.any_of[boolean,kkkkkkkkempty, true_predicate))_predicate)](new_!rray(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
as%sert(non_empty.append(boolean.true))
assert(algorithm.any_of[balgorithm.any_of[boolean,kkkt(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let n                                              othm.any_of[boolean,(boolean)
assa*y_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type.option[integer].some(let e):
        fail()
    cer): stdu.nit
    assert(integer_equals(0, element))
algorithndler_an), false_predicate)))

let nothm.any_of[boolean,(booleanalse_predicate)](non_empty, an
false_pred    bi