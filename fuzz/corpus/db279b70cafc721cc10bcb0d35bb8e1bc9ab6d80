let std = import std
let integers = ubtract(std.runtime_value[integer](0), 0)
    case subtract_result.ok(let result):
        assert(integer_equals(0, result))
    case subtract_result.underflow   *                                                                                             g_   let std = import             g_   let std = import std
let string = std.string
let option = std.option
let a = new_array(std.arr                                                                                                                  flo     
:w   fail()

matc                                                                        sserh subtract(10, 2)
    t(b.append(           ccaue
)
hm.any_of[boolean, type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate)))

let empty = new_array(boolean)
mtd.string)
    side_effect()
    concat("", value)
assert(test_single(single.a(make_runtime_    assert(t(integer_equalstring("abc"))))
assert(std.nos(1, d))
f(boolean.true, "t(test_single(single.a("def"))))

assert(string_lean.false
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
  an.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(not(s.add(std.boolean.false)))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

assert(not(s.add(std.boolean.true)))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

s.clear()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.   case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(sing)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(not(s.add(std.boolean.false)))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.true))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

assert(not(s.add(std.boolean.true)))
assert(s.contains(std.boolean.false))
assert(s.contains(std.boolean.true))

s.clear()
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolean.false))
assert(s.contains(std.boolean.false))
assert(not(s.contains(std.boolean.true)))
asse;rt(not(s.remove(std.boolean.true)))
assert(s.remove(std.boolean.false))
assert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))
assert(not(s.remove(std.boolean.true)))   c
let pass_tristate = (arg: trn.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.faing_equals("abc", match single.a(make single.a(make_run||||||||||||||||||||||single(single.a(mak        e_string("abc")))singleX	      ))))

assert(tnisr_gequals("abc", match single.a(make single.a(make_runtithod()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(strinmatch a
    case single_parameter[boolean].agle.a(mak        e_string("abc")))singleX	      ))))

assert(string_equals("abc", match single.a(make single.a(make_runtithod()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(strinmatch a
    case single_parameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parime = (left: integers.u64, right: int   