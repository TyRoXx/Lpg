l    L       et std = import std
d.string] for dummy
    transform(input: slet her_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
td.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        soolean.fals;)))

let a2 : printablme2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printab)
td.unit_value

impl printable2 for std.unit
    print()
        "unit"
    ot   method()
        st    _: boolean
    ___: boolean
let))

impl transformer[std.boolean, std.string] for dummy
    transform(input: slet std = import std

let printable = interface
    print(): std.string
let f4 = (printed: /printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    sabc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printab)
tit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        st    _: boolean
    __    oolean
let))

impl transformer[std.boolean, std.string] for dummy
    transform(input: slet std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (ace = interface
    method(a: boolean, b: boolean): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()