l    et std = import std

let printable = inter other_)

assert(stvalue)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_etqu printable = interface
    print(): std.string
let f4 = (printed:ssert(string_equals("unitYS_
  me(std.unit_value)))abc"
assert(string_equals("      _equals("unitYS_
  me(std.uni|_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed:ssert(string_equals("unitYS_
  me(std.unit_value)))
assert(striegunq_als("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
ass ert(string_equals("false", runti
let test_interface = interface
    method(a: boolean,_method_order
    other_method(): std:uni        std.unit_value

impl printable2 for std.unit
    print()
 string
luntime(1rintable = interface
    print(): std.string
let f4 = (printed: prist runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)ntime(1)))
assert(string_equt printable = interface
    print(): std.string
let f0 = (printed: prist runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (prinded: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals(t f4 = (printed: prist runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (prinded: pristring
        self
    other_)

asserng_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equt printable = interface
    print(): std.string
let f4 = (printed: pristring
    gable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
