l               print()
    s

leYt runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable1 for std.string
    print(): std.string
        self
    other_method(): std.unit
        st
    med(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       st$.boolean.true

let z2 : i = gs[int(0, 0)]{0}
NNNNNN interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
       $S

impl gi[int(0, 0)]  or std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): sDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDtd.unit_value

impl printable2 for ststd.unit_value

impl printable2 for print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.("test", coprintable1 for std.string
    print(): std.string
        self
    other_method(): std.unit
        st
    med(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       st$.boolean.true

let z2 : i = gs[int(0, 0)]{0}
NNNNNNNNNNNNNNNNNasse (let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
       $S

impl gi[int(0, 0)]  or std.unit
    method(): std.strinals("u", u.method()))
NNNNN interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
       $S

impl gi[int(0, 0)]  or std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): sDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDtd.unit_value

impl printable2 for ststd.unit_value

impl printable2 for print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match sel  f    
      case boolean.true: "true"
            case boole_method()
        std.("test", coprintable1 for std.sor gs[T]
    method(): m
    a(enumer_method()
        std.unit_value

impl printabnum.b

