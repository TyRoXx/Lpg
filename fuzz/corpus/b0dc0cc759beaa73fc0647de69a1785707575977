let std = import std

let helper = struct(
    t: std.type
    u: int(0, 123)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
let tuple = f[std.boolean]()[123]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(integer_equals(123, tuple.u))
assert(string_equals("test", tuple.re defined the same:
let make_enum = [T]()
    euse T is not the same.
assert(not(type_equals()[std.unit], make_enum[1]()[std.unit]))
assert(type_equals(-ake_enum[2]()[std.unit], make_enum[2]()[std.unit]))
