l  GGGGet option = std.option[int(0, 100)]
let nteg)ers.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c:oolean           h return_statefuriable in a runt   _co(ntext*/
let f = ()
    side_effec ()
    23
let c = f()
let g = ()
    ()
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
load(0)
    case std.option[slet b = */
let f = ()
    side_effect()
    ()
  ean
              ture = struct
    ert(integer_equals]OS_  _B (a: boolean, b: std.string, c:oolean           h return_statefuria_  _B (a: boolean, b: std.string, c:oolean           h return_sctatefuriable in a runt   _co(ntext*/
let f = ()
    cide_effec ()
_equals(max, or(0, max)))
    assertntege:nr_equals(ntegers.u    23
l (r_u64_runtime]