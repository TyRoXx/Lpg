l          et std = imp                                                   %            ort std

let single_par p.load()))                                                         e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2 o.re("value))
p2tso.1.load()))
p2tso.re("valr        : booan.               e
ert(string_equals(btest",)
 p2.load(), nl         = import std

le:t single_p         = enum[!]
 [[[[[[[[[[r 1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_agai))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("val
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
a
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_e
  WJS n.load = i)
assue
ert(string_equals("test",)
 d.string]("test")d()))
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2 o.re("value))
p2tso.1.load()))
p2tso.re("valr        : booan.               e
ert(string_equals(btest",)
 p0.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: 0, n.load = import std
let std_againtso.1.load()))
p2 o.re("value))
p2tso.1.load()))
p2tso.re("valr        : booan.               e
ert(string_equals(btest",)
 p0.load())so.1.load()))
p2tso.re("vaup2l)
e)tso.1.load()))
p2tso.tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: 0, n.load = import std
let std_again = impagain = i p.load()))
p.store("123")
assert(string_equals("123", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p4.load()))
p2tso.1.load()))
p2tso.re("valuead()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_e
  WJS n.load = i)
assue
ert(string_equals("test",)
 d.string]("test")d()))
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_agaid

le:t single_p         = enum[!]
 [[[[[[[[[[r 1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_eqrt(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equad()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load(:)))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enum[!]
 [[[[[[[[[[r .l  oad c
=l