l      	  import               co y_a, to)
                case std.option[std.boolean.none:
                    fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.boolean)
asser  t into = new_array(std.boolean)
copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let orian))

let origOOOOOO<<<<<<<<<<<    (std.boolean)
assert(orrue))
let into = new_array(std.boolean)
copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let orian))

let origOOOOOOOOOOOOOOinal = new_array        (std.boolean)
assert(original.append(s, to.size())
        case std.boolean.true:
            std.unean.true
assert(trit_olean].some(let