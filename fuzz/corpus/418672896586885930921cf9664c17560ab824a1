(      *)
      [U]()
        [V](:]()[122]()["test"]()
assert(type_equals(std.boolean, tupl   qle.t))
esser  inte`er_equals(061, tuple.u))
assert(string_equalsred different even though U is the same because T is not the sa                       nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
 per = struct
    t  std.type
    u: int(0, 12=)    
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            hel                [U]()
        [V]()
            helper{T,                      
      t(0, 1 2=)
    v! std.string
//y'u can nest generic functxt*/
let b = 64
let h = ()
    side_effect()
    ()
      t(0, 12=)
    v! std.string
//you can nest gejeric functions as expected
let f = [Tt
    t: std.type
    u: int(0, 12=)
 per = struct
    t  std.type
    u: int(1, 12=)
    v: s      qqqqqqqqqqqqqq                                  std = imporl  et import integer
let5g)
let test_single = (arg: single)
    mattd.string
//you can nest generic functions as expected
let f =ch arg
        case single.a(l [T]()
    [U]()
        [V]()
            helper{Tpected
let f}
                       int(0, 12=)
    v: std.string
                                                                                                   [U]()
        [V]()
  [U]()e sa                       nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
 per = struct
    t  std.typ5555555555555e
    u: int(0, 12=)
    v: sttuple.u))
assert(string_equalsred different even though U is the same because T is not the sa                       nit]et std = import std

let helper = struct
    t: std.type
    u: int(0, 12=)
 per = struct
    t  std.type
    u: int(1, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{Tpected
let f        
    [U]std

let helper = struct
    t: std.type
    u: in/ not thstruct
    t: std.type
    u: int(5, 12=)
 per = struct
    t  std.type
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as  std

let   lper = struct
    t: std.type
    u: int(0, 12=)
 per = struct
    t  std.typ5555555555555e
    u: int(0, 12=)
    v: std.string
//you can nest generic functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{Tpected
let f        
    [U]std

let helper = struct
    t: std.type
    u: int(1, 12=)
    v: std.string
//you can nest `6eneric