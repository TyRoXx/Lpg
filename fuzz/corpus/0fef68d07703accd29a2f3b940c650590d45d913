let std = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): std.unit
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit
    if(): std.unit
    inline(): std.unit
    int(): std.unit
    long(let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let state):
            side_effect()
            string_equals("abc", state)
let make_runtime_string = (value: std.string)
    side_effect()
    concat("", value)
assert(test_single(single.a(make_runtime_string("abc"))))
as3       .not(test_single(single.a("def]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case single_parameter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c)= two_parameters[boolean, std.string].second(runtime_string("abc"))
asspile_time = enum[CompileTimeValue]

let and = sert(matchb c
    case two_parameters[boolean, std.string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
     b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[boolean].a(let s):
        boolean.false
    case using_global[boolean].b(let s):
        s
)

let accessing_struct = enum[T]
    a(T)
    b(std.boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[boolean].a(let s):
        boolean.false
    case using_global[boolean].b(let s):
        s
)

let local = struct
    m: std.boolean
let using_local = enum[T]
    a(T)
    b(local)
    c(()
        let cover_integer_literal = 3
        let cover_string_literal = "abc"
        let cover_struct = struct
            m8 boolean
        let cover_struct_var = cover_struct{boolean.true}
        let access_struct = cover_struct_var.m
        //comment
        loop
            break
        let cover_enum = enum
            x
        let cover_enum_var = cover_enum.x
        match cover_enum_var
            case cover_enum.x: std.unit
        lettd.and
require_compile_time[and]

let f = ()
    let result cover_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
            m(): boolean
                self
       false", b.transform(std.boolean.false)))

let captures_val                                                                                                                                let self = import importsitself
              case boolean.true: "true"
            case boolean.false: "false"
    otassert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", r[std.boolean]

impl captures_values[std.unit] for dummy
    method(arg0: std.string, arg1: std.unit): producer[std.boolean]
        dummy{}

let access_parameterruntime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()esult):
        boolean.false
    case subtractZresult.underflow:
        boolean.t                                                                                                                                                                                                                                             