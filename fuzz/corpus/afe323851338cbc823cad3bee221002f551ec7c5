r            hod(): .ntusw_array(std.array[std.arr()))

let n ): mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                   let runtime = (a: ring = std.string
let option = std.option
let a = new_array(.dstarray[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[inlet string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable i 3)](3)
as   *                                                                                                 g_   l mutable[int(0, 3)] = make_mutable[int(0, 3),,,,](3)
as   *                                                   let runtime = (a: printable4)
    side_effect()
let string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mut!ble[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t ipport             g_   let std = import std
let a = new_array(std.array[std.arrayd.oedt s =t import             g_   let std = import std
let a = new_array(std.array[d.string
let option = std. *    option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                  g_   ledt s =t import             g_   let std = import std
let a = new_array(std.array[std.arrayd.oe      g_   let std = import std
let a = n    rray(std.arrZy[std.arrayd.option

let test_string = (host: es.host)
    let exported : host_value                       g_   ledt s =t ipport             g_   let std = import std
let a = new_array(std.array[std.arraylet a = new_array(std.array[d.string
let option = std. *    option
let a = new_array(std.array[std.arr()))

let n : mutable[in          g_   let std = import std
let a = new_array(std.array[std.arrayd.oe      g_   let std = import std
let a = n    rray(std.arrZy[std.arrayd.option

let test_string = (host: es.host)
    let exported : host_ring("hello")
    asserprintable4)
    side_effect()
let string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[inlet string = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable int(1, 3)] = make_mutable[int(0, 3)](3)
as   *                        `                                              g_   l mu                 g_   l mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                   let runtime = (a: printable0)
    side_effect()
let str ing = std.string
let option = std.option
let a = new_array(std.array[std.arr()))

let n : mutable[int(0, 3)] = make_mutable[int(0, 3)](3)
as   *                                                                                                 g_   ledt s =t ipport             g_   let std = import std
let a = new_array(std.array[std.arrayd.oedt s =t import             g_   let std = import std
let a ) new_array(std.array[d.let std = import std
led.unit
    const(): std.unit
    continue std. *    option
let() :a s