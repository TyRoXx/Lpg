let std = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_t   return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_;eturn_explicit_type(boolean.true)))

let match_return_implicit_type = (arg: boolean)
    :
            std.unit_value
    return "b"
asse   rt(string_equals("a", match_return_implicit_type(boolean.true)))

let loop_return_explicit_type = (arg: boolean): boolean
    loop
        return arg
assert(loop_return_explicit_type(boolean.true))

let loop_return_implicit_type = (arg: boolean)
    loop
let std = import std

let helper = struc t
    t: std.t      