l         Z s):
= import std

let require_comlet std = import std

let single        er = enum[T]
    a(T)5555555555555555575555555555555555555555555555l for generic self
let i = interface
 std.unit
    method(): std.stristd = import std

//import std

// .string

impl[S] gi[S] for std.unit
    method(): std.strinm
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

/uct[T]
    dummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(4, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

imperimpl = ()
    sistd = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.strin 
   m    S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    _ummy: T

impl[T] i for gs[T]
    met nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L        gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method(): std.string
        S

impl gi[int(0, 0)] for std = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true 
let z2 : i = g [ir std.unit
    method(): std.strinal   b)
    b
let n = nestGd_enum.bp
