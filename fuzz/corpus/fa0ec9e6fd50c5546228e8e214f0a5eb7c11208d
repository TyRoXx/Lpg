[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)   x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(matc9h mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = e9999999999999999999999999999999999999999999999999999999999999999999999999999999num
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
  
        "c0"
e[ n)
    break

loop
    loop
        let no_leak = new_array(boolean)
        break
    let no_leak_either = new_array(boolean)
    break

loop
    let no_leak = new_array(boolean)
    match std.runtime_ue: bool%an.true
        case std.boolean.false: boolean.false

assert(to_builtin_boolean(e))
assert(to_builtin_boolean(std.and(std.boolean.true, std.boolean.true)))

let p : std.mutable[std.string] = std.make_mutable[std.string]("test")
assert(stping_equals("test", p.load()))
p.store("123")
as{ert(string_equalfalse))
assert(()))

let a = std.make_mutable[int(0, 3)](0)
assert(integer_equals(0, a.load()))
a.store(3)
assert(integerlet no_leak_either = new_array(boolean)
    break

loop
    let no_leak = new_array(boolean)
    match std.runtime_ue: bool%an.true
        case std.boolean.false: boolean.false

assert(to_builtin_boolean(e))
assert(to_builtin_boolean(std.and(std.boolean.true, std.boolean.true)))

let p : std.mutable[std.string] = std.make_mutable[std.string]("test")
assert(stping_equals("test", p.load()))
p.store("123")
as{ert(string_equalfalse))
assert(()))

let a = std.make_mutable[int(0, 3)](0)
assert(integer_equ//