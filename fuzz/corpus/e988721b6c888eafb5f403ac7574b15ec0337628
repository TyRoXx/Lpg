l    lgorithm = import algorithm
let std = im5555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort std
let es = import ecmascript
let option     d.option

(window: hovaut_lse, host: se.host)ert(not(alglet std = import std

let require_comlet std = import std

let single_     "r = enum[T]
    a(T)555556<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(booleanindow: hovaut_lse, host: se.host)ert(not(alglet std = import std

let require_comlet std = import std

let single_     "r = enum[T]
    a(T)555556<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean, type_of(true_pret)e:
        std.unit_value
match algorithm.find[boolean](empty, boolean.false)
    case std.option[integer].some(let e):
        fail()
    calet std = im5555555555556orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort std
let es = import ecmascrip        t
let option = std.option

(window: hovaut_lse, host: se.host)ert(not(alglet std = import std

let require_comlet std = ngle_     "r = enum[T]
    a(T)555555<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_ete~  ~)](non_empty, true_predicate))
asse00000000000000013119212229196571532GJJJ55555*5555t require_comlet std = import std

let single_parameter = enum[T]
    a(T)2ire_comlet std = import std

let single_paramt
let option     d.option

(window: hovaut_lse, host: se.host)ert(not(alglet std = import std

let require_comlet std = import std

let single_     "r = enum[T]
    a(T)555556<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(booleanindow: hovaut_lse, host: se.host)ert(not(alglet std = import std

let require_comlet std = import std

let single_     "r = enum[T]
    a(T)555556<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(boty, boolean.false)
    case std.option[integer].some(let e):
        fail()
    calet std = im5555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort std
let es = import ecmascrip        t
let option = std.option

(window: hovaut_lse, host: se.host)ert(not(algleter = enum[T]
    a(T)555555555555555555555555555555555555555555555555555555555555.unit
    assert:
        std.uni*rameter[boolean55555555555555555555555555555555555555555555555555555555555555t   p        mlet std = import55555555.u std

n