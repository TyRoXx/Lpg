d 	  ue
	let a : produproduce())

itransformdummy{}
assert(a.produce())

impl tran  ormer[std.boolean, std.string] for sing_struct = enum[T]
    a(T)
    b(std.boolean)
assert(match using_global[boole    produce()
        std.boolean.tr2B      ue
	let a : produproduce())

impl transformer[std.boolean, std.string] for dummy
    transfo  W   
: std.boolean): std.stri2B      ng
        match input
            case         std.boolean.true: "true"
            case std.booleaue
	let a : produproduce())

impl transformer[std.boolean, std.string] fo) dummy
    transfo  W   
: std.boolean): std.string
        match input
   nestd.boolea~, std.string] for d     std.boolean.true
	let a : produproduce())

iy
    transfo  W   
: std.boolean): std.striroduprodc", 0}
asslet std = impor64, right: int   