l+              deger face = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(t            t])ZZZZZZZZZZZZZZZZZssert(type_eq\       ty, false_predicate)))

let empty = new_arraan
impl test_interfacZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ)
assert(type_eq\       ty, false_predicate)))

let empty = new_arraan
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(t            t]))
:sserufi .t])))
assert(t            t]))
assert(type_equarfake_mutable[type_of(std.opte)]y.append(boolean.true))
assert(algorithm.any_o    f[blean): boolean
    b (e    nt: be for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(tpty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_p        ate)]\       ty, false_predicate)))

let empty = new_array(a(let s):
        boolealn.falring)
    side_weffect()
   (return concat("abc"} arg)
assert(string_e  quals("abcdef"T return_runtime_string("def")))

let test_interface -------------------------------------------------------------------= interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.eI[2]()[std.ufi .t])))
assert(t            t]))
assert(type_equarfake_mutable[type_of(std.opte)]y.append(boolean.true))
assert(algorit)hm.any_o    f[blean): boolean
    b (e    nt: boolean)l boo:ean
    boole(an.true
lealu())e
) 
