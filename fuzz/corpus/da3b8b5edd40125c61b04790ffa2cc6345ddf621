lU        import std

let printable = interface
    print(): std.string
let f4 OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO          (let method = printed.print
    let string = method()

let printabl!e2ther_method()
        std.unit_vaalue

impl printable2 for          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: priOOOOOOOOOOOOOOOOOOOOOO          (let mhod()
        std.unit_vaalue

impl printable2 for          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: printable)
    let method = printed;.print
    let string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                           OOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: printable)
   let string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                                               int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: printable)
    let method = printed.print
    let string = method*()

let printable2ther_method()
        std.unit_value

impl printable2 for          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: printable)
    let method = printed;.print
    let string = method()

let printable4ther_method()
        std.unit_value

impl printable2 for                                                                          int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: printable)
    let method = printed.print
    let string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                                                                                  int(0, 0)
    print()
                                                   int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: pr= printed.prit_value

impl printable2 for                                                                          int(0, 0)
    print()
                                string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                 o  assert(not(b))
        "test"

let g : test_interface = std.unit_valu*e
assert(sntable)
    let method = printed;.print
    let string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                           OOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: printable)
   let string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                                               int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: printable)
    let method = printed.print
    let string = method*()

let printable2ther_method()
        std.unit_value

impl printable2 for          OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO= (printed: printable)
    let method = printed;.print
    let string = method()

let printable4ther_method()
                          int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: printable)
    let method = printed.prit_value

impl printable2 for                                                                          int(0, 0)
    print()
                                string = method()

let printable2ther_method()
    std.unit_value

impl printable2 for                                                                          int(0, 0)
    print()
        "0"
   OOOOOOOO= (printed: printable)
    let method = printed.print
   = printed.prit_value

impl printable2 for                                                                          int(0, 0)
    print()
                                string = method()

let printable2ther_method()
        std.unit_value

impl printable2 for                 o  assert(not(b))
        "test"

let g : test_interface = std.unit_valu*e
assert(string_equals("test", g.method(boolean.tru                                                                int(0, 0e_ntmethod_orderethod_order{}
h.othe _method()
assert(string_equals("123", h.print()))
