l     Z s):
= import std

let require_comlet std = import std

let single        er = enum[T]
    a(T)555555555555555555m S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl     std.boolean.true

let  impl for generic interface
let gi.unit
    method(): std.strinals("u", u.method()))

oolean.false: "false"
    other_minterface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i foce
let gi`B_ nterface[T]
    method(): S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():          0 gs = struct[T]
    dummy: T

impl[T] i for gs[T]
    method():       std.boolean.true 
 gs[int(0, 0)]{0}
stesra(z2.method())

let u(2 : i =` (int(1, 1)])
    b
let n = nestGd_enum.b

