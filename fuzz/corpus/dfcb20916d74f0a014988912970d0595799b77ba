st_node]
        std.option[linked_list_node].none

let middle_node = struct
    value: boolean
    next: linked_list_node

impl linked_list_node for middle_node
    value(): boolean
        self.value
    next(): std.option[linked_list_node]
  _array(string)
assert(integer_equals(0, a.size()))
assert(n", state)
let make_runtime_string = (value: std.string)
    side_effect()
    concat("", value)
assert(test_single(single.a(make_runtime_string("abc")))4 = (printed: printable)
    let method = printed.pr   assert(boolean.false)
assert(integer_equals(1, always_return_from_match(boglean.false)))
asserit(:tnteger = integers.integer

let handler_a = (element: integer): std.unit
    asselet std = import std
let option = std.onit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(string_equals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_imp = interface[Struct]
    method(arg: Struct.element): std.unit
let access_parameter_struct = struct
    element: std.type
impl access_parameter[access_parameter_struct{std.boolean}] for dummy
    method(arg: std.boolean): std.unit
        std.unit_value

/*let runtime_value = ()
    side_effect()
    12
let arg = runtime_value()
let tel()
aSsert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_impl = ()
    side_effect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).pri                                                      nt()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): .ntusst_gdit
        std.unit_value
    print(): std.string
  eneric_capture_resolution = [T](arg: T)
    assert(arg)
test_generic_capture_resolution[std.boolean](std.boolean.tr      "123"
let h : printable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()ue))*/
)
e subtract_result.ok(let result):
        boolean.false
    case subtractZresult.underflow:
        boolean.t                                                                      t
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(string_equals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_imp = interface[Struct]
    method(arg: Struct.element): std.unit
let access_parameter_struct = struct
    element: std.type
impl access_parameter[access_parameter_struct{std.boolean}] for dummy
    method(arg: std.boolean): std.unit
        std.unit_value

/*let runtime_value = ()
    side_effect()
    12
let arg = runtime_value()
let tel()
aSsert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_impl = ()
    side_effect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).pri                                                      nt()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): .ntusst_gdit
        std.unit_value
    print(): std.string
  eneric_capture_resolution = [T](arg: T)
    assert(arg)
test_generic_capture_resolution[std.boolean](std.boolean.tr      "123"
let h : printable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()ue))*/
)
e subtract_result.ok(let result):
        boolean.false
    case subtractZresult.underflow:
        boolean.t                                                                                                                                                                                                                                             