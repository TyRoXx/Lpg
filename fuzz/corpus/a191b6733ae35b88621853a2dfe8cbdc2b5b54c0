l    lgorithm = import algorithm
let std = import std
let integers = i55554orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empboolean): boolean
    booort std
let es = import ecmascript
let option = std.option

(window: host_value, host: se.host)ert(not(alglet std = import std

let require_comlet std = import std

let single_     "r = enum[T]
    a(T)555554<5555555555555555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_arr55555555orithm.any_of[boolean, type_of(false_predicate)](new_array i(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(boolean.true))
asser//compile_time evaluation
let d = import std

let single_paramet