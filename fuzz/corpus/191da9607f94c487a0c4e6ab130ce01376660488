let std = import std

let printe ab l=interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
(    let string = method()

let printable2 = interface
    print(): std.string
    other_merint = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printablelstate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.false
)
assert(match pass_tristate(trista                                                     printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printablelstate.a: boolean.false
    case tristate.b: boolean.true
    case tristate.c: boolean.false
)
assert(match pass_tristate(trista                                                                                   ass
    arg
assert(match
    case tristate.c: boolean.false
)
assert(match pass_tristate(trista                                                       )                           assert(string_equals("abc", ma()[std.u           case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristatase option[std.array[string]].some(let element2):
                assert(c.append("abc"))
         arg
assert(match         match element2.load(pas0)
  s_bistan nest generic funcs = pri  e