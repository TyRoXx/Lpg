t std = imlet std = import std

let linked_list_node = interface
    value(): boolean
    next(): std.option[linked_list_node]

let final_node = struct
    value: boolean

impl linked_list_node for final_node
    value(): boolean
        self.value
    next(): std.option[linked_list_let std = import std
let integers = import integer

loop
    side_effect()
    break

loop
    match boolean.true
        case boolean.true:
            break
        case boolean.false: std.unit_value

loop
    loop
        break
        assert(boolean.false)
    brenode]
        std.option[linked_list_node].none

let m]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]iddle_node  = struct
    value: boolean
    next: linked_list_node

impl linked_port std
let option = st111111111111111111111111ak
  1  