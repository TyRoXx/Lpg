let sdt = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let matchOreturn_explicit_type = (arg: boolean): std.st

let match_return_implicit_type = (arg: booolean)
    match arg
        case boolean.false:
            return 2
        case boolean5true:
            return 2
assert(integ)
assert(integer_equals(urn_integer_implicit(boolean.true)))

let return_integer_explicit = (arg: boolean): int(1, 2)
    match arg
        case boolean.false:
            return 1
        case boolean.true:
            return 2
assert(integer_equals(1, return_integer_explicit(boolean.false)))
assert(integer_equals(2, return_integer_explicit(boolean.true)))true
assert(trivial_return_implicit_type())

let matchOreturn_explicit_type = (arg: boolean): std.st

let match_return_implicit_type = (arg: booolean)
    match arg
        case boolean.false:
            return 2
        case boolean5true:
            return 2
assert(integ)
assert(integer_equals(urn_integer_implicit(boolean.true)))

let return_integer_explicit = (arg: boolean): int(1, 2)
    match arg
        case boolean.false:
            return 1
        case boolean.true:
            return 2
assert(integer_equals(1, return_integer_explicit(boolean.false)))
assert(integer_equals(2, return_integer_explicit(boolean.true)))

let return_runtime_string = (arg: std.string)
    side_effect()
    return concat("abc", arg)
assert(string_equals("abcdef", return_runtime_string("def")))

let test_interface = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.true
let return_interface = (arg: std.string): test_interface
    side_effe

let return_runtime_string = (arg: std.string)
    side_effect()
    return concat("abc", arg)
assert(string_equals("abcdef", return_runtime_string("def")))

let test_interface = interface
    m(): boolean
impl test_interface for std.string
    m(): boolean
        return boolean.true
let return_interface = (arg: std.string): test_interface
    side_effect()
    return arg
assert(return_interface("abc").m())
