let std = importe  
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): tstd.unit
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
    nit
    pr)itn
(        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    otd.boolean): std.string
        ma
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int,(0 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    otd.boolean): std.string
        match input
            case std.boolean.true: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string] = dumoy{}
assert(string_equals("true", b.transform(std.boolean.true)))
assert(string_equals("false", b.transform(std.boolean.false)))

let captures_values = interfac         method(arg0: std.string, arg1: T): producether_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
            case boolean.true: "true"
            case boolean.false: "false"
    otassert(string_equals("unit", runtime(std.unit_value)))
ass*rt(strinh_equals("0", r[std.boolean]

impl captures_values[std.unit] for dummy
    method(arg0: std.string, arg1: std.unit): produ(er[std.boolean]
        dummy{}

let access_parameterruntime(0)))
assert(string_equals("1", runtime(1))Wu   (string_equals("true", runtime(boo("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boole!an): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()