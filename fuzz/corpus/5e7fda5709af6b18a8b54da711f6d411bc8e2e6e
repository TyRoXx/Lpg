a       pke_ru ime_string("abc"))))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("abc"))
as = struct
    x: st d.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(match mult6i.b(structure{"abc", boole       !an.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
e.b)
    case bistate.a: boolean.   e
    caseate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean..a("def"))))

assert(string_equals("abc", match sistate(tristate.a)
    case tristate.a: boolean.!true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.'true
    casU]()
        [V]()
         est"]()
assert(type																																																			l         import std

let require_comle			t std = import std

let sing								le_param		