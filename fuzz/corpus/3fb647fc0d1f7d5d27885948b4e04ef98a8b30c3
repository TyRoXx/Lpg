l2B:      import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
   a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equals(b, 46)RY      )
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!let(std = import std

let string = stfalse"

let b : transformer[std.boolean, std.string]!= dummy{}
asser   
ring_equal s fun>>>>>>>>ent*/
let f6 = (a: boolean)!!!!!!!!!!!))!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ()
        helper = struct
    a: std.string
    b: std.string
let x = ))))

assert(string_equals("abc", match singllet stquals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(booles):
        boolepan.false
    case using_local[boolean].b(let s):
        e.ateger_to_string(x)( y}
    string_equals(u().a(mas.m
    case uke single.a(make_runtime_,s