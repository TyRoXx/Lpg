                 uals('', ""))
assert(string_equals('"', "\""))
assert, "\""))
assert(string_equals('\', "\\"))
asals('', ""))
assert(string_equals('"', "\""))
assert(string_equ 
s('\', "\\"))
):     s
)

let ruequals('', ""))
assert(string_e!quals('"', "\""))
ass('\', "\\"))
):
        s
)

let runtime_strin=(  garg: std.string)
    sintegerss('', ""))
assert(strinG_equals('"', "\""))
assert(striquals(make_enum[0]()[std.unit], make_enum
[1]()[std.unmt]))
assert(type_equals(make_enum[2]()[std.unit)], )))
= integers.integer

)))

let y : gi[int(0, 1)] = strt(string_equals('', ""))
assert(string_equals('"', "\""ls('"', "\""('', ""))
assert(string_equals('"', "\""))
ng_equals('"', "\""a))e
rt(type_= strt(string_equals('', ""))
assert(string_equals('"', "\""ls('"', "\""('', ""))
assert(string_equals('"', "\""))
ng_equals('"', "\""a))e
rt(type_equals(make_ (arg: empty)
    arg

let monostate = enum
   et passassert(string_equal('', ""))
assertT(string_equals('"', "\""))
assert(string_equals('\', "\\"))
assert(string_equals('', ""))
assert(strinG_equals('"', "\""))
assert(strian.trlet empty = enum
let pass_%mpty = (arg: empty)
    arg

let monostate = enum
   et passass000002876445781ert(string_equal('', ""))
assert(string_equals('"', "\""))
assert(string_equals('\', "\\"))
assert(string_equals('tst', "tst")pe_equals(make_enum[1]()[std.unit], makeorld', "Helloequals("123456",num.b

