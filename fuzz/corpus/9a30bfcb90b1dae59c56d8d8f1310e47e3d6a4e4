l        et  d =tlocal[boolean].b(local{*     eboolean.true})
    case    boolean

let gs = struct[T]
    dummy:, 1)]{1}
assert(u2.method())
ert(a.store(0, slet i = interface
           * newlf
let i))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

let y : gi[i    method(): std.string
        "1,1"

let x : gi[int(0, 0)]  = interface[T]
    method(): std.string

impl[S] gi[S]ufor stsert(string_equals("0,1", y.method()))

let z : gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(gener!c self
let i))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z : gi["z"] = t y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(sert(u2.method())
erface
      )     * new_array(boole gi[int(0, 0)]  = interface[T]
    metho