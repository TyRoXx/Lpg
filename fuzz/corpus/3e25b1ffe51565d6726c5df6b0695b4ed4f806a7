l  et std = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    c ost(): std.uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxnit
    continue(): std.unit
    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// iml pfor generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z = import std

// impl for generic interface
let gi = interface[T]
    method(t
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): stce
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit
u_velaassert(string_equals("0,1", y.method()))

let    default(): std = import std

// impl for generic interface
let  igtin =erface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0",let std ic functions as expected     quals("0, std.ungggggggf = [T]()
    [