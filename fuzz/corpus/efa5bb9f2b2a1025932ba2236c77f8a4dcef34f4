let std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
            case boolean.true: "true"
            case boolean.false: "false"
    otassert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
   let std = import std
let integers = import integer
let integer = integers.integer

match subtract(std.runtime_value[integer](0), 0)
    case subtract_result.ok(let result):
        assert(integer_equals(0, result))
    case subt method(a: boolean, b: boolean): printable2

impl tesract_result.underflow:
        fail()

t_intmaerface ftcoh