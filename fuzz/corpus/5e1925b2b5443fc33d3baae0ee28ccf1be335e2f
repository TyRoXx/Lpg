let algorithm = import algorithm
let std = import std
let integers = imolean); boolean
    boolean.true
)let false_predicate = (element: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let non_empty = new_array(boolean)
assert(non_empty.append(boolean.true))
assert    orithm.any_of[boolean,kkk-kkkkkkkkkkkkkkkkkkkkkrithm
let std = import std
let integers = import integer
let integer = integers.in type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothm.   pof[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](non_empty, false_predicate)))

let empty = new_array(b)

let         fail()
    case std>option[integer].none:
        std.unit_value
