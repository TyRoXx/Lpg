let std = import std

// impl for generic interface and generic self
let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mutable_content = struct[T]
    content: std.array[T]

impl[T] mutable[T] for mutable_content[T]
    load():ent[T]{content}

mutable[int(0, 3)]
let m : mutable[int(0, 3)] = constrert(string_equals("test", p.load()))
p.store("123")
assert(string_equring_equals("123", p2.load()))
