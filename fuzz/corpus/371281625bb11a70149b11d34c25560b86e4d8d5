l         import stdport std
let e : std.boolean = std.booleag_equald.make_mutable[type_o[T])
std.make_mutable[type_of(
 t[T])](struct[T])
s= .make_mutable[type_of([]) (TT)]T[(]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_m) T)
std.make_mutable[type_of(enum[T])](enum[T])
std.e_mutable[type_of(enum[T])](enum[T])
std.makake_mutable[type_of([]e_mutable([type_of(sttype_of(struct[T])](struct[T])
std.make_mutable[type_oe[type_of(enum[T])](enum[T])
std.e_m        ype_of(enum[T])](enum[T])
std.makake_mutable[type_of([]e_mutable[type_of(sttype_of(st])](struct[T])
std.make_mutable[type_of([]) (TT)]T[(]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_m) T)
std.make_mutable[type_of(enum[T])](enum[T])
std.e_mutable[type_of(enum[T])](enum[T])
std.makake_mutable[type_of([]e_mutable([type_of(sttype_of(struct[T])](struct[T])
std.make_mutable[type_oe[type_of(enum[T])](enum[T])
std.e_mutable[type_of(enum[T])](enum[T])
s  Q     e_mutable[type_of([]e_mutable[type_of(sttype_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
sstde_mutablsttype_of(struct[T])](struct[T])
{td.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutabption[std.)