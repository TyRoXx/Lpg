l oet std = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
          :: std.unit
    continue(): std.unit
    default(): std.unit
    do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.uni.unit
    static(): std.unit
   n switch(): std.unit
    typedef(): std.un/t
    union(): std.unit
    unsigned(): std.unit
    void(): std.unit
    volatile(): std.unit
    while(): std.                                            rint(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_methodterface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable4)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    otheprintable2 for boolean
    print()
        match self
            case boolean.true: \rue"
            case boolean.false: "false"
 L          otassert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", r[std.boolean]

impl captures_values[std.unit] for dummy
    method(arg0: std.string, arg1: std.unit): producer[std.boolean]
        dummy{}

let access_parameterruntime(0)))
assert(string_equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a1 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()