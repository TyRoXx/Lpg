a 
       pke_rmun_iedstring(  (tristate.b)
      )
 as3       .not(test_single(mun_ietstring("abc""abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\\\\\\\\\\\\\\", boole    arg: empty)
f   arg

let monostate = enum
    a
let pass_mh single.a(make single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s      cture{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    b(structure)
    c(std.unit)
    d(bring("abc"))
assert(string_equals("abc", match return_satteful_enum()
    casunit)
    \(boolean)
    e
    m   s        hamult5i.b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",`  oe olarg:se tristtae.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.bsert(string_equals("abc", match return_stateful_enum()
    casunit)
    \(boogean)
    e
    m   s        hamult1i.b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\",` b   oe olarg: empty)
f   arg

let monostate = enum
    a
let pass_monostat    