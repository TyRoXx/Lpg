l  et std = import std

let single_par p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assu                                                                        $                                                                 e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = impagain = import stlet e : ()))

let o= make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 d.string]("test")d()))
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()        ))

let o = make_mutable[std.s
lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals   side_effect()ean.tbxe
    case tristate.b: booan.               e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("val
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = impagain = i p.load()))
p.store("123")
assert(string_equals("123", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()))

let o = make_mutable[std.sse()))
assert(n", sta23", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()))

let o = make_mutable[std.s
lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals   side_effect()ean.tbxe
    case tristate.b: booan.               e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enum[!]
    a std.string)
    [[[[[[[[[[[[[[[
[[[[[[[[[[[[[[[[[[[[[[[[[[[[r   c
l&e tpass_tristate   = import std

le:t single_p     ;    = enum[!]
    a std[[[te.b: b     a
    b
    c
let pass_tristate => (arg: trista e)
    ar[[[[[[[[[[[[r .l  oad c
=l