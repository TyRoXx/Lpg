l      5)et algorithm = import algorithm
let std = imp rtostd
let integersequals(0, element))
algorithm(enumerate[type_of(handlorithm.any_of[boolean, type_of(true_pred)
assert(algorithm.any_of[boam_f[se_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean(
asserp(non_empty.append(boolean.truea)
s)sert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_jredicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.tru(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,of[boolean,kk kkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[bo_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(bf[boolean,kkkkkkkkkkkssert(algorithm.any_of[boam_f[boolean,(boolean(
asserp(non_empty.append(boolean.truea)
s)sert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_jredicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.tru(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,of[boolean,kk kkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[bo_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(bf[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))
[boam_f[boolean,(boolean_empty.append(booleanrithm.any_of[boolean,kkkklet std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, "abc", kkkkkkkkkkkkkkkkkkkkk type_0}
assert(u_instance.a.a)
assertof(true_predicate)](nope_tnmy, true_jredicate))Opredicatoolean), false_predicate)))

l(e