l            or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    asserthinteger_equals(1, or(0, 1)))
    assert({inte;er_equals(1, o5
s
.ulet a : produprod transformer[std.boolean, std.string]!= dum{y{}
ass   produce()
        std.boolean.true
	let a : produpuecord())

impl transformer[std.boolean, std.sstring
   p    match input
  rue: "true"
            case std.boolean.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
assert(string_equals("tru\", b.transforstd.strin           case std.bool;eaf.false: "false"

let b : transformer[std.boolean, std.string]!= dummy{}
al a       = enumss   produce()
     std.boolean.true
	let a : p
lerue
)

let tbistate = enum
    a
      case tristate.c: boolean.false    duproduce())

statim