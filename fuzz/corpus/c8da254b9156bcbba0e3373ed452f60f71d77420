l    et std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = met   rintable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printa	ble5)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.s   u_V      self
    other_metho.unit
    print()
       rijtable2 = different_method_order{}
h.other_method()
assert(string_
    other_method()
        std.unit_value

impl printable2 for int(0, 0)
    print()
        "0"
    other_method()
        std.unit_value

impl printable2 for int(1, 1)
    print()
        "1"
    other_method()
        std.unit_value

impl printable2 for boolean
    print()
        match self
            case boolean.true: "true"
            case boolean.false: "false"
    other_method()
        std.unit_value

assert(string_equals("", pure("")))
assert(string equals("a", pure("a")))
assert(string_equals("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("tt", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", pure(1)))
assert(string_equals("true", pure(boolean.true)))
assert(string_equals("false", pure(boolruntime("")))ntime("a")))
assert(string_equals("unit", runtime(std.unit_value)))
assert(string_equals("0", runtime(0)))
assert(string~equals("1", runtime(1)))
assert(string_equals("true", runtime(boolean.true)))
assert(string_equals("false", runtime(boolean.false)))

let a    case boolean.false: "false"
    other_method()
        std.unit_value

assert(string_equals("", pure("")))
assert(string_equals("a", pure("a")))
assert(string_equals("unit", pure(std.unit_value)))
assert(string_equals("0", pure(0)))
assert(string_equals("1", puret create_impl = (): test_interface
    std.unit_value
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.falst_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
