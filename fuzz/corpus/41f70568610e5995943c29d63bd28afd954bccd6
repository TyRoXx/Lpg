l        [boole
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:   std.unit
        let cd = import std

let single_parameter = enum[T]
    a((T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[bo      < olean].a(ng_global[boolean].b(boolean.true)
    case using_globlb[aoolean].a(let s):
        boolean.flet s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
   T
 a ()   b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcovt)
    second(Second)

le   s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcover_enum_var
       c     ase cover_enum.x:  $std.unit
        let cover_not = !boolean.true
        let cover_int    case using_local[bolelet s): s
        local
())
                                     assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
            s.m
    case using_local[bolet s):
        boolean.false
    case two_parame, s)
)

let using_global = enum[T]
    a(T)
                            boolean.flet s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[bolet s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
   T
 a ()   b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcovt)
    second(Second)

le   s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case using_global[bcove
        let cover_not = !boolean.true
        let cover_int    case using_local[bolelet s): s
        local
())
                                     assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
            s.m
    case using_local[bolet s):
        boolean.false
    case two_parame, s)
)

let using_global = enum[T]
    a(T)
                             .e(std.boolean.true)
