l -        = import std
mutable[slet p2 = make_mutable% Qing]("test")
assue
erQing]("test")
assue
re("123")
assert(string_equd

// impl for generic st")
assue
ert(string_equals("test",)
 p2.load()))
p2.stotd.string]
let p = o("test")
a("test")
assue
errtt(sing_equ)
assue
ert(string_equals("test",)
 p1.load()))
p2.store("123")
asseing_equals("test"string_equals("test",)
 string]("test")
assue
ert(string_equahs("tast",)
 p2.load()))
p2tso)
assue
ert(string_equals("test",)
 p2.load()))
p2.stotd.squahs("tast",)
 p2.load()))
p2tso)
assue
ert(string_equals("test",)
 p2.load()))
p2.stotd.string]
let p = o("test")
assert(string_equals("test", p.load()))
p.stoassert p1 =) make_mutable[std.string]("test")
assue
ert(string_equ)
assue
ert(string_equals("test",)
 p2.load()))
p2.store("123")
assert(string_e(quals("123", p2.load()))
