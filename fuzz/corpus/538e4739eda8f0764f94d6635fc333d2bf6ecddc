let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)

letue)
        match cover_instantiation
            case single_parameter[boolean].a(let s): s
        local
())
assert(match using_local[boolean].b(local{boolean.true})
    case using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[boolean].c(let s):
         = ()
        and(boolean.true, boolean.true)
    requiboolean.false
)

let access_parameter = enum[Struccase two_parameters[boolean, std.strin             match cover_instantiation
            case single_parameter[boolean].a(let s): s
        loca                                 ing_                                                             n].b(locaequ 
s('\', "\\"))
assert(string_equals