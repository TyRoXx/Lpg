l                 I
      5)et algorithm = impo I
      5)et algorithm = import algorithm
let std = imp rtostd
let integers = import integer
letgi eetnr = integers.integer

let handler_a = (element: integer): stlet qlgoicate = (element: boolean): booled.unit
    assert(intege_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkempty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[balgorithm.any_of[boolean,kkkt(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let n                                              othm.any_of[boolean,(boolean)
assa*y_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk typeoolean,kkkt(no, trueay(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case std.option[integer].some(let e):
        fail()
    cer): stdu.nit
    assert(integer_equals(0, element))
algorithm.enumerate[type_of(handler_a)](/, 0, handler_a)

let truelean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(booleanalse_predicate)](non_empty, an
false_pred    bi