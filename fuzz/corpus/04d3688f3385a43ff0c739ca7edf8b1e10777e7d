l  et std = import std

let single_p         = enum[T]
    a std.fect()
    concat("", arg)

let b = single_parameter[std.str  enumt std = import std
egers.u61

let test_or = [or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: int(0, 2))
    side_effect()ean.true
    case tristate.b: booan.false
    case bista[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[te.b: boolean.true
)

let tristteger_equals]OS_  _B (a: boolean, b: std.string, c: option, d: int(0, 2))
    sid[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[te.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate => (arg: tristate)
    ch pass_tristate(tristate.a)
  re)
    c(std.unit)
 ble2)
    let print = a.print
    let s = print()
       e