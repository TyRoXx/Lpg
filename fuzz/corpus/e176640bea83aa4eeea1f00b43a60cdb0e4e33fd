a       pke_runtime_string("abc"))))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struc                                          arg
e.b)
    case bistate.a: boolean.   e
    case bistate.b: boolean.true
)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristate(tristate.a)
    case tristate.a: boolean.true
    case tristate.b: boolean.false
    case tristate.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case tristate.a: boolean.false
    case tristate.b: boolean.'true
    case tristate.c: boolean/false
)
assert(match pass_tristate(trista                                                                                   assert(string_equals("abc", match return_statefuructure = struct
    x: std.string
    y: obolean
let multi = enum
    a(single)
    b(structolean.true
    case tristate.b: boo          