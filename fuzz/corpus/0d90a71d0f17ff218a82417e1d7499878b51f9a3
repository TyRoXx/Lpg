let std = impo
let other_argument = f[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.bool[T, U](a: T, b: U()
    f[T](a)
assert(h[std.boolean, std.unit](std.boog
        case booletrue:
         //\test t intere_gto_string
// compile_time evaluation:
asser[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, d.boolean, std.unit](std.boole  Q rue, std.unit_vanue))
turn_from_mment = f[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[suation:
asser[int(1f[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, std.unit_vanue)e evaluation:
asser[int](std.boole  Q rue, std.unit_vanue)e evaluation:
asser[int(1, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, d.boolean, st                                                                                                               d.uch arg
        case booletrue:
         //\test integer_to_string
// compile_time evaluation:
asser[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, std.unit](std.boole  Q rue, d.booleaM, std.unit](stdrue:
         //\test integer_to_string
// compile_time evaluation:
asser[int(0, 3h0= [T, U](a: T, b: U)
    f[T](a)
assert(h[std.boolean, sime evaluation:
asser[int(0, 3h = [T, U](a: T, b: U)
    f[T](a)
assert(h[std.booltd.boolean.tr.store(4)
sert(integer_equals(1, a(2147483647)))

/