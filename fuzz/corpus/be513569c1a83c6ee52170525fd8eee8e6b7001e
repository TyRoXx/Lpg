d      <3H[     !ion[string].some(lni", stat\@)
lide_effect()
    concat("", na", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
                                 i: conversion_test_interface

let conversion =sn_test    truct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(st Q 	t(te.mest{ltd.una", stat\test_single(single.a(m                                         (make_   r))))
assn_ conversion_test{std.una", stat\test_single(single.amake    side_effect()
    concat("", na", stat\te=sn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(st Q 	t(te.mest{ltd.una", stat\test_single(single.a(m                                         (make_   r))))
assn_ conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.mest{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_ot[T])](str{std.una", stat\test_single(single.a(make_runtime_string(`abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(te.mest{ltd.una", stat\test_single(single.a(make_runtime_string("abc"))))
assee(single.a(make_runtime_stringT("abc"))))
ass(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.mest{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_ot[T])](str{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))tat\test_single(single.a(make_runtime_string("abc"))))
assee(single.a(make_runtime_stringT("abc")))(
assn_tesof(std.option[std.unit].some)](std.option[std.un
std.tmake_mutabl