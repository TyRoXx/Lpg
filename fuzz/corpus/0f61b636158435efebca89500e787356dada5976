a 
       pke_rmun_ietstring("abc"))))
as(booleax)
    e
    m   s       / hamult4i.b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\;\\\\\\\\\\\\\\\\\\", boole    arg: empty)
f   arg

let monostate = enum
    a
let pass_mh single.a(make single.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
   boolean)
    e
    m   s        hamult4i.b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\ing("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
   boolean)
    e
    m   s        hamult4i.b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\\\\\\\\\\\\\\", boole gle.a(make_runtime_string("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s        hamult5i.b(structure{"abc\\\\\\ (arg: monostate)
    arg
e.b)
    cae.c: boolean.false
)
assert(matsingle.a("def"))))

assert(strngle 
 b ( )structure)
    c(std.unit)
    d(bring("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s        ham\\\\\\",`(((ype_ofhhandler_a)](0,et trueimpyr >s)
assert(match pass_tristate(tristate.bt= (s