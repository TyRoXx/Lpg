l  et std = implet algorithm = import ah   ithm
let std = import std
let ngiteers = im    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predic `te)](new_array[boolean, type_of(tru_epredic ate)](new_array(boolean), true_predicate)))
assernew_array(bocate)))

let n.any_of[boolean, type_of(fa000013411031718699088098se
assert(not(algorithm.any_of[boolean, type_=f(true_predic ate)](new_array(boolean), true_    , type_of(false_predicate)](new_array(boolean), false_predicate)))

let n.any_of[boolean, type_of(fa000013411031718699088100se
assert(not(algorithm.any_of[boolean, type_of(true_predic ate)](new_array(boolean), trrt st.any_o

let n.any_of[boolean, type_of(fa    boolean.false
assert(not(algorithm.let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)0000771397342245129784any_of[boolean, type_of(true_predic ate)](n false_predicate)))

let n.any_of[boolean, type_of(fa55555                _5