l           dst                   agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|yt)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type        atype_of(f.lf.load)
let lambda = () set std = import std
let std_again = import std
let e : std.boolean = std.boolean.                     ert)
let fQload : type_orue
let imports_are_equivalent : std_again.bo   olean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_runtime_string("abc"mutable[tyalue
std. make_ake_runtime_soring("abc"mutable[type_of(lambda)]))))