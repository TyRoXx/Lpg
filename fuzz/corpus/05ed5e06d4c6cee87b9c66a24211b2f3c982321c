i  nt(0, 1)] = std.unit_value
assert(string_equals("0,1", y      "?.mr std.unit
    met od(): std.string
        "0,0"

impl gi[int(0, 1)]      td.unit
    met od(): std.string
        "0,0"

impl gi[int(0, 1)]                              1)]                                                             l  et std = import sinteger_equals];S_  _B ([oOS_  _B (a: boolean, b: std.string, c: option, d: [[[[[tption[integerass_tristate(tristate.a)
  S_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: std.string, c: option, d: [[[[[tptio*n[integer].some(let e):
        fail()
    case s                        1)]                                                             l  et std = import sinteger_equals]OS_  _B ([oOS_  _B (a: boolean, b: std.string, c: option, d: [[[[[tptigi[int(0, 1n].a(boolean.rue)
    case std.option[integer].some(let e):
                      1)]                                        l  et std = import sinteger_equals]OS_  _B ([or]()
    assert%     _equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: std.string, c: option, d: [[[[[tptio*n[integer].some(let e):
        fail()
    case std.option[integeren.o_]ntime_impl    case 