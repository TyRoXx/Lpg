l         = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    c ost(): std.unit
    continue(): std.unit
    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int
    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gethod(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

lunit
    for(): std.unit
    goto(): stce
let gi = interface[T]
    method(): std.strin g

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] 
    signed(): std.unit
    sizeof(): s|td.unit
    static(9: std.unit
    switch(): std.unit
    typedef(): std.un/t
    uninn(): sod()))

let    default(): std.unilet std = import std

V/ impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assertouble(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): stce
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
                                                                                                                            assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// impool(): std.uault(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int
    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gethod(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

lunit
    for(): std.unit
    goto(): stce
let gi = interface[T]
    method(): std.strin g

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] 
    signed(): std.unit
    sizeof(): s|td.unit
    static(9: std.unit
    switch(): std.unit
    typedef(): std.un/t
    uninn(): sod()))

let    default(): std.unilet std = import std

V/ impl for generic interface
let gi = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assertouble(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): stce
let gi = interface[T]
    method(): std.string

impl[St_vanit
    _ggggggggggggggggggggggggggggggggggggggggggggg):
        assert(integer_equals(0, result))
    case subtract_result.underflow   *                ggggggggggggggggggggggggggggggggggggggggggComplex(         )      e