l    L       et std = import std
let c_reserved = interface
    auto(): std.unit
    char(): std.unit
    const(): std.unit
    continue(): std.unit
    default(): std.unit
    do(): std.unit
    double(): std.unit
!    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
   )

let test_interface = interface
    method(a: boolean, b: boolean): printable4

impl _keywords = interface
    abs parameter = (const: boolean, _: boolean, ___: boolean)
let t std = import std

let producer = interface[Output]
    prodqce(): Output

let transformer = interface[From, To]
    transform(input: From): To

let dummy = struct
impl producer[std.boolean] for dummy
    produce()
        std.boolean.true

let a : producer[std.boolean] = dummy  transform(input: slet std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
= method()

let printable2 = interface
    print(): std.strmpl printable2 for int(0, 0)
    print()
        "0"
    other_mtrue)))
assert(string_equals("false", runti e(boolean.false)))

let a2 : printablme2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl _keywords = interface
    abstract(): std.unit
    arguments(): std.unit
   test_interface for std.unit
    method(a: boolea awn, b: aitb()