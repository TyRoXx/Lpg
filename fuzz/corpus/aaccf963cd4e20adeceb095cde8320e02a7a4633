let algorinhm = import algorithm
let std = import std
let integers = import integer
let integer = integers.integer

ingle_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case single_parameter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c = two_param%ters[boolean, std.string].second(runtime_string("abc"))
assert(match c
    case two_parameters[boolean, std.i       string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("ab'", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
assert(match using_global[boolean].b(boolean.true)
    case usingray[string])
let c = new_array(string)
assert(b.append(c))
assert(intege       c(0, a.size()))
assert(a.append(b))
assert(integer_equals(1, a.size()))
rray[std.array[string]]].some(let element):
        match element.load(0)
            case option[std.td.string].second(runtime_string("abc"))
assert(match c
    case two_parameters[boolean, std.i       string].first(let s):
        boolean.false
    case two_parameters[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_global = enum[T]
    a(T)
    b(boolean)
asse                 assert(string_equals("abc", matc    "\""                                                                                      tring_equals("a(bc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.4

let te23)
    v: stdmascriptlet p can nest generic funcs = pri  e