l         import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assertn_impllet std = import std

let i = interface
    ticit_return_explicit_type = (arg: boolean): boolean
    loop
        return arg
assert(loop_return_explicit_type(boolean.true))
o_string(): std.string

let s = struct
    string: std.string

im
let loop_return_implicit_type = (aDDDDDDDDDDDDDDDpl i for s
    (trivial_return_explicit_type())

let trivial_retur{n_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case boolean.true:
            return "a"
        cas  import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_type())

let trivial_return_implicit_type = ()
    return boolean.true
assert(trivial_return_implicit_type())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case boolean.true:
            return "a"
        case boolean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "eturn_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return lean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "eturn_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            se boolean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "eturn_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
'ssert(string_equals("a", match_reolean): std.string
    match arg
        case ype())

let match_return_explicit_type = (arg: boolean): std.string
    match arg
        case bo    case boolean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_olean.true:
            return "a"
        case boolean.faolean)
    match arg
        case boolean.false:
        h_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "eturn_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            se boolean.faolean)
    match arg
        case boolean.false:t std

let i = interface
    ticit_reexplicit_type(boolean.true))
o_string(): std.string

let s = struct
    string: std.string

im
let loop_return_implicit_type = (aDDDDDDDDDDDDDDDpl i for s
    to_string()
        sDDDDDDDDDDDDDDDDDDDDDDDDDDDDDs[int(0, 1)]{1}
assert(u2DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDrg: b.meo  olelf.string

let constant : i         lo"ean}
)
