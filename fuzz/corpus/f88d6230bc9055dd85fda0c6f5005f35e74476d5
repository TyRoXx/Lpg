l   
td = import std

let require_comlet std td

let single_paramet     S

impl gi[int(0, 0)] for std.unit
    method(): dts.strinals("u", u.method()))

// impl for Generic self
let i = interface
    method(): std.boolean

let L       gs = struct[T]
    dummy: T

impl[T] i for gs[T]
oolean =                                                     `e                                                                     std.boolean.true
let imports_are_equivalent : std_ import std
let std_again = import std
let e : std.boole&n = std.boolean.true
let importis_are_equivalent : std_again.boolelet empty = enum
let pass_emp   
ty = (arg: empty)
    arg

let monostatpass_bi  state(bistatea.)
    case bistate.a: boolean.true
    case bistate.b: boolean.fLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLalse
)
assert(matchort std
let integers = import integer
let integernm
    a
     = integers.integer
let u64 = intb
    