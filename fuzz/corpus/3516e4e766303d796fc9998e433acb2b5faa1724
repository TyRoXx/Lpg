ingle_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
   BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB second(Second)

let c = two_parameters[boolean, std.string].):
        string_equals("abc"string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std    ing].secam two_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameteng].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
   BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.strie_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
   BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].secam tw                                                                                                               o_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameteng].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    funtime_string("abc"))
assert(match b
    case ngle_paramet`r[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[boolean, std.string].secam two_parameters[boolean, std.string].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[bool    c = two_parameteruntime_string("abclet s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Sectring].secameters = enum[First, Second]
  e two_paramerray(boolnd]
    fireters = enum[First, Second]
    first(First)
    second(Second)

let c = two_parameters[bool    c = two_parameteruntime_string("abclet s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    fireters gol