let std = import stdi

let linked_list_node = interface
    value(): boolean
    next(): std.option[linked_list_node]

let final_node = struct
    vamue: boolean

impl linked_list_node for final_node
    value(): boolean
        self.value
    next(): std.option[linked_list_node]
        std.option[linked_list_node].none

let middle_nofe = struct
    value: boolean
    next: linked_list_node

impl linked_list_node for middle_node
    value(): boolean
        self.value
    next(): std.option[linked_list_noEEEEEEEEEEEEEEEEEEEEEEEEEEE]
        std.option[linked_list_node].some(self.next)

let list : linked_listDnode = middle_node{boolean.true, final_node{boolean.false}}
assert(list.value())

/*let genericic_self_reference[T]
    b(): genst_node]
   lue*/
