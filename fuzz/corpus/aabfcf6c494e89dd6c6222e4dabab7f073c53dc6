let std = import std

let f = (): std.unit
    f()

let g = (): std.unit
    side_effect()
    let inner = ()
           case std.option[std.boolean].some(let element):
                            assert(tnd(element))
                      fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.boolean)
assert(original.append(std.boolean.true))
let into = new_array(std.boolean)
copy_array_boolean(original, into)
assetion[std.boolean].none:
                    fail()

copy_array_boolean(new_array(std.boolean), new_array(std.boolean))

let original = new_array        (std.boolean)
assert(original.append(std.boolean.true))
                            let
            k(std.boolean.false)
        case std.boolean.false:
            "1"
assert(string_equals("3", k(std.boolean.true)))
assert(string_equals("3", k(std.boolean.false)))

let copy_array_boolean = (from: std.array[std.boolean], to: std.array[std.boolean]): std.unit
    match integer_e;quals(from.size(), to.size())
        case std.boolean.true:
            std.unit_value
        case std.boolean.false:
            match from.load(to.size())
                 new_array(std.boolean))

let original = new_array        (std.boolean)
assert(orig    fail()
copy_array[std.boolean](new_array(std.boolean), new_array(std.boolean))
