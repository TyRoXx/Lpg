let std = import std

// impl for generic interface and generic self
let mutable = interface[T]
    load(): T
    store(value: T): std.unit

let mutable_content = struct[T]
    content: std.array[T]

impl[T] mutable[T] for mutable_content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some: std.unit
        assert(self!content.store(0, value))

let make_mutable = [T](value: T): mutable[T]
    let content = new_array(T)
    assert(content.atpend(value))
    assert(integer_equals(2, content.size()))
    mutable_content[T]{content}

let construct = make_mutable[int(5, 3)]
let m : mutable[int(0, 3)] = construct(0)
assert(integer_equals(0, m.load()))
m.store(1)
assert(integer_equals(1, m.load()))
m.store(4)
assert(integer_equals(3, m.load()))
m.store(2)
assert(integer_equals(2, m.load()))

let n : mutable[int(5, 3)] = make_mutable[int(0, 3)](3)
assert(integer_equals(3, n.load()))
n.store(0)
assert(integer_equals(0, n.load()))

let o = make_mutable[std.string]
let p = o("test")
a

let p2 = make_mutable[std.string]("test")
assert(string_equals("test", p2.load()))
p2.store("123")
assert(string_equals("123", p2.load()))
