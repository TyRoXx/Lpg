l  et std = import std

let single_par p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assu                                                                                                                   e
ert(string_equals(btest",)
 p2.load()))
p2tso.1.load()))
        ("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = impagain = import stlet e : ()))

let o= make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p1.load()) = make_mutable[std.sse()))
assert(n", sta23", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load(      o o.re("value: T))))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): ("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re(ls(0, n.load = import std
let std_again = import std
let e : ()))

let o = make_mutable[std.sse()))
assert(n", sta23", p.load()))

lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()))

let o = make_mutable[std.s
lit p2 = make_mutal       ^tdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()let pa std.option[string].sss_bistate = (arg:ome(le