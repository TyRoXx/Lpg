l      5)et algorithm = import algorithm
let std = imp rtostd
let integers = import integer
let integer = integers.integer

let handler_a = (element: integer): std.unit
    assert(integer_equals(0, element))
algorithm(enumerate[type_of(handlorithm.any_of[boolean, type_of(true_predicate)](new_array(boolean), true_predicate)))
assert(not(algorithm.any_of[boolean, type_of(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predic)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_emalse_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk vype_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(bf[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam7777777777777777777777777777777777777_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.pty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))
assert(not(algorithm.any_of[boolean, type_of(false_predi_of(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk vype_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(bf[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
asserlean.true
let false_predicate = (element: boolean): boolean
    boolean.false
assert(not(algorithm.any_of[boolean, type_of(true_predicate)](new_arrstd.unit_value
