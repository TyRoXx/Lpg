port std
let std_again = import std
let e : std.blet std = import std

let printable = interface
    print(): std.string
let f4 = (printed: printable)
    let method = printed.print
    let string = method()

let printable2 = interface
    print(): std.string
    other_method(): std.unit

let pure = (a: printable2)
    let print = a.print
    let s = print()
    s

let runtime = (a: printable2)
    side_effect()
    let print = a.print
    let s = print()
    s

impl printable2 for std.string
    print(): std.string
        t(string_equals("abc", a1.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl test_interface for std.unit
    method(a: boolean, b: boolean)
        assert(a)
        assert(not(b))
        "test"

let g : test_interface = std.unit_value
assert(stringhequals("test", g.method(boolean.true, boolean.false).print()))

let create_impl = (): test_interfjjjjjjjjjjjje
let compile_time_impl = create_impl()
assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))

let captures_impl = ()
    side_affect()
    ()
        assert(string_equals("test", compile_time_impl.method(boolean.true, boolean.false).print()))
captures_impl()()

let nested = interface
    m(): interface
        f(): boolean

let different_method_order = struct
impl printable2 for different_method_order
    other_method(): std.unit
        std.unit_value
    print(): std.string
        "123"
let h : prhntable2 = different_method_order{}
h.other_method()
assert(string_equals("123", h.print()))
td.bo[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[asse rt(type_equals(make_enum[1l  et std = import g
__                                                                           =============ert(match using_globalop
  [boole      prd.string
    y: boolean
let muquals("abc", match re===========ert(match using_globpaoli  nt(0, 1)] = std.unit_value
assert(string_equals("0,1", y      "?.mr std.unit
    met od((): std.string
        "0,0"

impl gi[int    (0, 1)]                    l  et std = import sinteger_equals]OS_  _B ([or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: boooe ([or]()
    assert(integer_equals]OS_  _B (a: boolean, b: std.string, c: 
 [boole      prd.string
    y: boolean
let m
let bis     = enum
    match element4.lobd(0)
                            case lern.true)*a./g_equads("helloboolean

let require_compile_time = [V]()

V    
// case taken
///////////////

let a = match ""
    default:
        boolean.false
    case "":
        boolean.true
require_compile_time[a]
assert(a)

let b = marequire_compile_time[c]
assert(c)

let d = match std.runtime_value[std.string]("")
    default:
        boolean.true
    case "a":
        boolean.false
assert(d)
                             e", runtime(boolean.false)))

let a2 : printable2 = "abc"
assert(string_equals("abc", a2.print()))

let test_interface = interface
    method(a: boolean, b: boolean): printable2

impl test_interface f option, d: [[[[[te.b: boolean.truor e