    case boolean.true:
  2          return 2
  )
    e
    f
assert(match mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostate = enum
    a
let pass_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean                                   "\""                                                                                                                                                  i___                                                                                                                    i___             let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

let ruterface
            m(): boolean
        impl cover_interface for boolean
            m(): boolean
  -             self
        let cover_instantiation =                                 
                                             single_parameter[boolean].a(boolean.true)
        match cover_instantiation
            case single_parameter[boolean].a(let s): s
        local
())
assert(match using_local[boolean].b(local{boolean.true})
    case                                                                                                                                                                                                      !                                                                                         using_local[boolean].a(let s):
        boolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[boolean].c(let  cs):
         = ()                                                                                            !                                                                                                                                             sert
        and(boolean.ers[boolean, std.string].second(let s):
        string_equals("abc", s)
)

let using_gl"abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    f
assert(matc0h mult8i.b(structure{"abc", boolean.trlet empty = enum
let pass_empty = (arg: empty)
    arg

let monostatch caover_n