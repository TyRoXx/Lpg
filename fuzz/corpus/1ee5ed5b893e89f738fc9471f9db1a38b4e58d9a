      accessing_struct = enum[T]
    a(T)
  ssert(string_equals("abc", matclet sets = import set
let st _= import std

let s = sets.make_linea   t[std.boolains(std.boolean.false))ae(std.bool.enatrue)))
assert(not(s.remove(std.boolean.fal("abc"))
assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): state
))

let structure = structtate): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    fuassert(match mult5.false: "false"

let b : transformer[std.bo[
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boolean)
    e
    fuassert(match mult5.false: "false"

let b : transformer[std.bo[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[assert(type_equals(make_enum[1]()[std.unit],mport std
let option = sert(st]