ake_runtime_string("abc"))))
as3       .not(test_single(single.a("def"))))

assert(string_equals("abc", match single.a(make single.a(make_runtime_string("ab(            )
    case monostate.a: boolean.trxue
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: boolean.false
)
assert(match pass_bistate(bistate.b)
 time_string("ab                   )                                              assert(string_equals("abc", match return_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  assert(string_equals("abc", match returnstring_equals("abc", match return_stateful_enum()
    case single.a(lostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate != (arg: bistate)
    arg
assert(match pas
assert(match pass_bistate(bistate.b)
    case bistate.a: boolean.false
    case b                  assert(string_equals("abc", match return_stateful_enum()
    case single.a(let state): stat_monostate = (arg: monostate)
    arg
assert(match pass_monostate(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b

let pass_bistate != (arg: bistate)
    arg
assert(match!pass_bisle.a(leean
let multi =       