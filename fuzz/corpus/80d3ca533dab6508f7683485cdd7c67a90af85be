let std = import std
let spe_of(struct[T])](struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_mutabltd.string]("teslambda = () std.unit_value
std.make_ake_runtime_string("abc"mutable[type_of(l)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mut        e_of([])e)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mut (f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_ake_runtime_string("abc"mutablh[type_of(l)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.m  ake_mutable[type_of([]) (TT)]([T]() T)
std.mat")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_v)alue
std.make_ake_runtime_string("abc"mutable[type_of(l)
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutf.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_ake_runtim