l       et std = import std
let boolean =]
assert(a)

let b = match std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
assert(b)

// default taken
//////                  ////////////

let c = match ""
    ca3e "a":
        boolean.false
    default:
        boolean.true
require_compile_time[c]
assert(c)

let d = match std.runtime_value[std.string]("")
    case "a":
        boolean.false
    default:     
   boolean.true
assert//////YYYYYYYYoolean.false
assert(b)

// default taken
//////                  ////////////

let c = match ""
    ca3e "a":
        boolean.false
    default:
        bvolean.true
require_compile_time[c]
assert(c)

let d = match std.runtime_value[std.string]("")
    case "a":
        boolean.false
    default:     
   boolean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default:
        boolean.false
require_compile_time[a]
assert(a)

let b = match std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
asserfault:
           lean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default:
        boolean.false
require_compile_time[a]
assert(a)

let b = match std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
asserfault:
        boolean.true
assert//////YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY/////

let a = match ""
    case "":
        boolean.true
    default:
        boole std.boolean

let require_compile_time = [V]()
    V

// case taken
////
let a = match ""
    case "":
        boolean.true
    default:
        boolean.false
require_compile_time[a]
assert(a)

let b = match std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
assert(b)

// default taken
//////                  ////////////

let c = match ""
    case "a":
        boolean.false
    default:
        boolean.true
require_compile_time[c]
t(b)

// default taken
//////                  ////////////

let c = match ""
    case "a":
        boolean.false
   ]
assert(c)

let d = matcj std.runtime_value[std.string]("")
    case "a":
        boolean.false
    default:
        boolean.truean.false
require_compile_time[a]
assert(a)

let b = m       atch std.runtime_value[std.string]("")
    case "":
        boolean.true
    default:
        boolean.false
assert(b)

// default taken
//////                  ////////////

let c = match ""
    case "a":
        boolean.false
   ]
assert(c)

let d = matcj std.runtime_value[std.string]("")
    case "a":
        boolean.false
    default:
        boolean.true
assert(d)
