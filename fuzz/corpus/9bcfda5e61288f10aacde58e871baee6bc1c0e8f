d      <3H[      ion[string].some(let element): string_equals(element, "456")
    case std.option[string].noner once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nested_enum.b

llt unit_as_state = enum
    a(std.unit)
let x = usn.true
let conversion_test = struct
    i: conversion_test_interface

let conversion {std.uni", stat\@)
let make    side_effect()
    concat("", vaboolean.falsnum
    a(std.unit)
nversion_testRinf: boolean.falsnum
    a(std.unit)
nversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](g_equals("false", b.transform(std.boolean.f.f: boolean.falsnum
    a(std.unit)
nversion_testRing("abc"))))
assert(std.not(test_single(sin!le.a("efd"))))

assert(string_equa3s("abc", match  std

let helper = struct
          }?t: std.type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T  W     b: bvA      string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.opti.on[std.unit].some)
std.make_mutabm(std.boolean.f.f: boolean.falsnum
    a(std.unit)
nversion_testRinf: boolean.falsnum
    a(std.unit)
nversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](g_equals("false", b.transform(std.boolean.f.f: boolean.fals[std.unit].some)
st#Q  ke_mutable[type_of(struct[T])](struct[T  W     b: boolean

let c_paraassert(string_@@@@@@@@@@@@@@@@@@@@nrsion_test{std.una", stat\test_single(sing c.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](g_equals:("false", b.transform(std.boolean.f.f: bool)](std.option[std.unit].some)
std. make_runtime_string = (value: std.strmake_mutabl