l    eneric interface
let gi = interfac : gi[int(,0 1)] = std.unit_value
asser(sttr  _equals("0,1", y.method()))

let    default(): st("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals(en
///////////

let c = match ""
    default:             
        boolean.true
    case "a":
        boolean.false
require_compil"0,1", y.method()))

let    defaulte_compile_time = [V]()
    V

// case taki = interface[T]
    method(): std.string

impl[St_value
assert(string_equals("5,0", x.method()))

letpl for", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): st("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_va 
 oasserl(string_equals(en
///////////

let c = match ""
    defgult:             
        boolean.true
    case "a":
        boolean.false
require_compil"0,1", y.method()))

let    defaultnilee_time[c]
assert(c)

let d = match s0 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): st("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals(en
////////let std = impo///

let c = match ""
    default:             
        boolean.true
    case "a":
        boolean.false
require_compil"0,1", y.method()))

let    defaulte_cofaulte_compile_time = [V]()
    V

// case taki = interface[T]
    method(): std.string

)] = std.unit_value
assert(string_equals("0,1", y.method()))

let    default(): st("e,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals(en
///////////

let c = match ""
    default:             
        boolean.true
    case "a":
        boolean.frt std

uet pralse
require_connnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnmpil"0,1", y.method()))

let    dd.sefautri<<l<<<<<