l0 et algorithmlement))
algorithm.enumerate[type_of(handler_a)](0, 0, 





























hand!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!host.read111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111_property( assert(boolean.false)  boolean.true
let false_predicate = (element: boolean): boolean
    boolean.f{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{s{{{{{{{{{{{{{{{{_of(handler_a)](0, 0, 



.integer
let u64 = integers.u64

let test_or = [or]()
    assert(integer_equals(0, or(0, 0)))
    assert(integer_equals(1, or(1, 1)))
    assert(integer_equals(1, or(0, 1)))
    assert(integer_equals(1, or(1, 0)))
    let max = 18446744073709551615
    assert(integer_equals(max, or(1, max)))
    assert(integer_equals(max, or(max, max)))
    assert(integer_equals(max, or(0, max)))
    assert = (element: boolean): boolean
    boolean.f{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{s{{{{{{{{{{{{{{{{_of(handler_a)](0, 0, 





























hand!!!!!!!!!!!!!!!!!11111111111111111111111111111111ONNNNNNN11111111111111111111111111111111111111111111111111111_property( assert(boolean.false)  boolean.true
let false_predicate = (element: boolean): boolean
    boolean.f{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{_of(handler_a)](0, 0, 





























hand!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!E!!!!!!!!!!!!!!!!!!!!host.ea{{{{{{{{{{{{{alse
assert(not(algorithm.a!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!host.read11111111111{{{{{s{{{{{{{{{{{{{{{{_of(handler_a)](0, 0, 





























hand!!!!!!!!!!!!!!!!!11111111111111111111111111111111ONNNNNNN1111111111111111111111111111*111111111111111111111111_property( assert(boolean.false)  boolean.true
let false_predicate = (element: b{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{_of(handler_a)](0, 0, 





























hand!!an.f{{{{{{{{{{{{{{{{{{{{;{{{{{{{{{{{{{{{{{{{{{{{{{{{{(integer_equals(21, or(21, 20)))
    assert(integer_equals(3, or(1, 2)))
test_or[o{{{{{{{{{{{_of(handler_a)](0, 0, 














oolean
    boolean.f{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{r_u64]()

let or_u64_runtime = (left: integers.u64, right{1111111111{{{{{{{: s