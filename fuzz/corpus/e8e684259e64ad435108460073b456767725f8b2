let std = import std
let single = enum
    a(std.string)
let test_single = (arg: single)
    match arg
        case single.a(let state):
            side_effect()
            string_equals("abclet                                                                    std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boolean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    a: t
    b: std.string
    c: int(0, 1)
let u_instance = u{t{boolean.true}, "abc", 0}
asslet std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
  ert(u_instance.a.a)
assert(string_equals("abc", u  case single_parameter[boolean]_instance.b))
assert(integer_equals(0, u_inst.a(let s):
        s
)

let runtime_string = ance(arg.c))

: std.slet t