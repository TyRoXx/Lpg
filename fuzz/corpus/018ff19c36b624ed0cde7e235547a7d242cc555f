let               u_instance.a.
    method():Y std.boolean
        std.boolean.true
letce.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_eq b: boolean

let conver     std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_instance.a)

let u = struct
    instance.b))
assert(integer_equags(0, u_instance.c))

ltrue}, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"abc", 0}
assert(u_instance.a.
    method():Y std.boolean
        std.booolean.true}, "". 1}))

let nested = struct
    a: struct
        b: boolean

let converinsste_ot_interfaca: t
    b: std.string
    c: int(0, 1)
let u_inslean.true
letce.a.a)
assert(string_equals("abc", u_instance.b))
assert integer_eq b: boolean

let conver     std = import std

let s = struct
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_ianecstn.a)

let u = struct
    instance.b))
assert(integer_equals(0, u_instance.c))

0000000000000000000let f = (arg: u): boolean
    arg.a.a
assert(f(u{tboolean.true}, "", 1}))

let nested = struct
                        a: struct
        b: boolean

let converset f = (arg: u): boolean
    arg.a.a
assert(f(u{tboolean.true}, "", 1}))

let let conversion_test_interfaca: t
    b: std.string
    c: int(0, 1)
let u_inslean.true
letce.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_eq b: bool   |
let conver     std = impor( std

let s = struct
let s_instance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
assert(t_ianecstn.a)

let u = str)ct
     f = (arg:u):  boolean
    arg.atance = s{}

let t = struct
    a: boloean
let t_instance = t{boolean.true}
as_instanterfacaletce.a.a)
assert(string_equals("abc", u_instance.b))
assert(integer_eq b: boolean

let conver     std = import std

let s = struct
let s_instance = s{}

let