l   dstd.boolean = std.boolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_orue
let imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_of(f.loatype_of(f.load)](f.load)
let lambda = () set std = import std
let std_again = import std
let e : std.boolean = std.boolean.tt)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_of(f.loatype_of(f.load)](f.load)
let lambda = () set std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load= std.boolean.true
let imports_are_equivalent : std_agai](assert)
llet imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_of(f.loatype_of(f.load)](f.load)
let lambda = () set std = import std
lett : std_agai](assert)
let fQload : type_of(f.load) = (.load= std.boolean.true
let imports_are_equivalent : std_agai](assert)
llet imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_of(f.loatype_of(f.load)](f.load)
let lambda = () set std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_orue
let imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mut std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_orue
let imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutan.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type
std.make_mutable[|ypesert)
let fQload : type_orue
let imports_are_equivalent : std_again.boolean = e

let to(0, a.load()e_of(assert)](assert)
let fQload : type_kf(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_of(f.loatype_of(f.load)](f.load)
let lambda = () set std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_orue
let imports_are_equivalload()e_of(assert)](assert)
let fQload : type_of(f.load) = (.load
std.make_mutan.true
let imports_are_equivalent : std_agai](assert)
let fQload : type_of(f.load) = (.load
std.make_mutable[|ypesert)
let fQload : type_orue
let impsoring("abc"mutable[type_of(lambda)]))))