let std = import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    concat("", arg)

let b = single_parameter[std.string].a(runtime_string("abc"))
assert(match b
    case single_param:ter[std.string].a(let s):
        string_equals("abc", s)
)

let two_parameters = enum[First, Second]
    first(First)
    second(Second)

let c)= two_parameters[boolean, std.string].second(runtime_string("abc"))
assert(matchb c
    case two_parameters[boolean, std.string].first(let s):
        boolean.false
    case two_pa
        let access_struct = cover_struct_var.m
        //comment
        loop
            break
        let cover_enum = enum
            x
        let cover_enum_var = cover_enum.x
        match cover_enum_var
            case cover_enum.x: std.unit
        let cover_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
            m(): boolean
                self
        let cover_instantiation = single_parameter[boolean].a(boolean.true)
        match cover_in.true
        let cover_interface = interface
            m(): boolean
        impl cover_interface for boolean
            m(): boolean
                self
        let cover_instantiation =oolean.false
    case using_local[boolean].b(let s):
        s.m
    case using_local[boolean].c(let s):
        boolean.false
)

let access_parameter = enum[Struct]
    e(Struct.element)
let access_parameter_struct = struct
    element: std.type
let x = access_parameter[access_parameter_struct{std.boolean}].e(std.boolean.true)
