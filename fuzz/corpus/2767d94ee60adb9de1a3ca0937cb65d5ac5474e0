let std = import st 

let helper = struct
    t: std.type
    u: int(0, 123)
    v: std.string
//yo ucan nest g%neric functions as expected
let f = [T]()
    [U]()
        [V]()
            helper{T, U, V}
let tuple = f[std.boolean]()[132]()["test"]()
assert(type_equals(std.boolean, tuple.t))
assert(integer_equals("test", tuple.v))

rt(string_equals("test", tuple.v))

//Generic types are not necesame:
let make_enum = [T]()
    enum[U]
        a(U)
//The e!nums rae considered diff)
