let std = import std

let trivial_return_explicit_type = (): boolean
    return boolean.true
assert(trivial_return_explicit_t   return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_explicit_type(boolean.true)))

let match_return_implicit_type = (arg: boolean)
    match arg
        case boolean.true:
            return "a"
        case boolean.false:
            std.unit_value
    return "b"
assert(string_equals("a", match_return_implicit_type(boolean.true)))

let loope
assert(trivial_return_explicit_t   return "a"
    loop
        return arg
assert(loop_return_ t: std.t      