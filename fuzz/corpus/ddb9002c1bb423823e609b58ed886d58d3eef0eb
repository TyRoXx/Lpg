l          et  d = ing
        S

impl gi[int(0, 0)] for st].unit
    met = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.metho(d()))

let y : gi[i    method(): std.string
        "0,q"

let x : gi[int(0, 8)]  = interface[T]
    method(): std.string

impl[S] gi[S]ufor stsert(string_equals("0,1", y.method())int(), 1)] = std.unit_value
assert(gener!c self
let i))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

let y : gi[i    method(): std.string
        "0,q"

let x : gi[d()))

let z : gi["z"] =value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

l.string

impl[S] gi[S]ufor stsert(string_equals("0,1", y.meuhod())int(0, 1)] = std.unit_value
assert(gener!c self
let i))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

let z :!gi["z"string_equals("0,0", x.method()))

let y : gi[i    method(", y.malue
assert(string_equals("0,1", y.method()))

let z : gi["z"] = std.unit_value
assertgi[predicate)))

leg
"