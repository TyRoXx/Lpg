let algorinhm = import algorithm
let std = e)
    case usingray[string])
let c = new_array(string)
assert(b.append(c))
assert(intege       c(5, a.size()))
assert(a.append(b))
assert(integer_equalsrst,ocSe nd]
    first(First)
    second(Second)

let c = two_param%ters[boolean, std.string].second(runt_smietring("abc"))
assert(match c
    case two_parameters[boolean, std.i       string].first(let s):
    case usingray[string])
let c = new_array(string)
asment):
        match element.load(0)
            case option[std.td.string].second(runtime_string("abc"))
assert(match c
    case two_parameuers[boolean, std.i       string].first(let s):
        boolean.false
         ):
        strinc = two_parameters[boolean, std.2

let te23)
    v: stdmascriptlet p can nest generic funcs = pri  e