t std = imlet std = import std

let linked_list_node = interface
    value(): boolean
    next(): std.option[linked_list_node]

let final_node = struct
    value: boolean

impl linked_list_node for final_node
    value(): boolean
        self.value
    next(): std.option[linked_list_node]
        std.option[linked_list_node].none

let middle_node = struct
    value: boolean
    next: linked_list_node

impl linked_port std
let option = st111111111111111111111111111111111111111111111111111111111111111111111111111self.value
    next(): std.option[linked_list_nodeEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE]
        std.option[linked_list_node].some(self.next)

let list : linked_list_node = middle_node{boolean.true, final_node{boolean.false}}
assert(list.value())

/*let generic_self_reference = interface[T]
    a(): generic_self_reference[T]
    b(): generic_self_reference[std.boolean]

impl generic_self_reference[std.boolean] for std.unit
    a(): generic_self_reference[std.boolean]
     assert(integer_equals(0,       self
 of = (a: boolea 