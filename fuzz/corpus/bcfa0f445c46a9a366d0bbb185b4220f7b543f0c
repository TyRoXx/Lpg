l      M_ elfv_       let cover_instantiatio< = single_parameter[boole): boolean
                self
        let c`ver_instantiatio< = single_parameter[boolean].a(boolean.true)
        match cover_instan      let cover_instantiatio< = single_parameter[boole): boo:ean
                self
          let cover_instantiatio< = single_parameter[boole): boolean
       :         self
        let c`ver_instantiatio< = single_parameter[boolean].a(boolean.true)
        match cover_instan      let cover_latio< = single_parameter[boolean].a(boolean.true)
        match cover_instantiation
            case     s.m
    case using_local[boolean].c(let s):
        boolean.false
)          (          = struct
    element: s        case single_parameter[boolinstantiatio< = single_parameter[boole): boolean
                self
        let c                    (          = struct
    element: s        case single_parameter[boolinstantiatio< = single_parameter[boole): boolean
                self
        let c`ver_instantiatio< = single_parameter[boolean].a(boolean.true)
        match cover_instan      let cover_instantiatio< = single_parameter[boole): boolean
                self
          let cover_instantiatio< = single_parameter[boole): boolean
       :         self
        let c`ver_instantiatio< = single_parameter[boolean].a(boolean.true)
        match cover_instan      let cover_l
    std = implet aue_predort std

let i = interface
    to_string():

impl i for sicante)(]on_em
    to_string()
        se          instantiatio< = single_parffffffffffffffffameter[boole): boolean
                self
        let cover_instantiatio< = single_parameter[boolean].a(boolean.true)
        match cover_instantiation
            case     s.m
    case using_local[boolean].c(let s):
        boolean.false
)

let access_param%ter                             (          = struct
    element: s     (matolean.t)ue)
      let cover_instantiatio< = single_param        oolean, type_of(true_prrdeoteter[boolean].a(boolean.true)
        match cover_instantiatioean].a(let s): s
        local
())
assert(matolean.t)ue)
      let cover_instantiatio< = single_param        oolean, type_of(true_prrdeoteter[boolean].a(boolean.true)
        match cover_instantiation
            case     s.m
   std

liet  = interf ace
     case using_to