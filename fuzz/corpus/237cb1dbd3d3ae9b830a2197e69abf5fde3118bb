let std = import std
let std_again = import std
let e : std.boolean = std.boolea(integer_equals(0, a.load()))
assert(integer_equals(2, b.load()))

assert(match std.option[std.unit].some(std.unit_value)
    case std.option[std.unit].some(let s):
        std.boolean.true
    case std.option[std.unit].none:
        std.boolean.false
)

let u = std.make_mutable[std.unit](stdd.unit_value)
assert(quals(0, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
assert(not(f.load().member))ssert(integer_equals(1, d.load().size()))
d.store(new_array(std.unit))
assert(integer_equals(0, d.load().size()))

let s = struct
    member: std.boolean
let f = std.make_mutable[s](s{std.boolean.true})
assert(f.load().member)
f.store(s{std.boolean.false})
assert(not(f.load().member))

std.make_mutable[std.type](std.boolean)
(a: host_value) std.make_mutable[host_value](a)
std.make_mutable[type_of(interface[T])](interface[T])
std.make_mutable[type_of(std.option[std.unit].some)](std.option[std.unit].some)
std.make_mutable[type_of(struct[T])](struct[T])
std.make_mutable[type_of([T]() T)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[]T)
std.make_mutable[se_of(enum[T])](enum[T])
stdmutable[type_of(lambda)](lambda)
