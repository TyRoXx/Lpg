let std = import std

let require_comlet std = import std

let single_parameter = enum[T]
    a(T)555555555555555555555555555555555555555555555555555555555555555555555555555555555000000000000000000000000000000001184644519

let a = single_parameter[boolean].   _a(boolean.true)
assert(match a
    case single_parameter[boolean].a(let s):
        s
)

let runtime_string = (arg: std.string)
    side_effect()
    a(runtime_string("abc"))
assert(match b
    case single_parameter[std.string].a(let s):
     t sr  ing_equals("abc", s)
)

let two_parameters = enum[First,                      ake_runtimelean
let multi = enum
                 SecondT
    fiover_enum_var = cover_enum.x
          case cover_enum.x: std.unit
        lettd.and
require_compile_time[and]

le   a(single)
    b(stt ru