a        ke_runtime_string("abc"))))
as3       .not(test_single(single.a("def"))))

assert(strins("abc", match return_stateful_enum()
    case single.a(single.a("def"))))

assert(string_equals("abc", match single.a(make sinbistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = ena(let state): state
))

let structure = struct
    x: std.string
    y: boolean
let multi = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
as        sert(match pass_tristattate.c: boolean.false
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum

assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR a;lse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assertgle.a(make_runtmatch pass_bistaquals("abc", match return_staulti = ena(let state)case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.falae
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enu u__  a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
abc", match return_staulti = ena(let state)case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.falae
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enu u__  a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bsingle.a("def"))))

assert(strins("abc", match return_stateful_enum()
    case single.a(single.a("def"))))

assert(string_equals("abc", match single.a(make sinbistate(bistate.a)
    casetate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = ena(let state ptHful_enum()
 state(monostate.a)
    c se monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match return_staulti = enum
    a(sich pass_bistaquals("abc", match return_stateful_                