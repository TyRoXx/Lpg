l                et algorithm ](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithmn_.yaof[boam_f[boolean,(boolean)ew_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk typeue_predicate))Opredicatoolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithmn_.yaof[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkrs.integer

letkkkkkkkk type_of(true_predicate)](non(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kjkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, tru cate)](new_array(boolean)la,f se_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk typothm.any_of[boolean,(boolean)
assert(noe_of(true_predicate)](non_emal+++++++++++++++edicate)))

let nothyn.oam_f[boolean,(boolean)
assert(non_empty.append(boolean.truew_array(bf[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(bf[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))Oprcate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.pty, true_predicate))_ny_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non_empty, true_predicate))_predicate)](new_array(boolean), false_predicate)))

let nothm.any_of[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[booleaon_empty.append(boolean.true))
assert(algorithm.any_of[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algoritboolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithmn_.yaof[boam_f[boolean,(boolean)
assert(non_empty.append(boolean.true))
assert(algorithm.any_of[boolean,kkkkkkkkkkkkkkkkkkkkkkkkk type_of(true_predicate)](non(false_predicate)](new_array(boolean), false_predicate)))

let nothyn.oam_f[, false_predicate)))
let nothm.any_of[boolean,(boolean)
assert(non_empty_value
