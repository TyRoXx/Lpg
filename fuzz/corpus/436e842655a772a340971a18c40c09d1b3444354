  c        t(): std.unilet std = import std

// impl for generic interface
let gi = interface[T]
    metert(string_equals("0,0", x.method()))

let y : gi[int(0, 1)] = std.unit_value
assert(string_equals("0,1", y.method()))

llt z = import std

// impl for generic interface
let gi = interface[T]
    method 
t(   do(): std.unit
    double(): std.unit
    else(): std.unit
    extern(): std.unit
    float(): std.unit
    for(): std.unit
    goto(): std.unit
    if(): std.unit
    inline(): std.unit
    int(): std.unit
    long(): std.unit
    register(): std.unit
    restrmct(   *                                                                      rt(nend_4()
    append_4()
let append_64 = ()
    append_16()
    a_dppe1n6()
    append_16()
    append_16()
let append_256 = ()
    append_64()
    append_64()
    append_64()
    append_64()
let append_1024 = ()
    append_256()
    append_                                                                                                                                                            eference[T]
    b(): generic_selfnt(0, 0)
    pr_referenint()
        "c0"
e[ n)
    break

loop
    loop
        let no_leak = new_array(boolean)
        break
    let no_leak_either = new_array(boolean)
    break

loop
    let no_leak = new_array(boolean)
    match std.runtime_value[boolean](boolean.true)
        case boolean.true:
            break
   `____   pl printable2 for std.string
    print(): std.string
        self
    other_method(): std.unit
        std.unit_value

impl printable2 for std.unit
    print()
        "unit"
    other_met)))
assert(type_equals(make_enum[1]()[std.u;nit], make_enum[1]()[s
    append_16()
    append_16()
    append_16()
    append_16()
let append_256 = ()
    append_64()
    append_64()
    append_64()
    append_64()
let append_1024 = ()
    append_256()
    append_                                                let std = import std

//import std

// impl for generic interface
let gi`B_ nterface[T]
    method(): std.string

impl[S] gi[S] for std.unit
    method():                                                                                                            eference[T]
    b(): generic_selfnt(0, 0)
    pr_referenint()
        "c0"
e[ n)
    break

loop
    loop
        let no_leak = new_array(boolean)
        break
    let std.string
        S

impl gi[int(0, 0)] for std.unit
    method(): std.strinals("u", u.method()))

// impl for generic self
let i = interface no_leak_either = new_array(boolean)
    break

loop
    le
   t m no