let std = import std
let std_again = import std
let e : std.boolean = std.boolean.true
let imports_are_equiv : std.mutable[std.string] = std.make_mutable[std.string]("test")
assert(string_equals("test", p.load()))
p.store("123")
assert(string_equals("123", p.load()))

let a = std.make_mutable[int(0, 3)](0)
assert(integer_equals(0, a.load()))
a.s''''''''''''''''tore(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)_mutab
letmutable[type_of(std.option[std.unit].some)](std.option[std.unit].sd)
mtoes.make_mutable[type_of(stbuct[T])](struct[T])
std.make_mutable[type_of([T]() T)]([T]() T)
std.make_mutable[type_of(enum[T])](enum[T])
std.make_mu     
a.s''''''''''''''''tore(3)
assert(integer_equals(3, a.load()))
let b = std.make_mutable[int(0, 3)](3)_mutable[host_value](a)
std.make_mutable[type_of(interface[T])](interface[T])
s(0)
assert(integer_equals(0, a.load()))
a.st[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make3mutable_mutable[type_of(enum[T])](enum[T])
std.make_mutable[std.string]("test")
std.make_mutable[type_of(assert)](assert)
let f_load : type_of(f.load) = f.load
std.make_mutable[type_of(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_mutable[type_of(lambda)](lambda)
