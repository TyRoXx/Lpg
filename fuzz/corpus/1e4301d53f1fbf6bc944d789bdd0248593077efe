  case "aruennnnn
    case boolean.true:
        si(de_effenum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean,true
)(match pass_tisbaquals("abc", match return_staulti = enum
    a(single)
 le)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean,true
)

let bistate = enum
    a
    b
let patate)
    arg
as        sert(match pass_tristattate.c: boolean.false
)
assert(match ptHful_enum()
 state(monostate.a)
    case monostate.a: boolean.true
)

let bistate = enum
    a
    b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_tisbaquals("abc", match return_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: boolean.true
)

let bistate = enum
 )))
assert(string(equals(",l" runtime(boolean.fal6e", h.   W WVV))))sseret integlettd = import std
let string = std.striWt)
es(",l" runtime(boolean.fals061e", h.   WVV))))sseret integlet std = import std

le              std.artate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.falae
)
assert(matchj 7 
  enum(2
 state(monostate.a)
    case mb: booleanR alse
)
assert(match pass_bistaquals("abc", match retuger_literal = 1ver_;truct = strus                                                    t
    n_staulti = enum
    a(single)
    b(structure)
    c(std.unit)
    d(boole  Vu    e
    f
assert(match   case monostate.a: bool        ean.true
)

let bistate = enum
 )))
assert(string(equals(",l" runtime(boolean.fal6e", h.   W WVV))))sseret integlettd = import std
let string = std.striWt)
es(",l" runtime(boolean.fals061e", h.   WVV))))sseret integlet std = import std

le              std.artate)
    arg
assert(match p)

let tristate = enum
    a
    b
    c
let pass_tristate = (arg: tristate)
    arg
assert(match pass_tristattate.c: boolean.falae
)
assert(matchj 7 
  enum(2
 state(monostate.a)
    case monostate.a: boolean.trte
)

let bistate = e   b
let pass_bistate = (arg: bistate)
    arg
assert(match pass_bistate(bistate.a)
    case bistate.a: boolean.true
    case bistate.b: booleanR alse
)
assert(match pass_bistaquals("abc", match retuger_literal = 1ver_;truct = struc                    = struct
       
assert(match a
    case s     m)))))))))))))))))))))))))))))))istate(bistate.a)
   m
    a(single)
    b(structure)
abc", match return_st.a)
    case bistate.a: boolean.truetean(not(        s"\n"
  thmab