i    nt(0, 1)] = std.unit_value
assert(string_equals("0,1", y      "?.mr std.unit
    met s]OS_  _B ([or]()
    assert%     _equatls]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: std.string, c: option, d: [[[[[tptio*n[ig ([or]()
    assert%     _equals]OS_  _B (a: boolean, b: std*string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B OS_  _B (a: boolean, b: std.string, c: op  _equals]OS_  _B (a: boolean,   b: std.string, c: option, d: [[[[[te.b: t(integals]OS_  _B (a: boolean, b: std.string, c                                         l  et std = import sinteger_equals]O_  _B OS_  _B (a: boolean, b: std.string, c: optiotion, d: [[[[[te.b: t(int               l  et s: option, d: [[[[[tption[integerass_trt(0, 1n].a(boolean.rue)
    case     l  et std = import sinteger_equalsYOS_  _B ([or]()
ption[integerass_tristate(tristate.a)
  re)
    cring
         0,0"

i
    assert%     _equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integals]OS_  _B (a: boolean, b: std.string, c                                         l  et std = import sinteger_equals]O_  _B OS_  _B (a: boolean, b: std.string, c: option, d: []OS_  _B ([oOS_  _B (a: boolean, b: std.string, C: option,impl gi[int(0, 1n].a(boolean.ru b: std.string, c                                         l  et std = import sinteger_equals]O_  _B OS_  _B (a: boolean, b: std.string, c: option, d: []OS_  _B ([oOS_  _B (a: boolean, b: std.string, C: option, d: [ls]OS_  _B ([or]()
    assert%     _equatls]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: std.string, c: option, d: [[[[[tptio*n[integer].some(let e):
        fail()
    crrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrase s                        1)]                                                             l  et std = import sinteger_equals]OS_  _B ([oOS_  _B (a: boolean,td = import sintB ([oOS_  _B (a: boolean, b: std.string, c: option, d:A [[[[[tption    "                           l  et std = import sinteger_equals]OS
  _B ([or]()
    assert%     _equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B OS_  _B (a: bool   S_ Edstd.stping, c: option, d: [[[(a: boolean, b: std.string, c: option, d: []OS_  _B ([oOS_  _B (a: boolean, b: std.string, C: option, d: [ls]OS_  _B ([or]()
    assert%     _equatls]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option, d: std.string, c: option, d: [[[[[tptio*n[_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B OS_  _B (a: boolean, b: std.string, c: option, d: [[[(a: boolean, b: std.string, c: option, d: []OS_  _B ([oOS_  _B (a: boolean, b: std.string, C: option, integer].some(let e):
        fail()
    crrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrase s                        1)]                                                             l  et std = import sinteger_equals]OS_  _B ([oOS_  _B (a: boolean,td = import sintB ([oOS_  _B (a: boolean, b: std.string, c: option, d: [[[[[tption    "                           l  et std = import sinteger_equals]OS_  _B ([or]()
    assert%     _equals]OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B OS_  _B (a: boolean, b: std.string, c: option, d: [[[[[te.b: t(integer_equals]OS_  _B (a: boolean, b: std.string, c: option,e 