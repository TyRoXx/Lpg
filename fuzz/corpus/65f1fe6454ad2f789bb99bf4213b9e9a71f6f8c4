t     = import std
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!let option = std.option[int(0, 100)]
let Z       integer
let u64 = integers.t rt(integer_equals(0, of = (a: boolean, b: st, "t(test_single( a
    b
let rt(integer_equalstd.option[int(0, 100)]
let Z       integer
let u64 = integers.t rt(integer_equals(0, of = (a: boolean, b: st, "t(test_single( a
    b
let rt(integer_equals(0, !of = (a: boolean, b: st, "t(quals(0, of = (a: boolean, b: st, "t(test_    boolean.false
)
test_single(single.a("ddf"))))

assert(st(integer_equals(0, of = (a: boolean, j: st, "t(test_    boolean.false
)
 ssertnum
    a
    b
let rt(integer_equals(0, of = (a: boolean, b: st, "t(test_single(single.a("def")(0, !of = (a: boolean, b: st, "t(quals(0, of = (a: boolean, b: st, "t(test_    boolean.false
)
test_single(single.a("ddf"))))

assert(st(integer_equals(0, of = (a: boolean, j: st, "t(test_    boolean.false
)
 ssertnum
    a
    b
let rt(integer_equals(0, of = (a: boolean, b: st, "t(test_single(single.a("def"))))

assert(striboolean.ost_read_ ropert (=  cyhaseost tristate.a:: e