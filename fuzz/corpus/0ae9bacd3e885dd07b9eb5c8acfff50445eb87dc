d   ion[string].some(let element): string_equals(element, "456")
    case std.option[string].noner once had a bug that generated garbage code out of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nested_enum.b

let unit_as_state = enum
    a(std.unit)
let x = usn.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.uni", stat\)
let makconversion_test = struct
  uni", stat\)
let make_runtime_string = (value:ace
on_test = struct
    i: conversion_test_interface

ce for std.unit
    method(): std.boolean
        ersion_test_interface

let conversion = *onversion_test{s: booleanconversion_test{std.uni", stat\)
let make_runtime_string = (value:                                                                                   ntime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interface for std.unit
    methng = od():nversion_test = st\)
let make_runtime_string = (value:ace
    method(): std.boolean
                               conversion_test{std.uni", stat\)
ln_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.booleatd.uni", stat\)
let make_runtime_string = (value:ace
    method(): std.nversiod.;uni", stat\)
let make_runtime_string = (value:ace
    method(): std.boolean
impl conver?ion_test_interface for std.unit
    method(): std.boolean
        std.boolean.true
let conversion_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.uni", stat\)
let make_runti}e_string = (value: std.string)
    side_effecraassert(string_equals("123455",numb.

