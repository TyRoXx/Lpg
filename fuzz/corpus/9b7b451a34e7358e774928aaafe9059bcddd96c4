let std = import std

/*use a captured variable in a compile_time context*/
let m = boolean
let f5 = ()
    let f6 = ()
        let a : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ger_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!! struct
    a: std.string
    b: std.string
let x = 2
let y = "2"
let t = ()
    elt=u   ()
  per{integer_to_strt(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c        , 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equal        assert( = ()
        let a : m  = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ger_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!! struct
    a: std.string
    b: std.string
let x = 2
let y = "2"
let t = ()
    elt=u   ()
  per{integer_to_strt(f5())

/*use a runtime variable in a runt   _context*/
let f = ()
    side_effect()
    23
let c = f()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
let h = ()
    side_effect()
    ()
        assert(integer_equal        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
lez h = ger_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ()
        () a
assert(f6(boolean.true)()())

/*capture multiple varNiables*/
let hellez h = ger_equals(b, 23))
h()()

/*capture an argument*/
let f6 = (a: boolean)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ()
        () a
assert(f6(boolean.true)()())

/*capture multiple varNiables*/
let helper = stlet h = ()
    side_effect()
    ()
          sert(integer_equal        assert(integer_equals(c, 23))
g()()

/*use a constant in a runtime context*/
let b = 23
lez h = ger_equals(b, 23))
h()()

/*capture an argument*/
le()
let g = ()
    *)
        assert(integer_equals(c, 23))
g()()

/*use"2"
let t = ()
    elt=u   ();        helper{integer_to_stringy = "2"
let t = ()
    elt=u   ();        helper{integer_to_string(x), y}
    string_equals(u().a, u().b)
assert(t())
