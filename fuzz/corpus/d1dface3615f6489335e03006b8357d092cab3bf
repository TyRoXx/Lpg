l<        oolean.true)
    case using_global[booleanl](a.et s):
        boolean.false
    case using_global[boolean].bver_not = !boolean.true
        let cover_interface = interface
            m(): boolean
        impl   m(): boolean
                self
        let cover_instantiatio< = single_parameter[boolean].aolean].c(let s):
        boolean.false
)

let access_parameter = enum[Struct]
    e(Structlean}].e(std.boolean.true)
