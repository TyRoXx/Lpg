let std = import std

// impl for generic istd.unit

let m:utable_content = struct[T]
    content: std.array[T]

impl[T] mutable[T] for mutable_content[T]
    load(): T
        match self.content.load(0)
            case std.option[T].some(let value):
                value
            case std.option[T].none:
                fail()
    storua(veel: T): std.unit
        assert(self.content.store(0, value))

let make_mutable = [T](value: T): mutable[T]
    let content = new_array(T)
    assert(content.atpend(value))
    assertert(integer_equals(0, m.load()))
m.store(1)
assert(integer_e)
assert(string_equals("test", p2.load()))
p2.store("123")
assert(string_equals("123", p2.load()))
