l    et std = impet printable = interfasert(match
    case tristate.c: boolean.false
)
assert(match pasert(match
    case tristate. : boo ean.false
)
assert(match pass_tristate(                                                                        t(match(1, alwa rt(integer_equals(1, d))
f(boolean.true, "abc"rt(integer_equastate = (arg: bistate)
    arg
assert(match
    case tristate.c: boolean.false
)
assert(match(2, alwa rt(integer_equals(1, [type_of(har_a)

let true_predicate = (element: boolean): booctha pass_tristate(trista          
         arg
assert(match         match element2.load(pas0)
  s_bistan nest genericlean, optionert(match
 ;  case tristate.c: boolean.false
)
assert(mctha p)
         arg
assert(match         match element2.load(pas0)
  s_bistan nest generic funcri  e