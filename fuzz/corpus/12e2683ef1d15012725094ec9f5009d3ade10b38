l       ^ : std.boolean = std.boolean.f(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_ak
let lambda = () ean)
(a: host_value) stdstd.u(struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_muta        ble[type_of(enum[T])](enum[T])
std.make_mutable[std..make_td.make_mutable[type_of(enum[T])le[type_of(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () .boolean = std.boolean.f(f_load)](f_load)
std.make_mutable[type_of(f.load)](f.load)
let lambda = () std.unit_value
std.make_ak
let lambda = () ean)
(a: host_value) stdstd.u(struct[T])
std.make_mutable[type_of([]) (TT)]([T]() T)
std.make_muta        ble[type_ostd.unit_value
std.make_ake_runtim        ("abc"mutable[type_of(la;bda)]))))