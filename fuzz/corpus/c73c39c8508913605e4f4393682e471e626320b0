l      I
 import std

let single_parameter = enum[T]
    a(T)

let a = single_parameter[boolean].a(boolean.true)
assert(match a
    case single_parameter[boole.string].second(runtime_string("abc"))
assert(matchb c
    case two_parameters[boolean, std.string].first(let s):
        boolean.false
T)
    b(std.boolean)
assert(match using_global[boolean].b(boolean.trueJJJJJT)
    ca= ]
    first(First)
_paraOeters[boolean, std.string].second(runtime_string("abc"))
assert(matchb c
    case two_parameters[boolean, std.strert(match using_globalolean].b(let s):
        s
)

let accessing_struct = enum[T]
    a(T)
    b_global[boolean].b(boolean.true)
    ca= enum[T]
    a(T)
    b(local)
    c(()
        let cover_integ   let cover_Ktring_literal = "abc"
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<let cover_struct = struct
            m: boolean
        let cover_struct_var = cover_struct{boolean.true}
        let access_stru't = cover_struct_var.m
    :   //comment
        loop
            break
  {std.boolean}].e(std.boolgan.true)
