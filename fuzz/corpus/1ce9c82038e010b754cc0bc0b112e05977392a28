e    td = import std

let req[w      et state): boglean.false
    cas% multi.e: b2olean.false
    case of this:
let nested_enum = enum
    a(enum
        b)
    b
let n = nested_enum.b

let unit_as_state = enum
'   a(std.unIt)
let x = unit_as_state.a(std.u!it_value)
assert(match x
    case unit_as_state.a(let ignored):
        std.boolean.true
)ect()
  Yf: boolean.false
)

//the type checker once had    side_effor64, righte_stving("abc"))
assert(string_equals("abc", match return_stateful_enum()
    caan)    e
    f
assert(match multi.b(structure{"abc", bf: boolean.false
)

//the type checker once had    side_effor64, right: int   (enum[T])
std.make_mutabintegele[s    loop
        return arg
assert(loop_retu return_'nteger_implicit = (arg: boolean)
    match arg
      c  ase boolean.false:
            return 3
        case boolean5true:
            rloolean.false
    case multi.b(let state):
t(str:ing_equals("123456", :concat("123", runtime_string() (element: boole