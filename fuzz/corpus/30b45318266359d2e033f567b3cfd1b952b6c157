l     std = import std

let single_par p.looad()))
p2tso.re("value))
p1tso.  load()))
p2tso.re("mport std
let e : ()        ))

let o = make_mutable[std.s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(inte()))
p2tso.re("value: T): st0)
assert(integer_equad()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enum[!]
 = make_mutal       ^tdble[std.stri
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("mport std
let e : ()        ))

let o = make_mutable[std.s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let s                               ct()ean.tbxe
    case tristate.b: booan.         import std
let e : ()))

let o = make_mutabdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))

lit p2 = make_mutal       ^tdble[std.stri
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.  load()))
p2tso.re("mport std
let e : ()        ))

let o = make_mutable[std.s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(inte()))
p2tso.re("value: T): st0)
assert(integer_equad()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enum[!]
 = make_mutal       ^tdble[std.stri
p2tso.1.load(     ring_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("mport std
let e : ()        ))

let o = make_mutable[std.s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let s                               ct()ean.tbxe
    case tristate.b: booan.         import std
let e : ()))

let o = make_mutabdble[std.string]("test")
assue
ert(string_equals("test",)
 p2.load()))
p2tso.1.load()))
p2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_e
  WJS n.loadp2tso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let std_again = import std
let e : ()        ))

let o = make_mutable[std.s
litso.re("value))
p1tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, n.load = import std
let s                                                 std
let e : ()))

let o = make_mutable[p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equad()))
p2tso.1.load()))
p2tso.re("value))
p2tso.1.load()))
p2tso.re("value: T): st0)
assert(integer_equals(0, nl         = import std

le:t single_p         = enu [[[[[[[[[[r .l  oad c
=l