l   u let sets = import set
let std = import std

let s = sert(not(s.contains(std.boolean.false)))
assert(not(s.contains(std.boolean.true)))

assert(s.add(std.boolboolean.true)))

assert(s.add(n.true)))

assert(not(s.ae(std.bool.e;atrue)))
assert(not(s.remove(std.boolean.false)))
ofhhandler_a)](0,et trueimpyr >st= (element: 	 ((((= impyr >st= (((((((((((((((((((((((((((((((((((((ype_ofhhahhan impyr >st= ((((((((((((((((((((((:(((((((((((((((ype_ofhhandler_a)](0,et trueimpyr >st= (element: 	 (((l   u       h   it(m
let std = ihpyr >st= (element: 	 (((((((= impyr >st= (((((((((((((((((((((((((((((((((((((ype_ofhhandler_a)](0,et trueimpyr >st= (element:(not = [not(0)))
    ttttttttttf")))

let test_interface = inte 	 ((((= impyr >st= (((((((((((((((((((((((((((((((((((((ype_ofhhahhandl^r_a)](t std = impyr >st std = impyr >st= (element: 	 XWWWWWWB impyr >st= (((((((((((((((((((((((((((((((((((((ype_ofhhandler_a)](0,et trueimpyrst >= (element: 	 (((l   u       h   it(m
let std = impyr >st= (element: 	 (((((((= impyr >st= (((((rface
  b r udert.strindef")))

letot(0)((((((((((((((((((((((((())
   = interfenu!!!!
(((((((ype_ofhhandler_a)](0,et tru 