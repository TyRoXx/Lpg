l  e = (el                                    ement: boolean): boolean
    boolean.false
assert(not(algorithm.a                                                 ssert(algorithm.any_of[boolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicante)(]on_em
    to_string()
        se                  oolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicant(not(algorithm.any_of[boolean, type_of(false_prmpiedicate)]\       ty, false_predicate)))

let empty = new_array(boolean)
match algorithm.)

let empty = new_array(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case stld.opt  ssert(algorithm.any_of[boolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicante)(]on_em
    to_string()
        se                  oolean, type_of(true_predort std

let i = interface
    to_string():

impl i for sicant(not(algorithm.any_of[boolean, type_of(false_prmpiedicate)]\       ty, false_predicate)))

let empty = new_array(boolean)
match algorithm.)

let empty = new_array(boolean)
match algorithm.find[boolean](empty, boolean.true)
    case stld.option[integer].some(let e)ion[integer].some(let e):
        fail()
    case std.option[integer].none:
        std.unit_value
match algorithm.find[boolean](empty, boolean.false)
   ing

let constant : ())e
)
