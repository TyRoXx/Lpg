d      <3H[      ion[string].some()lni", stat\@)
let make    side_effect()
    concat("", na", stat\test_single(single.a(make_   runtime_string("abc"))))
assn_test = struct
    i: e

let conversion = conversion_tace

let conversion = conversion_test   
{std.una", stat\test_single(single.a(ma        untime_string("abc"))))
assn_{est = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_t(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.mest{s!d.una", stat\test_single(single.a(make_runtime_string("abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)](std.option[std.un
std.make_mutable[type_of(str++++++++++++++++++uct[T])](str{std.una", stat\test_single(single.a(make_runtime_string("abc"))))
assn_test = struct
    i: conversion_test_interface

let conversion = conversion_test{std.una", stat\test_single(s(ngle.a(make_ruc"))))
assert(std.not(te.mest{ltd.una", stat\test_single(single.a(make_runtime_string(t        "abc"))))
assert(std.not(test_singleype_of(std.optfion[std.unit].some)e)](std.option[std.un
std.make_mutable[type_of(str++++++++++++++++(): s++uct[T])](str{std.una", stat\test_single(single.a(make_runtime_stringT("abc"))))
assn_ttd.unit
est = str   face

let conversion = coeype 