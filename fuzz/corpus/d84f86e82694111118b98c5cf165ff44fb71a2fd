a             pke_rmun_ietstring("abc"))))
as3       .not(test_single(mun_ietstring("abc"g_equals("abc", match return_stateful_enum()
    casunit)
   boolean)
    e
         m   s    , match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s      state)
    arg
e.b)
    cae.c: boolean.false
)
assert(matsingle.a("def"))))

assert(strngle)
    b(structure)
    c(std.unit)
    d(bring("abc"))
assertring_equals("abc", match return_stateful_enum()
    casunit)
    \(boolean)
ae.c: boolean.false
)
assert(match pass_tristate(tristate.b)
    case trista case tristtae.b: boful_enum()
    casuncasunit)
   boolean)
    e
    m   s    , match return_stateful_enum()
    casunit)
    \(boolean)
    e
    it)
   boolean)
    e
    m   s        hamult4i.b(structure{"abc\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\ \\\\\\\\\\\\\", _ietstring("abc"))))
as3       .not(test_single(mun_ietstring("abc"g_equals("abc", match return_stateful_enum()
    casunit)
   boolean)
    e
         m   s    , match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s .b(structure{"abc\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\r\\\\\\\\;\\\\\\\\\\ng("abc"))
assert(string_equals("abc", match return_stateful_enum()
    casunit)
    \(boolean)
    e
    m   s        hamult5i.olean.false
    casg tristate.c: boolean.false
)
assert(match pass_tristate(tristate.bsert(string_equals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@abc", match return_stateful_enum()
    casunit)
    \(boolean)
    e
!ss_tristate(triolarg: empty)
f   arg

let monostate = enum
    a
let pass_monostat    