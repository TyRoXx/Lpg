cmake_minimum_required(VERSION 3.2)
project(Lpg C)

enable_testing()

if(MSVC)
	option(LPG_WITH_VLD "use Visual Leak Detector" OFF)
endif()
if(LPG_WITH_VLD)
	add_definitions(-DLPG_WITH_VLD=1)
else()
	add_definitions(-DLPG_WITH_VLD=0)
endif()

if(UNIX)
	option(LPG_WITH_GCOV "compile with gcov support" OFF)
    if(LPG_WITH_GCOV)
        add_definitions(-coverage)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -coverage")
    endif()

    option(LPG_WITH_UB_SANITIZER "compile with clang undefined behaviour sanitizer" OFF)
    if(LPG_WITH_UB_SANITIZER)
        add_definitions(-fsanitize=undefined -fno-omit-frame-pointer)
    endif()
   
    option(LPG_WITH_MEMORY_SANITIZER "compile with clang memory sanitizer" OFF)
    if(LPG_WITH_MEMORY_SANITIZER)
        add_definitions(-fsanitize=memory -fno-omit-frame-pointer -fPIE)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=memory -pie")
    endif()
   
    option(LPG_WITH_ADDRESS_SANITIZER "compile with clang address sanitizer" OFF)
    if(LPG_WITH_ADDRESS_SANITIZER)
        add_definitions(-fsanitize=address -fno-omit-frame-pointer -shared-libasan)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address -shared-libasan")
    endif()
   
    option(LPG_WITH_THREAD_SANITIZER "compile with clang thread sanitizer" OFF)
    if(LPG_WITH_THREAD_SANITIZER)
        add_definitions(-fsanitize=thread)
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread")
    endif()
endif()

file(GLOB_RECURSE formatted "*.c" "*.h")

option(LPG_WITH_CLANG_FORMAT "use clang-format to format the source code" ON)
if(LPG_WITH_CLANG_FORMAT)
	find_program(LPG_CLANG_FORMAT NAMES clang-format-3.7 clang-format PATHS "C:/Program Files/LLVM/bin")
	if(LPG_CLANG_FORMAT)
		add_custom_target(clang-format COMMAND ${LPG_CLANG_FORMAT} -i ${formatted} WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})
		option(LPG_WITH_CLANG_FORMAT_AUTO "format the code automatically before the build" OFF)
	endif()
endif()

if(MSVC)
	add_definitions(/WX /Wall /wd4820 /wd4255 /wd4201 /wd4204 /wd4710 /wd4711 /wd4221 /D_WIN32_WINNT_WINTHRESHOLD=0 /DNTDDI_WIN7SP1=0 /DWINAPI_PARTITION_SYSTEM=0)
else()
	add_definitions(-std=gnu11 -Wall -Wextra -Wconversion -Werror -Wunused -Wundef -Wvla)
endif()

add_subdirectory(generic)
add_subdirectory(tokenization)
add_subdirectory(syntax)
add_subdirectory(semantics)
add_subdirectory(cli_impl)
add_subdirectory(c_backend)
add_subdirectory(tests)
add_subdirectory(cli)
