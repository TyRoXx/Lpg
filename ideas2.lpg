let option = enum<T: type>
    none
    some(T)

enum option<T: type>
    none
    some(T)

let print-option (printed: option<let T>) -> unit
    match printed
        case option.none
            print("none")
        case option.some(let value)
            print(value)

print-option(option.some(123))

struct pair<First: type, Second: type>
    first: First
    second: Second

    to-tuple = ()
        return (first, second)

let p = pair{1, 2}

let make-pair = (first: let First, second: let Second)
    return new struct
        first
        second
        to-tuple = ()
            return (first, second)

let make-pair = <First: type, Second: type>(first: First, second: Second)
    return new struct
        first
        second
        to-tuple = ()
            return (first, second)

let make-pair = (first, second)
    return new struct
        first
        second
        to-tuple = ()
            return (first, second)

let p : ? = make-pair(1, 2)
